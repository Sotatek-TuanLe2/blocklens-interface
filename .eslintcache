[{"D:\\buni\\buni-launchpad-adminpage\\src\\index.tsx":"1","D:\\buni\\buni-launchpad-adminpage\\src\\App.tsx":"2","D:\\buni\\buni-launchpad-adminpage\\src\\routes.tsx":"3","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppSwitch.tsx":"4","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppSelect.tsx":"5","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppButton.tsx":"6","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppInput.tsx":"7","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\storage.tsx":"8","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppRadio.tsx":"9","D:\\buni\\buni-launchpad-adminpage\\src\\config\\index.ts":"10","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-auth.ts":"11","D:\\buni\\buni-launchpad-adminpage\\src\\connectors\\index.ts":"12","D:\\buni\\buni-launchpad-adminpage\\src\\connectors\\MetamaskConnector.ts":"13","D:\\buni\\buni-launchpad-adminpage\\src\\connectors\\BaseConnector.ts":"14","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\BaseModal.tsx":"15","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalTest.tsx":"16","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-notify.ts":"17","D:\\buni\\buni-launchpad-adminpage\\src\\store\\index.ts":"18","D:\\buni\\buni-launchpad-adminpage\\src\\store\\authentication.ts":"19","D:\\buni\\buni-launchpad-adminpage\\src\\store\\transactions.ts":"20","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-helpers.ts":"21","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalSubmittingTx.tsx":"22","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalViewSubmittedTx.tsx":"23","D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\index.ts":"24","D:\\buni\\buni-launchpad-adminpage\\src\\hooks\\useAuth.ts":"25","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\service.tsx":"26","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppSearch.tsx":"27","D:\\buni\\buni-launchpad-adminpage\\src\\layouts\\BasePage.tsx":"28","D:\\buni\\buni-launchpad-adminpage\\src\\layouts\\Sidebar.tsx":"29","D:\\buni\\buni-launchpad-adminpage\\src\\components\\Card.tsx":"30","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppStepProgress.tsx":"31","D:\\buni\\buni-launchpad-adminpage\\src\\themes\\index.ts":"32","D:\\buni\\buni-launchpad-adminpage\\src\\themes\\styles.ts":"33","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppTextarea.tsx":"34","D:\\buni\\buni-launchpad-adminpage\\src\\components\\UploadImage.tsx":"35","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppLink.tsx":"36","D:\\buni\\buni-launchpad-adminpage\\src\\components\\GroupListIcon.tsx":"37","D:\\buni\\buni-launchpad-adminpage\\src\\hooks\\useForceRender.ts":"38","D:\\buni\\buni-launchpad-adminpage\\src\\layouts\\Footer.tsx":"39","D:\\buni\\buni-launchpad-adminpage\\src\\layouts\\Header.tsx":"40","D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\AddMoreIcon.tsx":"41","D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\LoadingIcon.tsx":"42","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-network.ts":"43","D:\\buni\\buni-launchpad-adminpage\\src\\components\\ListMediaSocial.tsx":"44","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\common.ts":"45","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-validator.ts":"46","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppDatePicker.tsx":"47","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\RequestFactory.ts":"48","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-token.ts":"49","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\AuthorizationRequest.ts":"50","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\ProjectRequest.ts":"51","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-multicall.ts":"52","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-contract.ts":"53","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\BaseRequest.ts":"54","D:\\buni\\buni-launchpad-adminpage\\src\\abi\\index.ts":"55","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\UserRequest.ts":"56","D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\MinusMoreIcon.tsx":"57","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppDataTable.tsx":"58","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppPagination.tsx":"59","D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\NoResult.tsx":"60","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-project.ts":"61","D:\\buni\\buni-launchpad-adminpage\\src\\constants.tsx":"62","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\broacast.tsx":"63","D:\\buni\\buni-launchpad-adminpage\\src\\store\\myAccount.ts":"64","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Forbidden.tsx":"65","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\user.ts":"66","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalLogin.tsx":"67","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppChartDonut.tsx":"68","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppChartLine.tsx":"69","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\AuctionRequest.ts":"70","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\auction.ts":"71","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-farm.ts":"72","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-pools.ts":"73","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\pool.ts":"74","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\timelines.ts":"75","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-auction.ts":"76","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppSilder.tsx":"77","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalStuck.tsx":"78","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-formats.ts":"79","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\CoingeckoRequest.ts":"80","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\AdminRequest.ts":"81","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\PoolRequest.ts":"82","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppCardStatistic.tsx":"83","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\tier.ts":"84","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-pool.ts":"85","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppCKEditor.tsx":"86","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalFinalizeCompetition.tsx":"87","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-subgraph.ts":"88","D:\\buni\\buni-launchpad-adminpage\\src\\hooks\\usePool.ts":"89","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalPickWinners.tsx":"90","D:\\buni\\buni-launchpad-adminpage\\src\\store\\metadata.ts":"91","D:\\buni\\buni-launchpad-adminpage\\src\\hooks\\useMetadata.ts":"92","D:\\buni\\buni-launchpad-adminpage\\src\\components\\CopyableWalletAddress.tsx":"93","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\preSalePool.ts":"94","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserList.tsx":"95","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Auctions\\AuctionDetail.tsx":"96","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Auctions\\part\\PartAuctionChart.tsx":"97","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Auctions\\part\\PartAuctionDetail.tsx":"98","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Auctions\\part\\PartAuctionIntro.tsx":"99","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppCountDown.tsx":"100","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageDashboard.tsx":"101","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PagePermissionList.tsx":"102","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageStaking.tsx":"103","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCompetitionDetail.tsx":"104","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageLogin.tsx":"105","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageProjectList.tsx":"106","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PagePoolDetail.tsx":"107","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PagePoolList.tsx":"108","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageAuctionList.tsx":"109","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\groups\\PageCreateGroup.tsx":"110","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\groups\\PageGroupDetail.tsx":"111","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\admins\\PageAdminDetail.tsx":"112","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\admins\\PageCreateAdmin.tsx":"113","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\admins\\PageAdminList.tsx":"114","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\groups\\PageGroupList.tsx":"115","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\role\\PageRoleDetail.tsx":"116","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\role\\PageCreateRole.tsx":"117","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\role\\PageRoleList.tsx":"118","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\index.tsx":"119","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\index.tsx":"120","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateCompetition\\index.tsx":"121","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageProjectDetail\\index.tsx":"122","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\index.tsx":"123","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\index.tsx":"124","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\role\\part\\FormRole.tsx":"125","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\steps\\StepPoolReview.tsx":"126","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\steps\\StepPoolAllocationSetup.tsx":"127","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\steps\\StepPoolTokenSetup.tsx":"128","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\steps\\StepPoolInfo.tsx":"129","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepCreateAuction.tsx":"130","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepPreview.tsx":"131","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepPoolInfo.tsx":"132","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepPoolSetup.tsx":"133","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepOverview.tsx":"134","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageProjectDetail\\part\\PartViewDetail.tsx":"135","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\part\\AuctionPriceChart.tsx":"136","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\part\\PartViewDetail.tsx":"137","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\steps\\StepTokenSetup.tsx":"138","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\steps\\StepReview.tsx":"139","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateCompetition\\part\\FormCompetition.tsx":"140","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\steps\\StepAllocationSetup.tsx":"141","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\steps\\StepPoolInfo.tsx":"142","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\AuctionList.tsx":"143","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\PoolsOfAccount.tsx":"144","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\AccountInfo.tsx":"145","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\admins\\part\\FormAdmin.tsx":"146","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\groups\\part\\GroupForm.tsx":"147","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\part\\ViewDetailPoolIDO.tsx":"148","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\INOPoolItem.tsx":"149","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\IDOPoolItem.tsx":"150","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\AuctionItem.tsx":"151","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\index.tsx":"152","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\steps\\StepProjectReview.tsx":"153","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\steps\\StepProjectInfo.tsx":"154","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\steps\\StepProjectDetail.tsx":"155","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\steps\\StepTokenomic.tsx":"156","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AlertWarningIncorrectNetwork.tsx":"157","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalSettingAuction.tsx":"158","D:\\buni\\buni-lens-interface\\src\\index.tsx":"159","D:\\buni\\buni-lens-interface\\src\\App.tsx":"160","D:\\buni\\buni-lens-interface\\src\\routes.tsx":"161","D:\\buni\\buni-lens-interface\\src\\themes\\index.ts":"162","D:\\buni\\buni-lens-interface\\src\\store\\index.ts":"163","D:\\buni\\buni-lens-interface\\src\\pages\\HomePage.tsx":"164","D:\\buni\\buni-lens-interface\\src\\themes\\styles.ts":"165","D:\\buni\\buni-lens-interface\\src\\components\\AppButton.tsx":"166","D:\\buni\\buni-lens-interface\\src\\components\\AppTextarea.tsx":"167","D:\\buni\\buni-lens-interface\\src\\components\\AppInput.tsx":"168","D:\\buni\\buni-lens-interface\\src\\components\\Card.tsx":"169","D:\\buni\\buni-lens-interface\\src\\components\\AppLink.tsx":"170","D:\\buni\\buni-lens-interface\\src\\components\\AppSwitch.tsx":"171","D:\\buni\\buni-lens-interface\\src\\components\\AppSelect.tsx":"172","D:\\buni\\buni-lens-interface\\src\\hooks\\useForceRender.ts":"173","D:\\buni\\buni-lens-interface\\src\\layouts\\BasePage.tsx":"174","D:\\buni\\buni-lens-interface\\src\\layouts\\Footer.tsx":"175","D:\\buni\\buni-lens-interface\\src\\layouts\\Header.tsx":"176"},{"size":149,"mtime":1657157070774,"results":"177","hashOfConfig":"178"},{"size":835,"mtime":1660718473972,"results":"179","hashOfConfig":"178"},{"size":7021,"mtime":1662624241148,"results":"180","hashOfConfig":"178"},{"size":930,"mtime":1658807014053,"results":"181","hashOfConfig":"178"},{"size":3415,"mtime":1659688742563,"results":"182","hashOfConfig":"178"},{"size":4277,"mtime":1661766996152,"results":"183","hashOfConfig":"178"},{"size":3373,"mtime":1661767872558,"results":"184","hashOfConfig":"178"},{"size":3854,"mtime":1657157070785,"results":"185","hashOfConfig":"178"},{"size":365,"mtime":1657784528172,"results":"186","hashOfConfig":"187"},{"size":2191,"mtime":1661767872560,"results":"188","hashOfConfig":"178"},{"size":2627,"mtime":1661767872588,"results":"189","hashOfConfig":"178"},{"size":1930,"mtime":1659688742568,"results":"190","hashOfConfig":"178"},{"size":892,"mtime":1657784528181,"results":"191","hashOfConfig":"178"},{"size":3151,"mtime":1659688742565,"results":"192","hashOfConfig":"178"},{"size":2276,"mtime":1661767872564,"results":"193","hashOfConfig":"178"},{"size":597,"mtime":1657784528197,"results":"194","hashOfConfig":"187"},{"size":930,"mtime":1657784528216,"results":"195","hashOfConfig":"178"},{"size":742,"mtime":1661766996314,"results":"196","hashOfConfig":"178"},{"size":2155,"mtime":1660206319181,"results":"197","hashOfConfig":"178"},{"size":3737,"mtime":1661757802718,"results":"198","hashOfConfig":"178"},{"size":1872,"mtime":1661766996342,"results":"199","hashOfConfig":"178"},{"size":960,"mtime":1657784528195,"results":"200","hashOfConfig":"178"},{"size":1430,"mtime":1661767872568,"results":"201","hashOfConfig":"178"},{"size":3925,"mtime":1661767872555,"results":"202","hashOfConfig":"178"},{"size":8096,"mtime":1661767872561,"results":"203","hashOfConfig":"178"},{"size":231,"mtime":1657784528214,"results":"204","hashOfConfig":"178"},{"size":1251,"mtime":1659688742562,"results":"205","hashOfConfig":"178"},{"size":1424,"mtime":1661767872563,"results":"206","hashOfConfig":"178"},{"size":8832,"mtime":1661767872564,"results":"207","hashOfConfig":"178"},{"size":1312,"mtime":1658972838951,"results":"208","hashOfConfig":"178"},{"size":4065,"mtime":1661767872559,"results":"209","hashOfConfig":"178"},{"size":1234,"mtime":1659524305105,"results":"210","hashOfConfig":"178"},{"size":4157,"mtime":1661767872587,"results":"211","hashOfConfig":"178"},{"size":2316,"mtime":1658972838951,"results":"212","hashOfConfig":"178"},{"size":3644,"mtime":1658807014055,"results":"213","hashOfConfig":"178"},{"size":1033,"mtime":1661766996152,"results":"214","hashOfConfig":"178"},{"size":1299,"mtime":1661766996152,"results":"215","hashOfConfig":"178"},{"size":200,"mtime":1658807014057,"results":"216","hashOfConfig":"178"},{"size":429,"mtime":1658807014057,"results":"217","hashOfConfig":"178"},{"size":5494,"mtime":1662436755252,"results":"218","hashOfConfig":"178"},{"size":541,"mtime":1658807014046,"results":"219","hashOfConfig":"178"},{"size":566,"mtime":1658807014047,"results":"220","hashOfConfig":"178"},{"size":2237,"mtime":1661767872590,"results":"221","hashOfConfig":"178"},{"size":1819,"mtime":1658807014055,"results":"222","hashOfConfig":"178"},{"size":3219,"mtime":1661766996324,"results":"223","hashOfConfig":"178"},{"size":4456,"mtime":1662624241150,"results":"224","hashOfConfig":"178"},{"size":2366,"mtime":1661842757186,"results":"225","hashOfConfig":"178"},{"size":1032,"mtime":1661766996314,"results":"226","hashOfConfig":"178"},{"size":5077,"mtime":1661767872592,"results":"227","hashOfConfig":"178"},{"size":563,"mtime":1659695503622,"results":"228","hashOfConfig":"178"},{"size":951,"mtime":1662621797296,"results":"229","hashOfConfig":"178"},{"size":1009,"mtime":1661766996342,"results":"230","hashOfConfig":"178"},{"size":2129,"mtime":1661767872588,"results":"231","hashOfConfig":"178"},{"size":3115,"mtime":1661767872585,"results":"232","hashOfConfig":"178"},{"size":270,"mtime":1658807014045,"results":"233","hashOfConfig":"178"},{"size":1785,"mtime":1661766996314,"results":"234","hashOfConfig":"178"},{"size":476,"mtime":1658972838951,"results":"235","hashOfConfig":"178"},{"size":6268,"mtime":1662365737511,"results":"236","hashOfConfig":"178"},{"size":613,"mtime":1659692903271,"results":"237","hashOfConfig":"178"},{"size":1039,"mtime":1659688742560,"results":"238","hashOfConfig":"178"},{"size":8834,"mtime":1662621797298,"results":"239","hashOfConfig":"178"},{"size":3334,"mtime":1661767872561,"results":"240","hashOfConfig":"178"},{"size":760,"mtime":1657157070784,"results":"241","hashOfConfig":"178"},{"size":1231,"mtime":1661767872586,"results":"242","hashOfConfig":"178"},{"size":1915,"mtime":1660206319166,"results":"243","hashOfConfig":"178"},{"size":3222,"mtime":1661766996334,"results":"244","hashOfConfig":"178"},{"size":1765,"mtime":1661767872566,"results":"245","hashOfConfig":"178"},{"size":6945,"mtime":1661483789189,"results":"246","hashOfConfig":"178"},{"size":7467,"mtime":1659666781947,"results":"247","hashOfConfig":"178"},{"size":1266,"mtime":1661767872585,"results":"248","hashOfConfig":"178"},{"size":5825,"mtime":1659688459007,"results":"249","hashOfConfig":"178"},{"size":4750,"mtime":1661766996334,"results":"250","hashOfConfig":"178"},{"size":3821,"mtime":1661767872591,"results":"251","hashOfConfig":"178"},{"size":10433,"mtime":1661766996324,"results":"252","hashOfConfig":"178"},{"size":8364,"mtime":1659688742585,"results":"253","hashOfConfig":"178"},{"size":10272,"mtime":1661828248133,"results":"254","hashOfConfig":"178"},{"size":1061,"mtime":1661767872558,"results":"255","hashOfConfig":"178"},{"size":2630,"mtime":1661767872567,"results":"256","hashOfConfig":"178"},{"size":4958,"mtime":1661767872589,"results":"257","hashOfConfig":"178"},{"size":309,"mtime":1660037308224,"results":"258","hashOfConfig":"178"},{"size":2409,"mtime":1662624241146,"results":"259","hashOfConfig":"178"},{"size":1731,"mtime":1662624241147,"results":"260","hashOfConfig":"178"},{"size":1965,"mtime":1661767872556,"results":"261","hashOfConfig":"178"},{"size":746,"mtime":1661766996332,"results":"262","hashOfConfig":"178"},{"size":11413,"mtime":1662624241149,"results":"263","hashOfConfig":"178"},{"size":1653,"mtime":1661764332954,"results":"264","hashOfConfig":"178"},{"size":4835,"mtime":1661767872565,"results":"265","hashOfConfig":"178"},{"size":1100,"mtime":1661766996344,"results":"266","hashOfConfig":"178"},{"size":2566,"mtime":1661767872562,"results":"267","hashOfConfig":"178"},{"size":5486,"mtime":1661767872567,"results":"268","hashOfConfig":"178"},{"size":2686,"mtime":1661766996314,"results":"269","hashOfConfig":"178"},{"size":463,"mtime":1661766996163,"results":"270","hashOfConfig":"178"},{"size":794,"mtime":1661766996152,"results":"271","hashOfConfig":"178"},{"size":12307,"mtime":1661766996324,"results":"272","hashOfConfig":"178"},{"size":4459,"mtime":1661766996294,"results":"273","hashOfConfig":"178"},{"size":11401,"mtime":1661828248127,"results":"274","hashOfConfig":"178"},{"size":7181,"mtime":1661766996173,"results":"275","hashOfConfig":"178"},{"size":20554,"mtime":1662365737511,"results":"276","hashOfConfig":"178"},{"size":10082,"mtime":1661828248128,"results":"277","hashOfConfig":"178"},{"size":2543,"mtime":1661767872556,"results":"278","hashOfConfig":"178"},{"size":5488,"mtime":1661767872581,"results":"279","hashOfConfig":"178"},{"size":2338,"mtime":1661766996274,"results":"280","hashOfConfig":"178"},{"size":15832,"mtime":1661767872584,"results":"281","hashOfConfig":"178"},{"size":2162,"mtime":1661766996173,"results":"282","hashOfConfig":"178"},{"size":4804,"mtime":1661767872582,"results":"283","hashOfConfig":"178"},{"size":6955,"mtime":1662621797294,"results":"284","hashOfConfig":"178"},{"size":5983,"mtime":1662365737527,"results":"285","hashOfConfig":"178"},{"size":16897,"mtime":1662624241140,"results":"286","hashOfConfig":"178"},{"size":8266,"mtime":1661767872568,"results":"287","hashOfConfig":"178"},{"size":1074,"mtime":1662624241142,"results":"288","hashOfConfig":"178"},{"size":2066,"mtime":1662624241143,"results":"289","hashOfConfig":"178"},{"size":2906,"mtime":1661766996302,"results":"290","hashOfConfig":"178"},{"size":1104,"mtime":1661766996302,"results":"291","hashOfConfig":"178"},{"size":3102,"mtime":1661766996302,"results":"292","hashOfConfig":"178"},{"size":3894,"mtime":1662436755252,"results":"293","hashOfConfig":"178"},{"size":2554,"mtime":1662624241144,"results":"294","hashOfConfig":"178"},{"size":1074,"mtime":1661766996304,"results":"295","hashOfConfig":"178"},{"size":4136,"mtime":1662624241145,"results":"296","hashOfConfig":"178"},{"size":1612,"mtime":1661766996292,"results":"297","hashOfConfig":"178"},{"size":6667,"mtime":1662624241133,"results":"298","hashOfConfig":"178"},{"size":1139,"mtime":1661767872574,"results":"299","hashOfConfig":"178"},{"size":1737,"mtime":1661766996284,"results":"300","hashOfConfig":"178"},{"size":5674,"mtime":1661767872569,"results":"301","hashOfConfig":"178"},{"size":4543,"mtime":1662624241136,"results":"302","hashOfConfig":"178"},{"size":11636,"mtime":1662365737527,"results":"303","hashOfConfig":"178"},{"size":3256,"mtime":1662624241139,"results":"304","hashOfConfig":"178"},{"size":18645,"mtime":1662436755252,"results":"305","hashOfConfig":"178"},{"size":5926,"mtime":1662624241139,"results":"306","hashOfConfig":"178"},{"size":22110,"mtime":1662624241138,"results":"307","hashOfConfig":"178"},{"size":18870,"mtime":1662365737511,"results":"308","hashOfConfig":"178"},{"size":13979,"mtime":1661767872573,"results":"309","hashOfConfig":"178"},{"size":11186,"mtime":1661767872571,"results":"310","hashOfConfig":"178"},{"size":31080,"mtime":1661767872572,"results":"311","hashOfConfig":"178"},{"size":12151,"mtime":1661767872571,"results":"312","hashOfConfig":"178"},{"size":14802,"mtime":1662624241141,"results":"313","hashOfConfig":"178"},{"size":9489,"mtime":1661766996181,"results":"314","hashOfConfig":"178"},{"size":12108,"mtime":1662624241137,"results":"315","hashOfConfig":"178"},{"size":7138,"mtime":1662624241136,"results":"316","hashOfConfig":"178"},{"size":2663,"mtime":1662624241135,"results":"317","hashOfConfig":"178"},{"size":18213,"mtime":1661767872575,"results":"318","hashOfConfig":"178"},{"size":9291,"mtime":1662365737511,"results":"319","hashOfConfig":"178"},{"size":29404,"mtime":1662624241134,"results":"320","hashOfConfig":"178"},{"size":1843,"mtime":1661766996294,"results":"321","hashOfConfig":"178"},{"size":4165,"mtime":1661766996294,"results":"322","hashOfConfig":"178"},{"size":3465,"mtime":1661766996292,"results":"323","hashOfConfig":"178"},{"size":8121,"mtime":1661766996304,"results":"324","hashOfConfig":"178"},{"size":11312,"mtime":1662365737527,"results":"325","hashOfConfig":"178"},{"size":13986,"mtime":1662624241133,"results":"326","hashOfConfig":"178"},{"size":5295,"mtime":1661766996294,"results":"327","hashOfConfig":"178"},{"size":12138,"mtime":1661766996294,"results":"328","hashOfConfig":"178"},{"size":5642,"mtime":1661766996294,"results":"329","hashOfConfig":"178"},{"size":5781,"mtime":1662621797283,"results":"330","hashOfConfig":"178"},{"size":2888,"mtime":1662621797288,"results":"331","hashOfConfig":"178"},{"size":21061,"mtime":1662621797287,"results":"332","hashOfConfig":"178"},{"size":22896,"mtime":1662621797285,"results":"333","hashOfConfig":"178"},{"size":17999,"mtime":1662370970666,"results":"334","hashOfConfig":"178"},{"size":1106,"mtime":1661767872555,"results":"335","hashOfConfig":"178"},{"size":7832,"mtime":1661909833298,"results":"336","hashOfConfig":"178"},{"size":149,"mtime":1657157070774,"results":"337","hashOfConfig":"338"},{"size":753,"mtime":1662633962886,"results":"339","hashOfConfig":"338"},{"size":984,"mtime":1662629708400,"results":"340","hashOfConfig":"338"},{"size":1027,"mtime":1662632796521,"results":"341","hashOfConfig":"338"},{"size":519,"mtime":1662632781200,"results":"342","hashOfConfig":"338"},{"size":234,"mtime":1662634958307,"results":"343","hashOfConfig":"338"},{"size":4157,"mtime":1661767872587,"results":"344","hashOfConfig":"338"},{"size":4280,"mtime":1662632611851,"results":"345","hashOfConfig":"338"},{"size":2316,"mtime":1658972838951,"results":"346","hashOfConfig":"338"},{"size":3338,"mtime":1662632598220,"results":"347","hashOfConfig":"338"},{"size":1295,"mtime":1662632622496,"results":"348","hashOfConfig":"338"},{"size":1040,"mtime":1662630233388,"results":"349","hashOfConfig":"338"},{"size":930,"mtime":1658807014053,"results":"350","hashOfConfig":"338"},{"size":3415,"mtime":1659688742563,"results":"351","hashOfConfig":"338"},{"size":200,"mtime":1658807014056,"results":"352","hashOfConfig":"338"},{"size":472,"mtime":1662633847767,"results":"353","hashOfConfig":"338"},{"size":457,"mtime":1662628214490,"results":"354","hashOfConfig":"338"},{"size":213,"mtime":1662633832347,"results":"355","hashOfConfig":"338"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},"qg17e",{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"358"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"358"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"377"},"jlsip2",{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"358"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"358"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"377"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"358"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"358"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"358"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"358"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"358"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"358"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"358"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"358"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"358"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"358"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"358"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"358"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"358"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"358"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"358"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"358"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"358"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"358"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"358"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"358"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"358"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"358"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"358"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"358"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"358"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"358"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"358"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"358"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"358"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"358"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"358"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"358"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"358"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"358"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"358"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"358"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"358"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"358"},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"358"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"358"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"358"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"358"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"358"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"358"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"358"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"358"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"358"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"358"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"358"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645","usedDeprecatedRules":"358"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"358"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"358"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"358"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661","usedDeprecatedRules":"358"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"666","usedDeprecatedRules":"358"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"358"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"358"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681","usedDeprecatedRules":"358"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"358"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"358"},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"358"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"358"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"358"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"358"},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"358"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"358"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"358"},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729","usedDeprecatedRules":"358"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732","usedDeprecatedRules":"358"},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"743","usedDeprecatedRules":"358"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"358"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"358"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},"pl0kv9",{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"751"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\buni\\buni-launchpad-adminpage\\src\\index.tsx",[],[],"D:\\buni\\buni-launchpad-adminpage\\src\\App.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\routes.tsx",["786","787"],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppSwitch.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppSelect.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppButton.tsx",["788"],"import { FC, forwardRef } from 'react';\r\nimport { Button, ButtonProps } from '@chakra-ui/react';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\nimport { StyleProps } from '@chakra-ui/system';\r\n\r\ninterface AppButtonProps extends ButtonProps {\r\n  variant?:\r\n    | 'brand'\r\n    | 'darkBrand'\r\n    | 'lightBrand'\r\n    | 'light'\r\n    | 'action'\r\n    | 'setup'\r\n    | 'outline'\r\n    | 'no-effects';\r\n}\r\n\r\nconst AppButton = forwardRef<HTMLButtonElement, AppButtonProps>(\r\n  (props, ref) => {\r\n    const { variant = 'brand', children, ...rest } = props;\r\n    return (\r\n      <Button {...rest} variant={variant} ref={ref}>\r\n        {children}\r\n      </Button>\r\n    );\r\n  },\r\n);\r\n\r\nexport default AppButton;\r\n\r\nexport const appButtonStyles = {\r\n  baseStyle: {\r\n    borderRadius: '16px',\r\n    boxShadow: '45px 76px 113px 7px rgba(112, 144, 176, 0.08)',\r\n    transition: '.25s all ease',\r\n    boxSizing: 'border-box',\r\n    _focus: {\r\n      boxShadow: 'none',\r\n    },\r\n    _active: {\r\n      boxShadow: 'none',\r\n    },\r\n  },\r\n  variants: {\r\n    outline: () => ({\r\n      borderRadius: '16px',\r\n    }),\r\n    brand: (props: StyleProps) => ({\r\n      bg: mode('brand.500', 'brand.400')(props),\r\n      color: 'white',\r\n      _focus: {\r\n        bg: mode('brand.500', 'brand.400')(props),\r\n      },\r\n      _active: {\r\n        bg: mode('brand.500', 'brand.400')(props),\r\n      },\r\n      _hover: {\r\n        bg: mode('brand.600', 'brand.400')(props),\r\n        _disabled: {\r\n          bg: mode('brand.600', 'brand.400')(props),\r\n        },\r\n      },\r\n    }),\r\n    darkBrand: (props: StyleProps) => ({\r\n      bg: mode('brand.900', 'brand.400')(props),\r\n      color: 'white',\r\n      _focus: {\r\n        bg: mode('brand.900', 'brand.400')(props),\r\n      },\r\n      _active: {\r\n        bg: mode('brand.900', 'brand.400')(props),\r\n      },\r\n      _hover: {\r\n        bg: mode('brand.800', 'brand.400')(props),\r\n        _disabled: {\r\n          bg: mode('brand.800', 'brand.400')(props),\r\n        },\r\n      },\r\n    }),\r\n    lightBrand: (props: StyleProps) => ({\r\n      bg: mode('#F2EFFF', 'whiteAlpha.100')(props),\r\n      color: mode('brand.500', 'white')(props),\r\n      _focus: {\r\n        bg: mode('#F2EFFF', 'whiteAlpha.100')(props),\r\n      },\r\n      _active: {\r\n        bg: mode('secondaryGray.300', 'whiteAlpha.100')(props),\r\n      },\r\n      _hover: {\r\n        bg: mode('secondaryGray.400', 'whiteAlpha.200')(props),\r\n        _disabled: {\r\n          bg: mode('secondaryGray.400', 'whiteAlpha.200')(props),\r\n        },\r\n      },\r\n    }),\r\n    light: (props: StyleProps) => ({\r\n      bg: mode('secondaryGray.300', 'whiteAlpha.100')(props),\r\n      color: mode('secondaryGray.900', 'white')(props),\r\n      _focus: {\r\n        bg: mode('secondaryGray.300', 'whiteAlpha.100')(props),\r\n      },\r\n      _active: {\r\n        bg: mode('secondaryGray.300', 'whiteAlpha.100')(props),\r\n      },\r\n      _hover: {\r\n        bg: mode('secondaryGray.400', 'whiteAlpha.200')(props),\r\n        _disabled: {\r\n          bg: mode('secondaryGray.400', 'whiteAlpha.200')(props),\r\n        },\r\n      },\r\n    }),\r\n    action: (props: StyleProps) => ({\r\n      fontWeight: '500',\r\n      borderRadius: '50px',\r\n      bg: mode('secondaryGray.300', 'brand.400')(props),\r\n      color: mode('brand.500', 'white')(props),\r\n      _focus: {\r\n        bg: mode('secondaryGray.300', 'brand.400')(props),\r\n      },\r\n      _active: { bg: mode('secondaryGray.300', 'brand.400')(props) },\r\n      _hover: {\r\n        bg: mode('secondaryGray.200', 'brand.400')(props),\r\n        _disabled: {\r\n          bg: mode('secondaryGray.200', 'brand.400')(props),\r\n        },\r\n      },\r\n    }),\r\n    setup: (props: StyleProps) => ({\r\n      fontWeight: '500',\r\n      borderRadius: '50px',\r\n      bg: mode('transparent', 'brand.400')(props),\r\n      border: mode('1px solid', '0px solid')(props),\r\n      borderColor: mode('secondaryGray.400', 'transparent')(props),\r\n      color: mode('secondaryGray.900', 'white')(props),\r\n      _focus: {\r\n        bg: mode('transparent', 'brand.400')(props),\r\n      },\r\n      _active: { bg: mode('transparent', 'brand.400')(props) },\r\n      _hover: {\r\n        bg: mode('secondaryGray.100', 'brand.400')(props),\r\n        _disabled: {\r\n          bg: mode('secondaryGray.100', 'brand.400')(props),\r\n        },\r\n      },\r\n    }),\r\n  },\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppInput.tsx",["789"],"import { Input, InputProps, InputGroup } from '@chakra-ui/react';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\nimport { StyleProps, forwardRef } from '@chakra-ui/system';\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport { useForceRender } from 'src/hooks/useForceRender';\r\nimport CalendarIcon from 'src/assets/icons/CalendarIcon.svg';\r\nimport { ReactNode } from 'react';\r\n\r\ninterface ValidatorProps {\r\n  validator: SimpleReactValidator;\r\n  name: string;\r\n  rule: string | Array<string | { [key: string]: unknown }>;\r\n  options?: { [key: string]: unknown };\r\n}\r\n\r\ninterface AppInputProps extends InputProps {\r\n  variant?: 'main' | 'auth' | 'authSecondary' | 'search';\r\n  validate?: ValidatorProps;\r\n  readOnly?: boolean;\r\n  endAdornment?: ReactNode;\r\n}\r\n\r\nconst AppInput = forwardRef(\r\n  ({ variant = 'main', readOnly, validate, ...props }: AppInputProps, ref) => {\r\n    const forceRender = useForceRender();\r\n    const onBlur = () => {\r\n      validate?.validator.showMessageFor(validate.name);\r\n      forceRender();\r\n    };\r\n    return (\r\n      <>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            {...props}\r\n            variant={variant}\r\n            onBlur={onBlur}\r\n            ref={ref}\r\n            readOnly={readOnly}\r\n          />\r\n          {props.endAdornment}\r\n        </InputGroup>\r\n\r\n        {validate &&\r\n          !readOnly &&\r\n          validate.validator.message(\r\n            validate.name,\r\n            props.value,\r\n            validate.rule,\r\n            validate.options,\r\n          )}\r\n      </>\r\n    );\r\n  },\r\n);\r\n\r\nexport default AppInput;\r\n\r\nexport const appInputStyles = {\r\n  baseStyle: {\r\n    field: {\r\n      fontWeight: 400,\r\n      borderRadius: '8px',\r\n      '::-webkit-calendar-picker-indicator': {\r\n        width: '20px',\r\n        height: '20px',\r\n      },\r\n    },\r\n  },\r\n  variants: {\r\n    main: (props: StyleProps) => ({\r\n      field: {\r\n        bg: mode('transparent', 'navy.800')(props),\r\n        border: '1px solid',\r\n        color: mode('secondaryGray.900', 'white')(props),\r\n        borderColor: mode('secondaryGray.100', 'whiteAlpha.100')(props),\r\n        borderRadius: '16px',\r\n        fontSize: 'sm',\r\n        p: '20px',\r\n        _placeholder: {\r\n          color: mode('secondaryGray.500', 'whiteAlpha.300')(props),\r\n        },\r\n      },\r\n    }),\r\n    auth: (props: StyleProps) => ({\r\n      field: {\r\n        fontWeight: '500',\r\n        color: mode('navy.700', 'white')(props),\r\n        bg: mode('transparent', 'transparent')(props),\r\n        border: '1px solid',\r\n        borderColor: mode(\r\n          'secondaryGray.100',\r\n          'rgba(135, 140, 189, 0.3)',\r\n        )(props),\r\n        borderRadius: '16px',\r\n        _placeholder: { color: 'secondaryGray.600', fontWeight: '400' },\r\n      },\r\n    }),\r\n    authSecondary: () => ({\r\n      field: {\r\n        bg: 'transparent',\r\n        border: '1px solid',\r\n        borderColor: 'secondaryGray.100',\r\n        borderRadius: '16px',\r\n        _placeholder: { color: 'secondaryGray.600' },\r\n      },\r\n    }),\r\n    search: (props: StyleProps) => ({\r\n      field: {\r\n        bg: mode('secondaryGray.300', 'navy.900')(props),\r\n        border: 'none',\r\n        py: '11px',\r\n        borderRadius: '30px',\r\n        _placeholder: { color: 'gray.400', fontSize: '14px' },\r\n        color: mode('gray.700', 'gray.100')(props),\r\n      },\r\n    }),\r\n  },\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\storage.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppRadio.tsx",[],[],"D:\\buni\\buni-launchpad-adminpage\\src\\config\\index.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-auth.ts",["790","791"],"import axios from 'axios';\r\nimport config from 'src/config';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport _ from 'lodash';\r\nimport Storage from 'src/utils/storage';\r\nimport { JsonRpcProvider } from '@ethersproject/providers';\r\n\r\nexport const setAuthorizationToRequest = (\r\n  accessToken: string,\r\n  chainId: string,\r\n) => {\r\n  const network = _.find(\r\n    config.networks,\r\n    (network) => Number(network.chainId) === Number(chainId),\r\n  );\r\n  axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\r\n  axios.defaults.headers.common['x-app-domain'] = config.auth.domain;\r\n  axios.defaults.headers.common['x-app-network'] = network?.id || '';\r\n  axios.defaults.headers.common['x-app-version'] = 2;\r\n  axios.defaults.headers.common['x-app-message'] = config.auth.message;\r\n};\r\n\r\nexport const generateJwtToken = async (\r\n  userAddress: string,\r\n  signature: string,\r\n): Promise<string> => {\r\n  const date = new Date();\r\n  const payload = {\r\n    address: userAddress,\r\n    signature: signature,\r\n    network: Storage.getNetwork(),\r\n    signType: 'signTypedData',\r\n    iat: date.getTime() / 1000,\r\n    exp: date.getTime() / 1000 + 365 * 24 * 3600, //  temporary 1 year\r\n  };\r\n  return jwt.sign(payload, config.auth.secretKey, {\r\n    algorithm: 'HS256',\r\n  });\r\n};\r\n\r\nexport const switchNetwork = async (\r\n  network: string,\r\n  provider: JsonRpcProvider | null | undefined,\r\n) => {\r\n  if (!provider) {\r\n    throw new Error('[SwitchNetwork] throw exception: Not found provider');\r\n  }\r\n  const chainId = config.networks[network].chainId;\r\n  try {\r\n    await provider.send('wallet_switchEthereumChain', [\r\n      {\r\n        chainId: `0x${chainId.toString(16)}`,\r\n      },\r\n    ]);\r\n  } catch (error: any) {\r\n    // This error code indicates that the chain has not been added to MetaMask.\r\n    // TODO: change 4902 to constant variable\r\n    if (error.code === 4902) {\r\n      return addNewNetwork(network, provider);\r\n    }\r\n    // 4001: User rejected to switch network\r\n    return new Promise((resolve, reject) => reject(error.message));\r\n  }\r\n};\r\n\r\nconst addNewNetwork = (network: string, provider: JsonRpcProvider) => {\r\n  try {\r\n    const { chainId, name, nativeCurrency, rpcUrls, blockExplorer } =\r\n      config.networks[network];\r\n    return provider.send('wallet_addEthereumChain', [\r\n      {\r\n        chainId: `0x${chainId.toString(16)}`,\r\n        chainName: name,\r\n        nativeCurrency,\r\n        rpcUrls,\r\n        blockExplorerUrls: [blockExplorer.url],\r\n      },\r\n    ]);\r\n  } catch (error: any) {\r\n    console.error(`[AddNewNetwork] throw exception: ${error.message}`, error);\r\n    throw error;\r\n  }\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\connectors\\index.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\connectors\\MetamaskConnector.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\connectors\\BaseConnector.ts",["792"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Web3Provider } from '@ethersproject/providers';\r\nimport Storage from 'src/utils/storage';\r\nimport config from 'src/config';\r\nimport { Transaction } from '@solana/web3.js';\r\n\r\nconst domain = {\r\n  name: config.auth.domain,\r\n  version: '2',\r\n  chainId: '97',\r\n};\r\n\r\nconst types = {\r\n  message: [\r\n    { name: 'address', type: 'address' },\r\n    { name: 'message', type: 'string' },\r\n  ],\r\n};\r\n\r\nclass BaseConnector {\r\n  public options: any;\r\n  public connector: any;\r\n  public provider: any;\r\n  public account: any;\r\n  public network: any;\r\n\r\n  constructor(options: any = {}) {\r\n    this.options = options;\r\n  }\r\n\r\n  async connect() {\r\n    return;\r\n  }\r\n\r\n  getId() {\r\n    return '';\r\n  }\r\n\r\n  getName() {\r\n    return '';\r\n  }\r\n\r\n  logout(): any {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * check if provider exists\r\n   * @returns boolean\r\n   */\r\n  isLoggedIn(): boolean {\r\n    return !!this.provider;\r\n  }\r\n\r\n  /**\r\n   * get account and network of the logged in wallet\r\n   * @returns account\r\n   */\r\n  async getAccount(provider: any = this.provider): Promise<any> {\r\n    try {\r\n      const web3Provider = new Web3Provider(provider);\r\n      const network = await web3Provider.getNetwork();\r\n      const [account] = await web3Provider.listAccounts(); // listAccounts()[0]\r\n      this.network = network;\r\n      this.account = account;\r\n      return account;\r\n    } catch (error) {\r\n      throw new Error('Wallet has not been connected yet!');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * sign a signature and save token into localStorage\r\n   */\r\n  async signMessage(_payload?: any): Promise<any> {\r\n    if (this.account && this.connector && this.provider) {\r\n      try {\r\n        const message = {\r\n          address: this.account,\r\n          message: config.auth.message,\r\n        };\r\n        const signer = new Web3Provider(this.provider).getSigner();\r\n\r\n        domain.chainId = Storage.getChainId() || '97';\r\n        const signature = await signer._signTypedData(domain, types, message);\r\n        return signature;\r\n      } catch (error) {\r\n        console.error(error);\r\n        console.error('Signing message failed!');\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class SolanaConnector extends BaseConnector {\r\n  async disconnect() {\r\n    if (!this.provider) {\r\n      return;\r\n    }\r\n    return this.provider.disconnect();\r\n  }\r\n\r\n  /**\r\n   * get account and network of the logged in wallet\r\n   * @returns account\r\n   */\r\n  async getAccount(provider: any = this.provider): Promise<any> {\r\n    try {\r\n      const account = provider.publicKey.toString();\r\n      this.account = account;\r\n      return account;\r\n    } catch (error) {\r\n      throw new Error('Wallet has not been connected yet!');\r\n    }\r\n  }\r\n\r\n  async signMessage(message: any): Promise<any> {\r\n    const encodeMessage = new TextEncoder().encode(JSON.stringify(message));\r\n    return this.provider.signMessage(encodeMessage);\r\n  }\r\n\r\n  async signTransaction(transaction: Transaction) {\r\n    if (!this.provider) {\r\n      return;\r\n    }\r\n    return this.provider.signTransaction(transaction);\r\n  }\r\n}\r\n\r\nexport default BaseConnector;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\BaseModal.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalTest.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-notify.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\store\\index.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\store\\authentication.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\store\\transactions.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-helpers.ts",["793","794"],"import BigNumber from 'bignumber.js';\r\nimport { isString } from 'lodash';\r\nimport { toastWarning, toastSuccess, toastError } from 'src/utils/utils-notify';\r\nimport retry from 'async-retry';\r\n\r\nconst COMMON_ERROR_MESSAGE =\r\n  'An unexpected error occurred. Please contact the administrator for more details.';\r\n\r\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\nexport const getErrorMessage = (err: any) => {\r\n  // Init regex inside a function to reset regex (reset lastIndex)\r\n  const REGEX_GET_MESSAGE = /execution reverted:([^\"]*)/gm;\r\n  if (err.message?.includes('execution reverted:')) {\r\n    const match = REGEX_GET_MESSAGE.exec(err.message);\r\n    return match ? match[1] : COMMON_ERROR_MESSAGE;\r\n  }\r\n  if (isString(err)) {\r\n    return err;\r\n  }\r\n  if (err.message && isString(err.message)) {\r\n    return err.message;\r\n  }\r\n  return COMMON_ERROR_MESSAGE;\r\n};\r\n\r\nexport const roundNumber = (\r\n  number: number | string | BigNumber,\r\n  roundMode = BigNumber.ROUND_DOWN,\r\n  decimals = 18,\r\n) => {\r\n  const newNumber = new BigNumber(number).toFixed(\r\n    getDecimalPlaces(decimals),\r\n    roundMode,\r\n  );\r\n  return new BigNumber(newNumber).toString();\r\n};\r\n\r\nexport const getDecimalPlaces = (decimals: number) => {\r\n  return decimals > 8 ? 8 : decimals;\r\n};\r\n\r\nexport const copyToClipboard = (message: string) => {\r\n  if (!navigator.clipboard) {\r\n    return toastWarning({ message: \"Your browser doesn't support copy\" });\r\n  }\r\n  try {\r\n    navigator.clipboard.writeText(message);\r\n    toastSuccess({ message: 'Copied' });\r\n  } catch (error: any) {\r\n    toastError({ message: 'Oops. Something went wrong' });\r\n  }\r\n};\r\n\r\nexport const appRetry = async (callback: any, numberRetry = 3) => {\r\n  const blockTime = 3000; // 3s\r\n  await retry(callback, {\r\n    retries: numberRetry,\r\n    minTimeout: 2 * blockTime,\r\n    maxTimeout: 3 * blockTime,\r\n  });\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalSubmittingTx.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalViewSubmittedTx.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\index.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\hooks\\useAuth.ts",["795","796","797"],"import { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  setAddress,\r\n  setChainId,\r\n  setConnector,\r\n  clearAuth,\r\n  setLoadingWallet,\r\n  setNetwork,\r\n  setProvider,\r\n  setToken,\r\n  toggleSignatureRequiredModal,\r\n} from 'src/store/authentication';\r\nimport { clearAccount, setMyProfile } from 'src/store/myAccount';\r\nimport Storage from 'src/utils/storage';\r\nimport BaseConnector from 'src/connectors/BaseConnector';\r\nimport { AppBroadcast } from 'src/utils/broacast';\r\nimport ConnectorFactory from 'src/connectors';\r\nimport {\r\n  generateJwtToken,\r\n  setAuthorizationToRequest,\r\n} from 'src/utils/utils-auth';\r\nimport { AuthUser, UserInterface } from 'src/utils/user';\r\nimport { BaseProvider, Web3Provider } from '@ethersproject/providers';\r\nimport { useMemo } from 'react';\r\nimport { getErrorMessage } from 'src/utils/utils-helpers';\r\nimport { toastError } from '../utils/utils-notify';\r\nimport { RootState } from 'src/store';\r\nimport web3 from 'web3';\r\nimport config, { Network } from 'src/config';\r\nimport _ from 'lodash';\r\nimport RequestFactory from 'src/requests/RequestFactory';\r\nimport { ROLE } from 'src/utils/common';\r\nimport { DEFAULT_CHAINID, DEFAULT_CONNECTOR } from '../constants';\r\n\r\ntype ReturnType = {\r\n  user: UserInterface | null;\r\n  connectWallet: (connectorId: string, network: string) => Promise<void>;\r\n  disconnectWallet: () => void;\r\n  createAccessToken: (connector: BaseConnector) => Promise<void>;\r\n  saveAccessToken: (accessToken: string, networkId: string) => void;\r\n};\r\n\r\nexport const getCurrentAccount = async () => {\r\n  await ConnectorFactory.getConnector(\r\n    DEFAULT_CONNECTOR,\r\n    config.defaultNetwork,\r\n  ).connect();\r\n  const currentAccount = await ConnectorFactory.getConnector(\r\n    DEFAULT_CONNECTOR,\r\n    config.defaultNetwork,\r\n  ).getAccount();\r\n  return currentAccount;\r\n};\r\n\r\nexport const logout = () => {\r\n  Storage.logout();\r\n  window.open('/login', '_self');\r\n};\r\n\r\nexport const useAuth = (): ReturnType => {\r\n  const {\r\n    address,\r\n    provider: authProvider,\r\n    connector,\r\n    network,\r\n  } = useSelector((state: RootState) => state.authentication);\r\n\r\n  const { permissions, userType, fullName } = useSelector(\r\n    (state: RootState) => state.myAccount,\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const getUser = () => {\r\n    if (!address) {\r\n      return null;\r\n    }\r\n    const user = new AuthUser(address);\r\n    user.setNetwork(network);\r\n    authProvider && user.setProvider(new Web3Provider(authProvider));\r\n    user.setFullName(fullName || '');\r\n    user.setType(userType || ROLE.NONE);\r\n    user.setPermissions(permissions || []);\r\n    return user;\r\n  };\r\n\r\n  const createAccessToken = async (connector: BaseConnector) => {\r\n    try {\r\n      const signature = await connector.signMessage();\r\n      const newToken = await generateJwtToken(\r\n        connector.account,\r\n        signature || '',\r\n      );\r\n      await saveAccessToken(newToken, Storage.getChainId());\r\n      dispatch(toggleSignatureRequiredModal(false));\r\n    } catch (error: any) {\r\n      toastError({ message: getErrorMessage(error) });\r\n    }\r\n  };\r\n\r\n  const saveAccessToken = async (accessToken: string, chainId: string) => {\r\n    if (!accessToken) {\r\n      return;\r\n    }\r\n    setAuthorizationToRequest(accessToken, chainId);\r\n    const res = await RequestFactory.getRequest(\r\n      'AuthorizationRequest',\r\n    ).getUserProfile();\r\n    if (!res) {\r\n      return;\r\n    }\r\n    dispatch(setMyProfile(res));\r\n    Storage.setAccessToken(accessToken);\r\n    await _saveAuthentication(accessToken, chainId);\r\n  };\r\n\r\n  const _saveAuthentication = async (accessToken: string, chainId: string) => {\r\n    if (accessToken) {\r\n      await dispatch(setToken(accessToken));\r\n      setAuthorizationToRequest(accessToken, chainId);\r\n    }\r\n    const selectedNetwork: Network | undefined = _.find(\r\n      config.networks,\r\n      (network) => Number(network.chainId) === Number(chainId),\r\n    );\r\n\r\n    selectedNetwork && dispatch(setNetwork(selectedNetwork.id));\r\n    chainId && (await dispatch(setChainId(chainId)));\r\n\r\n    AppBroadcast.dispatch('LOAD_USER_INFORMATION');\r\n  };\r\n\r\n  const _onAccountsChanged = async () => {\r\n    console.log('onAccountChanged');\r\n    const connectorId = Storage.getConnectorId() || '';\r\n    const network = Storage.getNetwork();\r\n    const connector = ConnectorFactory.getConnector(connectorId, network);\r\n    if (!connector) {\r\n      console.warn(\r\n        '[onAccountedChange] throw warning: Not found connector',\r\n        'connectorId:',\r\n        connectorId,\r\n        'network:',\r\n        network,\r\n      );\r\n      return;\r\n    }\r\n    // get new provider, then get new account\r\n    const provider = await connector.connect();\r\n    if (!provider) {\r\n      throw new Error('Not found provider');\r\n    }\r\n    Storage.clearAuthentication();\r\n    // Storage.clearAuction();\r\n    await _onConnectWallet(connector, provider);\r\n  };\r\n\r\n  const _onChainChanged = (hexChainId: string) => {\r\n    console.log('onChainChanged');\r\n    const chainId = web3.utils.hexToNumber(hexChainId);\r\n    const selectedNetwork: Network | undefined = _.find(\r\n      config.networks,\r\n      (network) => Number(network.chainId) === Number(chainId),\r\n    );\r\n\r\n    selectedNetwork && dispatch(setNetwork(selectedNetwork.id));\r\n    selectedNetwork && dispatch(setChainId(selectedNetwork.chainId));\r\n\r\n    if (Storage.getAddress()) {\r\n      // check user login\r\n      AppBroadcast.dispatch('LOAD_USER_NATIVE_BALANCE');\r\n    }\r\n    dispatch(toggleSignatureRequiredModal(true));\r\n  };\r\n\r\n  const _onSaveProvider = (provider: BaseProvider) => {\r\n    dispatch(setProvider(provider));\r\n    if (provider.removeAllListeners) {\r\n      provider.removeAllListeners();\r\n    }\r\n    if (!provider.on) {\r\n      return;\r\n    }\r\n    provider.on('chainChanged', async (chainId: string) => {\r\n      _onChainChanged(chainId);\r\n    });\r\n    provider.on('accountsChanged', async () => {\r\n      await _onAccountsChanged();\r\n    });\r\n  };\r\n\r\n  const _onConnectWallet = async (\r\n    connector: BaseConnector,\r\n    provider: BaseProvider,\r\n  ) => {\r\n    const storageAccount = Storage.getAddress(); // NOTE: get before getBasicUserInfo because getBasicUserInfo saves new address to localStorage\r\n    const accessToken = Storage.getAccessToken();\r\n\r\n    const account = await connector.getAccount(provider);\r\n    if (!account) {\r\n      throw new Error('Not found connected account from provider');\r\n    }\r\n    dispatch(setAddress(account));\r\n    _onSaveProvider(provider);\r\n    if (account !== storageAccount || !accessToken) {\r\n      // if hasn't have access token or account has changed\r\n      return dispatch(toggleSignatureRequiredModal(true));\r\n    }\r\n    // save to redux\r\n    const chainId = connector.network.chainId;\r\n    await saveAccessToken(accessToken, chainId);\r\n    // _saveAuthentication(accessToken, chainId);\r\n  };\r\n\r\n  const connectWallet = async (connectorId: string, network: string) => {\r\n    const connector = ConnectorFactory.getConnector(connectorId, network);\r\n    if (!connector) {\r\n      return;\r\n    }\r\n    dispatch(setLoadingWallet(true));\r\n    try {\r\n      const provider = await connector.connect();\r\n      if (!provider) {\r\n        throw new Error('No provider was found');\r\n      }\r\n\r\n      dispatch(setConnector(connector));\r\n      await _onConnectWallet(connector, provider);\r\n    } catch (error: any) {\r\n      disconnectWallet();\r\n      console.error(`[ConnectWallet] throw exception: ${error.message}`, error);\r\n      throw error;\r\n    } finally {\r\n      dispatch(setLoadingWallet(false));\r\n    }\r\n  };\r\n\r\n  const _onDisconnectWallet = () => {\r\n    dispatch(clearAuth());\r\n    dispatch(clearAccount());\r\n    Storage.logout();\r\n  };\r\n\r\n  const disconnectWallet = () => {\r\n    if (connector && connector.isLoggedIn()) {\r\n      connector.logout();\r\n    }\r\n    _onDisconnectWallet();\r\n  };\r\n\r\n  const user = useMemo(\r\n    () => getUser(),\r\n    [address, network, authProvider, authProvider, permissions, fullName],\r\n  );\r\n\r\n  return {\r\n    user,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    createAccessToken,\r\n    saveAccessToken,\r\n  };\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\service.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppSearch.tsx",["798","799"],"import { SearchIcon } from '@chakra-ui/icons';\r\nimport {\r\n  IconButton,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  InputProps,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { FC, HTMLProps } from 'react';\r\nimport 'src/styles/components/AppSearch.scss';\r\n\r\ninterface AppSearchProps extends InputProps {\r\n  className?: string;\r\n  placeholder?: string;\r\n  handleChange?: any;\r\n}\r\n\r\nconst AppSearch: FC<AppSearchProps> = ({\r\n  className = '',\r\n  placeholder,\r\n  value,\r\n  handleChange,\r\n  ...props\r\n}: AppSearchProps) => {\r\n  const searchIconColor = useColorModeValue('gray.700', 'white');\r\n  return (\r\n    <InputGroup className={`searchWrapper ${className}`}>\r\n      <InputLeftElement\r\n        className=\"leftIconWrapper\"\r\n        children={\r\n          <IconButton\r\n            className=\"searchButton\"\r\n            aria-label=\"search-icon\"\r\n            icon={<SearchIcon color={searchIconColor} className=\"searchIcon\" />}\r\n          />\r\n        }\r\n      />\r\n      <Input\r\n        className=\"searchInput\"\r\n        variant=\"search\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        placeholder={placeholder ? placeholder : 'Search'}\r\n        {...props}\r\n      />\r\n    </InputGroup>\r\n  );\r\n};\r\n\r\nexport default AppSearch;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\layouts\\BasePage.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\layouts\\Sidebar.tsx",["800","801"],"import { FC, ReactNode, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerOverlay,\r\n  Button,\r\n  Flex,\r\n} from '@chakra-ui/react';\r\nimport { useLocation, useHistory, Link } from 'react-router-dom';\r\nimport {\r\n  SettingIcon,\r\n  StakingIcon,\r\n  OperationIcon,\r\n  AuthIcon,\r\n  LogoIcon,\r\n  ArrowDownIcon,\r\n} from 'src/assets/icons';\r\nimport Card from 'src/components/Card';\r\nimport 'src/styles/layouts/Sidebar.scss';\r\nimport { CloseIcon } from '@chakra-ui/icons';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport config from 'src/config';\r\n\r\ninterface ISubMenu {\r\n  name: string;\r\n  link: string;\r\n  permission?: string[];\r\n}\r\n\r\ninterface IMenu {\r\n  name: string;\r\n  icon?: ReactNode;\r\n  subMenu?: ISubMenu[];\r\n  link?: string;\r\n}\r\n\r\ninterface IMenuSetting {\r\n  name: string;\r\n  subMenu: ISubMenu[];\r\n}\r\n\r\ninterface ICardSidebar {\r\n  openMenuSetting: boolean;\r\n  setOpenMenuSetting: any;\r\n}\r\n\r\nexport const menus: IMenu[] = [\r\n  {\r\n    name: 'Dashboard',\r\n    icon: <StakingIcon />,\r\n    link: '/dashboard',\r\n  },\r\n  {\r\n    name: 'User Management',\r\n    icon: <AuthIcon />,\r\n    subMenu: [\r\n      {\r\n        name: 'Users',\r\n        link: '/users',\r\n        permission: config.permissions.users.VIEW_USER_LIST,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'Operation',\r\n    icon: <OperationIcon />,\r\n    subMenu: [\r\n      {\r\n        name: 'Projects',\r\n        link: '/projects',\r\n        permission: config.permissions.projects.VIEW_PROJECT_LIST,\r\n      },\r\n      {\r\n        name: 'Pools',\r\n        link: '/pools',\r\n        permission: config.permissions.pools.VIEW_POOL_LIST,\r\n      },\r\n      {\r\n        name: 'Auctions',\r\n        link: '/auctions',\r\n      },\r\n      {\r\n        name: 'Staking',\r\n        link: '/staking',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport const menuSettings: IMenuSetting[] = [\r\n  {\r\n    name: 'Admin Management',\r\n    subMenu: [\r\n      {\r\n        name: 'Admins',\r\n        link: '/admins',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'IAM',\r\n    subMenu: [\r\n      {\r\n        name: 'Groups',\r\n        link: '/groups',\r\n      },\r\n      {\r\n        name: 'Roles',\r\n        link: '/roles',\r\n      },\r\n      {\r\n        name: 'Permissions',\r\n        link: '/permissions',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\ninterface ISidebar {\r\n  openMenuSetting: boolean;\r\n  openSideBar: boolean;\r\n  setOpenMenuSetting: any;\r\n  onCloseSideBar: () => void;\r\n}\r\n\r\nexport const Sidebar: FC<ISidebar> = ({\r\n  openMenuSetting,\r\n  setOpenMenuSetting,\r\n  openSideBar,\r\n  onCloseSideBar,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Box className={`sidebar ${openMenuSetting ? 'open-setting' : ''}`}>\r\n        <Box className=\"sidebar-paper\">\r\n          <CardSidebar\r\n            openMenuSetting={openMenuSetting}\r\n            setOpenMenuSetting={setOpenMenuSetting}\r\n          />\r\n        </Box>\r\n      </Box>\r\n      <Drawer placement={'left'} onClose={onCloseSideBar} isOpen={openSideBar}>\r\n        <DrawerOverlay />\r\n        <DrawerContent\r\n          background={'transparent'}\r\n          boxShadow={'none'}\r\n          padding={'20px'}\r\n        >\r\n          <Button\r\n            __css={{\r\n              display: 'flex',\r\n              position: 'absolute',\r\n              right: '0',\r\n              top: '0',\r\n              margin: '20px',\r\n              padding: '20px',\r\n            }}\r\n            onClick={onCloseSideBar}\r\n          >\r\n            <CloseIcon />\r\n          </Button>\r\n          <CardSidebar\r\n            openMenuSetting={openMenuSetting}\r\n            setOpenMenuSetting={setOpenMenuSetting}\r\n          />\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nconst MenuItem: FC<IMenu> = ({ name, icon, subMenu, link }) => {\r\n  const [isExpanded, setIsExpanded] = useState<boolean>(true);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const { user } = useAuth();\r\n\r\n  const activeSubMenu = (link: string) => {\r\n    if (location.pathname.includes('competition')) {\r\n      return link.includes('staking');\r\n    }\r\n\r\n    return (\r\n      location.pathname.includes(link) ||\r\n      location.pathname.includes(link.replace('s', ''))\r\n    );\r\n  };\r\n\r\n  const activeMenu = (subMenu: ISubMenu[]) => {\r\n    if (location.pathname.includes('competition')) {\r\n      return subMenu.find((item: ISubMenu) => item.link.includes('staking'));\r\n    }\r\n\r\n    return subMenu.find(\r\n      (item: ISubMenu) =>\r\n        location.pathname.includes(item.link) ||\r\n        location.pathname.includes(item.link.replace('s', '')),\r\n    );\r\n  };\r\n\r\n  const handleClickMenu = () => {\r\n    if (subMenu) {\r\n      return setIsExpanded(!isExpanded);\r\n    }\r\n    return link && history.push(link);\r\n  };\r\n\r\n  return (\r\n    <Box className=\"menu-item\">\r\n      <div onClick={handleClickMenu} className=\"menu-name\">\r\n        <Box className={`name ${activeMenu(subMenu || []) ? 'active' : ''}`}>\r\n          {icon} {name}\r\n        </Box>\r\n        {subMenu && (\r\n          <ArrowDownIcon\r\n            style={{ transform: isExpanded ? 'inherit' : 'rotate(270deg)' }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className={`list-sub-menu ${isExpanded ? 'show' : 'hide'}`}>\r\n        {subMenu?.map((item: ISubMenu) => {\r\n          return (\r\n            user?.havePermissions(item.permission) && (\r\n              <Link to={item.link} key={item.link}>\r\n                <div\r\n                  className={`sub-menu ${\r\n                    activeSubMenu(item.link) ? 'active' : ''\r\n                  }`}\r\n                >\r\n                  {item.name}\r\n                </div>\r\n              </Link>\r\n            )\r\n          );\r\n        })}\r\n      </div>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst CardSidebar: FC<ICardSidebar> = ({\r\n  openMenuSetting,\r\n  setOpenMenuSetting,\r\n}) => {\r\n  const location = useLocation();\r\n  const { user } = useAuth();\r\n\r\n  const activeSubMenu = (link: string) => {\r\n    return (\r\n      location.pathname.includes(link) ||\r\n      location.pathname.includes(link.replace('s', ''))\r\n    );\r\n  };\r\n\r\n  const _renderListSetting = () => {\r\n    return (\r\n      <>\r\n        {menuSettings.map((item: IMenuSetting, index) => {\r\n          return (\r\n            <Box key={index}>\r\n              <Box className=\"name\">{item.name}</Box>\r\n              <Box>\r\n                {item.subMenu.map((subItem: ISubMenu) => {\r\n                  return (\r\n                    <Link\r\n                      to={subItem.link}\r\n                      key={subItem.link}\r\n                      className=\"link-setting\"\r\n                    >\r\n                      <div\r\n                        className={`sub-menu ${\r\n                          activeSubMenu(subItem.link) ? 'active' : ''\r\n                        }`}\r\n                      >\r\n                        {subItem.name}\r\n                      </div>\r\n                    </Link>\r\n                  );\r\n                })}\r\n              </Box>\r\n            </Box>\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const _renderMenuGeneralSettingsDesktop = () => {\r\n    if (openMenuSetting && !isMobile && user?.isSupperAdmin()) {\r\n      return <Box className=\"sidebar-setting\">{_renderListSetting()}</Box>;\r\n    }\r\n\r\n    return <> </>;\r\n  };\r\n\r\n  const _renderMenuGeneralSettings = () => {\r\n    if (!user?.isSupperAdmin()) return <></>;\r\n\r\n    return (\r\n      <Box className=\"menu-setting\">\r\n        <Box\r\n          className={`name ${openMenuSetting ? 'active' : ''}`}\r\n          onClick={() => {\r\n            setOpenMenuSetting(!openMenuSetting);\r\n          }}\r\n        >\r\n          <Flex className=\"title\">\r\n            <SettingIcon /> General Settings{' '}\r\n          </Flex>\r\n          {isMobile && (\r\n            <ArrowDownIcon\r\n              style={{\r\n                transform: openMenuSetting ? 'inherit' : 'rotate(270deg)',\r\n              }}\r\n            />\r\n          )}\r\n        </Box>\r\n\r\n        {openMenuSetting && isMobile && (\r\n          <Box className=\"menu-setting-mobile\">{_renderListSetting()}</Box>\r\n        )}\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className=\"card-sidebar\"\r\n      px={0}\r\n      flexDirection=\"row\"\r\n      borderRadius={isMobile ? '20px' : 0}\r\n    >\r\n      <Box>\r\n        <Box className=\"sidebar-header\">\r\n          <Link to={'/'} className=\"link-brand\">\r\n            <LogoIcon />\r\n          </Link>\r\n        </Box>\r\n        <Box className=\"sidebar-body\" px={'20px'} pt=\"16px\">\r\n          {menus.map((menu: IMenu, index: number) => {\r\n            return (\r\n              <MenuItem\r\n                name={menu.name}\r\n                icon={menu.icon}\r\n                subMenu={menu.subMenu}\r\n                key={index}\r\n                link={menu.link}\r\n              />\r\n            );\r\n          })}\r\n          {_renderMenuGeneralSettings()}\r\n        </Box>\r\n      </Box>\r\n      {_renderMenuGeneralSettingsDesktop()}\r\n    </Card>\r\n  );\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\components\\Card.tsx",["802"],"import { Box, BoxProps, forwardRef, useStyleConfig } from '@chakra-ui/react';\r\nimport { mode } from '@chakra-ui/theme-tools';\r\nimport { StyleProps } from '@chakra-ui/system';\r\n\r\ninterface CardProps extends BoxProps {\r\n  variant?: 'main' | 'sub';\r\n}\r\n\r\nconst Card = forwardRef<CardProps, 'div'>(\r\n  ({ variant = 'main', children, ...props }, ref) => {\r\n    const styles = useStyleConfig('Card', { variant });\r\n    return (\r\n      <Box __css={styles} variant={variant} ref={ref} {...props}>\r\n        {children}\r\n      </Box>\r\n    );\r\n  },\r\n);\r\n\r\nexport const cardStyles = {\r\n  baseStyle: (props: StyleProps) => ({\r\n    p: '20px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    width: '100%',\r\n    position: 'relative',\r\n    borderRadius: '20px',\r\n    minWidth: '0px',\r\n    wordWrap: 'break-word',\r\n    backgroundClip: 'border-box',\r\n  }),\r\n  variants: {\r\n    main: (props: StyleProps) => ({\r\n      bg: mode('#ffffff', 'navy.800')(props),\r\n      boxShadow: mode(\r\n        'rgba(112, 144, 176, 0.08) 14px 4px 40px 4px',\r\n        'unset',\r\n      )(props),\r\n    }),\r\n    sub: (props: StyleProps) => ({\r\n      bg: mode('#ffffff', 'navy.700')(props),\r\n      boxShadow: mode(\r\n        'rgba(112, 144, 176, 0.14) 14px 4px 40px 4px',\r\n        'unset',\r\n      )(props),\r\n    }),\r\n  },\r\n};\r\n\r\nexport default Card;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppStepProgress.tsx",["803","804"],"import { Box, Flex, Heading, Stack, useColorModeValue } from '@chakra-ui/react';\r\nimport { FC, ReactNode } from 'react';\r\nimport { BackIcon } from 'src/assets/icons';\r\nimport AppButton from 'src/components/AppButton';\r\nimport 'src/styles/components/AppStepProgress.scss';\r\nimport Card from './Card';\r\nimport { CheckIcon } from '@chakra-ui/icons';\r\n\r\nexport enum STEPS {\r\n  STEP1,\r\n  STEP2,\r\n  STEP3,\r\n  STEP4,\r\n  STEP5,\r\n}\r\n\r\ninterface IStep {\r\n  step: number;\r\n  label: string;\r\n  component: ReactNode;\r\n}\r\n\r\ninterface AppStepProgressProps {\r\n  steps: IStep[];\r\n  stepActive: STEPS;\r\n  backTitle?: string;\r\n  title?: string;\r\n  onBack?: () => void;\r\n  onNext?: () => void;\r\n  onPrev?: () => void;\r\n  onSubmit?: () => void;\r\n  backgroundIntro?: ReactNode;\r\n  isSuccess?: boolean;\r\n}\r\n\r\nconst Progress: FC<Partial<AppStepProgressProps>> = ({\r\n  stepActive = 0,\r\n  steps,\r\n  isSuccess,\r\n}) => {\r\n  return (\r\n    <Box className=\"steps\">\r\n      {steps && steps.length\r\n        ? steps.map((step: IStep, index) => (\r\n            <div\r\n              key={index}\r\n              className={`step-item \r\n              ${step.step === stepActive && !isSuccess ? 'happening' : ''}\r\n              ${step.step < stepActive || isSuccess ? 'done' : ''}`}\r\n            >\r\n              <div className=\"icon\">\r\n                {(step.step < stepActive || isSuccess) && (\r\n                  <CheckIcon mt={1} color={'white'} />\r\n                )}\r\n              </div>\r\n              <div className=\"label\">{step.label}</div>\r\n            </div>\r\n          ))\r\n        : null}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst AppStepProgress: FC<AppStepProgressProps> = ({\r\n  steps,\r\n  stepActive,\r\n  backTitle,\r\n  title,\r\n  onBack,\r\n  onNext,\r\n  onPrev,\r\n  onSubmit,\r\n  backgroundIntro,\r\n  isSuccess,\r\n}) => {\r\n  const _renderCurrentStep = () => {\r\n    const step = steps.find((item: IStep) => item.step === stepActive);\r\n\r\n    return step ? (\r\n      <div>\r\n        {step.component}\r\n        <Flex className=\"buttonWrapper\">\r\n          {stepActive >= 1 ? (\r\n            <AppButton className=\"stepButton\" onClick={onPrev}>\r\n              Back\r\n            </AppButton>\r\n          ) : null}\r\n          {stepActive < steps.length - 1 ? (\r\n            <AppButton className=\"stepButton\" onClick={onNext}>\r\n              Next\r\n            </AppButton>\r\n          ) : (\r\n            <AppButton className=\"stepButton\" onClick={onSubmit}>\r\n              Submit\r\n            </AppButton>\r\n          )}\r\n        </Flex>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Card className=\"header-step\" mb={6} pb={28} pt={10}>\r\n        {backgroundIntro && (\r\n          <Box position={'absolute'} w={'full'} h={'full'} top={0} left={0}>\r\n            {backgroundIntro}\r\n          </Box>\r\n        )}\r\n        {backTitle && (\r\n          <Box\r\n            position={'relative'}\r\n            zIndex={2}\r\n            className=\"previousPageButtonWrapper\"\r\n          >\r\n            {onBack && (\r\n              <AppButton\r\n                className=\"previousPageButton\"\r\n                variant={'no-effects'}\r\n                onClick={onBack}\r\n              >\r\n                <BackIcon />\r\n              </AppButton>\r\n            )}\r\n            {backTitle}\r\n          </Box>\r\n        )}\r\n\r\n        <Stack\r\n          position={'relative'}\r\n          zIndex={2}\r\n          spacing={10}\r\n          justifyContent={'center'}\r\n          flexGrow={1}\r\n        >\r\n          <Heading\r\n            as={'h1'}\r\n            textAlign={'center'}\r\n            opacity={backgroundIntro ? 0 : 1}\r\n          >\r\n            {title}\r\n          </Heading>\r\n          <Progress\r\n            steps={steps}\r\n            stepActive={stepActive}\r\n            isSuccess={isSuccess}\r\n          />\r\n        </Stack>\r\n      </Card>\r\n      <Box\r\n        marginX={'auto'}\r\n        maxW={'850px'}\r\n        marginTop={'-10vh'}\r\n        position={'relative'}\r\n        zIndex={2}\r\n      >\r\n        {steps.find((item: IStep) => item.step === stepActive)?.component}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AppStepProgress;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\themes\\index.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\themes\\styles.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppTextarea.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\UploadImage.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppLink.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\GroupListIcon.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\hooks\\useForceRender.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\layouts\\Footer.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\layouts\\Header.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\AddMoreIcon.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\LoadingIcon.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-network.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\ListMediaSocial.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\common.ts",["805","806","807"],"import { ImageListType } from 'react-images-uploading';\r\n\r\nexport interface ISocialLink {\r\n  websiteUrl?: string;\r\n  facebookUrl?: string;\r\n  telegramUrl?: string;\r\n  twitterUrl?: string;\r\n  discordUrl?: string;\r\n  mediumUrl?: string;\r\n}\r\n\r\nexport interface IAdvisor {\r\n  fullName: string;\r\n  intro?: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface IBacker {\r\n  name: string;\r\n  logoUrl: string;\r\n}\r\n\r\nexport interface ITeam {\r\n  fullName: string;\r\n  position: string;\r\n  intro?: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface IRoadmap {\r\n  title: string;\r\n  description?: string;\r\n  startTime: Date;\r\n  endTime: Date;\r\n}\r\n\r\nexport interface IKeyMetric {\r\n  ticker?: string;\r\n  totalSupply?: number;\r\n  valuation?: number;\r\n  publicRaise?: number;\r\n  initialMarketCap?: number;\r\n}\r\n\r\nexport interface IScheduleTokenomic {\r\n  [k: string]: number;\r\n}\r\n\r\nexport interface ITokenomic {\r\n  title: string;\r\n  description?: string;\r\n  price: number;\r\n  totalAllocation: number;\r\n  schedules?: IScheduleTokenomic;\r\n}\r\n\r\nexport type UploadImageType = {\r\n  [k: string]: ImageListType[];\r\n};\r\n\r\nexport type PoolStatusType = {\r\n  TOKEN_SALE: 1;\r\n  WHITELIST: 2;\r\n  UPCOMING: 3;\r\n  CLAIMABLE: 4;\r\n  ENDED: 5;\r\n};\r\n\r\nexport interface IResponseDocsRequest<T> {\r\n  totalDocs?: number;\r\n  totalPages?: number;\r\n  page?: number;\r\n  limit?: number;\r\n  docs?: T[];\r\n}\r\n\r\nexport enum PoolStatusEnum {\r\n  TOKEN_SALE = 1,\r\n  WHITELIST = 2,\r\n  UPCOMING = 3,\r\n  CLAIMABLE = 4,\r\n  ENDED = 5,\r\n}\r\n\r\nexport const NOT_AVAILABLE_TEXT = '--';\r\nexport interface IMetadata {\r\n  name: string;\r\n  symbol: string;\r\n  decimals: number;\r\n}\r\n\r\nexport type PermissionParamType = {\r\n  page?: number;\r\n  limit?: number;\r\n  serviceName?: string;\r\n  permissionName?: string;\r\n};\r\n\r\nexport enum ROLE {\r\n  NONE = 0,\r\n  MEMBER = 1,\r\n  SUPPER_ADMIN = 2,\r\n}\r\n\r\nexport interface IUsersResponse {\r\n  addressCountry?: string;\r\n  email?: string;\r\n  kycStatus?: string;\r\n  nationalIssuingCountry?: string;\r\n  userAddress: string;\r\n  userName: string;\r\n}\r\n\r\nexport enum TierEnum {\r\n  NONE = 'NONE',\r\n  TIER0 = 'TIER0',\r\n  TIER1 = 'TIER1',\r\n  TIER2 = 'TIER1',\r\n  TIER3 = 'TIER3',\r\n  TIER_GAMER = 'TIER_GAMER',\r\n  TIER_TOP = 'TIER_TOP',\r\n}\r\n\r\nexport interface ITierInfo {\r\n  id: string;\r\n  configId: number;\r\n  tier: TierEnum;\r\n  stakeValue: string;\r\n  level: number;\r\n  guaranteedAllow: string;\r\n  lotteryTicket: string;\r\n  text: string;\r\n  active: true;\r\n  icon: string;\r\n  requirement: string;\r\n  method: string;\r\n  maxAllocation: string;\r\n  withdrawDelay: string;\r\n  exclusivePools: boolean;\r\n}\r\nexport interface ILinkedAccount {\r\n  userAddress: string;\r\n  networkFamily: string;\r\n  networkAddress: string;\r\n}\r\n\r\nexport interface IStakingTokens {\r\n  poolAddress: string;\r\n  stakingTokenAddress: string;\r\n  stakedAmount: string;\r\n  rate: number;\r\n  stakingTokenName: string;\r\n}\r\n\r\nexport interface IUserProfileResponse {\r\n  addressCountry?: string;\r\n  amountStaked?: any;\r\n  buniToNextTier?: any;\r\n  email?: string;\r\n  gamerElo?: any;\r\n  kycStatus?: string;\r\n  linkedAccounts?: ILinkedAccount[] | [];\r\n  rank?: string;\r\n  nationalIssuingCountry?: string;\r\n  stakingTokens?: IStakingTokens[] | [];\r\n  tier?: string;\r\n  userAddress?: string;\r\n  userName?: string;\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-validator.ts",["808","809","810","811","812","813","814"],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppDatePicker.tsx",["815","816","817"],"import { InputGroup, InputRightElement } from '@chakra-ui/react';\r\nimport React, { FC, forwardRef, Ref } from 'react';\r\nimport ReactDatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\nimport { CalendarIcon } from 'src/assets/icons';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport AppInput from 'src/components/AppInput';\r\nimport { useForceRender } from 'src/hooks/useForceRender';\r\nimport SimpleReactValidator from 'simple-react-validator';\r\n\r\nenum SizePickerEnum {\r\n  MEDIUM = 'medium',\r\n  LARGE = 'large',\r\n}\r\n\r\ninterface AppDatePicketProps extends ReactDatePickerProps {\r\n  size?: SizePickerEnum;\r\n  placeholder?: string;\r\n  readOnly?: boolean;\r\n  validate?: ValidatorProps;\r\n}\r\n\r\ninterface ValidatorProps {\r\n  validator: SimpleReactValidator;\r\n  name: string;\r\n  rule: string | Array<string | { [key: string]: unknown }>;\r\n  options?: { [key: string]: unknown };\r\n}\r\n\r\nconst AppDatePicker: FC<AppDatePicketProps> = ({\r\n  size = SizePickerEnum.LARGE,\r\n  placeholder,\r\n  validate,\r\n  readOnly,\r\n  ...props\r\n}) => {\r\n  const forceRender = useForceRender();\r\n  const onBlur = () => {\r\n    validate?.validator.showMessageFor(validate.name);\r\n    forceRender();\r\n  };\r\n\r\n  const getValidateMessage = () => {\r\n    if (!validate || readOnly) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      validate &&\r\n      validate.validator.message(\r\n        validate.name,\r\n        props.selected,\r\n        validate.rule,\r\n        validate.options,\r\n      )\r\n    );\r\n  };\r\n\r\n  const PicketInput = forwardRef(\r\n    ({ value, onClick }: any, ref: Ref<HTMLInputElement>) => {\r\n      return (\r\n        <>\r\n          <InputGroup>\r\n            <AppInput\r\n              type=\"text\"\r\n              value={value}\r\n              onClick={onClick}\r\n              ref={ref}\r\n              readOnly\r\n              placeholder={'Select time'}\r\n            />\r\n            <InputRightElement\r\n              zIndex={0}\r\n              p={3}\r\n              pointerEvents=\"none\"\r\n              children={<CalendarIcon />}\r\n              onClick={onClick}\r\n            />\r\n          </InputGroup>\r\n\r\n          {getValidateMessage()}\r\n        </>\r\n      );\r\n    },\r\n  );\r\n\r\n  return (\r\n    <ReactDatePicker\r\n      {...props}\r\n      readOnly={readOnly}\r\n      customInput={<PicketInput />}\r\n      onCalendarClose={onBlur}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AppDatePicker;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\RequestFactory.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-token.ts",["818","819","820"],"import BigNumber from 'bignumber.js';\r\nimport { multicall } from './utils-multicall';\r\nimport abi from 'src/abi';\r\nimport { erc20Contract } from './utils-contract';\r\nimport { getNetworkProvider } from 'src/utils/utils-network';\r\nimport { isAddress } from 'ethers/lib/utils';\r\nimport { MaxUint256 } from '@ethersproject/constants';\r\nimport config from 'src/config';\r\n\r\nexport type TokenType = {\r\n  decimals: number;\r\n  symbol: string;\r\n  name: string;\r\n  address: string;\r\n};\r\n\r\nexport const getTokenInfo = async (\r\n  contractAddress: string,\r\n  network: string,\r\n) => {\r\n  try {\r\n    const calls = [\r\n      {\r\n        address: contractAddress,\r\n        name: 'symbol',\r\n        params: [],\r\n      },\r\n      {\r\n        address: contractAddress,\r\n        name: 'decimals',\r\n        params: [],\r\n      },\r\n      {\r\n        address: contractAddress,\r\n        name: 'name',\r\n        params: [],\r\n      },\r\n      {\r\n        address: contractAddress,\r\n        name: 'totalSupply',\r\n        params: [],\r\n      },\r\n    ].filter(Boolean);\r\n\r\n    const [[symbol], decimals, [name], totalSupply] = await multicall(\r\n      abi['Erc20'],\r\n      calls,\r\n      network,\r\n    );\r\n\r\n    return {\r\n      symbol,\r\n      name,\r\n      decimals: Number(decimals),\r\n      contractAddress,\r\n      totalSupply: totalSupply.toString(),\r\n    };\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getTokenNFTInfo = async (\r\n  contractAddress: string,\r\n  network: string,\r\n) => {\r\n  try {\r\n    const calls = [\r\n      {\r\n        address: contractAddress,\r\n        name: 'symbol',\r\n        params: [],\r\n      },\r\n      {\r\n        address: contractAddress,\r\n        name: 'name',\r\n        params: [],\r\n      },\r\n    ].filter(Boolean);\r\n\r\n    const [[symbol], [name]] = await multicall(abi['ERC721'], calls, network);\r\n\r\n    return {\r\n      symbol,\r\n      name,\r\n      contractAddress,\r\n    };\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getAllowance = async (\r\n  network: string,\r\n  contractAddress: string,\r\n  userAddress: string,\r\n  spenderAddress: string,\r\n) => {\r\n  if (\r\n    !isAddress(contractAddress) ||\r\n    !isAddress(userAddress) ||\r\n    !isAddress(spenderAddress)\r\n  ) {\r\n    return null;\r\n  }\r\n  const provider = getNetworkProvider(network);\r\n  const contract = erc20Contract(contractAddress, provider);\r\n  const allowance = await contract.allowance(userAddress, spenderAddress);\r\n  return allowance.toString();\r\n};\r\n\r\nexport const makeApproveParams = (\r\n  tokenContractAddress: string,\r\n  spenderAddress: string,\r\n) => {\r\n  return [\r\n    abi['Erc20'],\r\n    tokenContractAddress,\r\n    'approve',\r\n    [spenderAddress, MaxUint256.toString()],\r\n    {},\r\n  ];\r\n};\r\n\r\nexport const getTokenBalance = async (\r\n  network: string,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n) => {\r\n  const contract = erc20Contract(tokenAddress, getNetworkProvider(network));\r\n  const balance = await contract.balanceOf(userAddress);\r\n  return balance.toString();\r\n};\r\n\r\nexport const getToken = (network: string, addressToken: string): any => {\r\n  const currenciesByNetwork = config.networks[network]?.currencies;\r\n  if (!currenciesByNetwork) {\r\n    return;\r\n  }\r\n\r\n  return Object.values(currenciesByNetwork).find(\r\n    (item: any) => item.address === addressToken,\r\n  );\r\n};\r\n\r\nexport const getTokenDecimals = (\r\n  network: string,\r\n  collateralCurrency: string,\r\n  defaultCurrency = 'usdc',\r\n): number => {\r\n  const currency = config.networks[network].currencies[collateralCurrency];\r\n  if (currency) {\r\n    return currency.decimals;\r\n  }\r\n  return config.networks[network].currencies[defaultCurrency].decimals;\r\n};\r\n\r\nexport const areTokensApproved = async (\r\n  network: string,\r\n  tokenAddress: string,\r\n  collateralTokenAddress: string,\r\n  userAddress: string | undefined,\r\n) => {\r\n  if (!network || !tokenAddress || !collateralTokenAddress || !userAddress) {\r\n    return false;\r\n  }\r\n  try {\r\n    const launchTokenAllowance = await getAllowance(\r\n      network,\r\n      tokenAddress,\r\n      userAddress,\r\n      config.networks[network].addresses.auctionProxy,\r\n    );\r\n    const collateralTokenAllowance = await getAllowance(\r\n      network,\r\n      collateralTokenAddress,\r\n      userAddress,\r\n      config.networks[network].addresses.auctionProxy,\r\n    );\r\n    return (\r\n      new BigNumber(collateralTokenAllowance).gt(0) &&\r\n      new BigNumber(launchTokenAllowance).gt(0)\r\n    );\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const checkIsTokenBase = (addressToken: string, network: string) => {\r\n  const currenciesByNetwork = config.networks[network]?.currencies;\r\n  if (!currenciesByNetwork) {\r\n    return false;\r\n  }\r\n  return Object.values(currenciesByNetwork).find(\r\n    (item: any) => item.address === addressToken,\r\n  );\r\n};\r\n\r\nexport const getSymbolBaseToken = (symbol: string) => {\r\n  if (symbol?.includes('bnb')) {\r\n    return 'bnb';\r\n  }\r\n\r\n  if (symbol?.includes('eth')) {\r\n    return 'eth';\r\n  }\r\n\r\n  if (symbol?.includes('avax')) {\r\n    return 'avax';\r\n  }\r\n\r\n  if (symbol?.includes('matic')) {\r\n    return 'matic';\r\n  }\r\n\r\n  return symbol;\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\AuthorizationRequest.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\requests\\ProjectRequest.ts",["821","822","823","824","825"],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-multicall.ts",["826","827","828","829","830"],"import { Interface } from '@ethersproject/abi';\r\nimport config from 'src/config';\r\nimport { getNetworkProvider } from 'src/utils/utils-network';\r\nimport { multicallContract } from 'src/utils/utils-contract';\r\n\r\nexport async function multicall(\r\n  abi: any,\r\n  calls: any,\r\n  network = config.defaultNetwork,\r\n) {\r\n  const MULTICALL_ADDRESS = config.networks[network].addresses.multicall;\r\n  const provider = getNetworkProvider(network);\r\n  try {\r\n    const multi = multicallContract(MULTICALL_ADDRESS, provider);\r\n    const itf = new Interface(abi);\r\n    const calldata = calls.map((call: any) => {\r\n      return [\r\n        call?.address?.toLowerCase(),\r\n        itf.encodeFunctionData(call.name, call.params),\r\n      ];\r\n    });\r\n    //@ts-ignore\r\n    const { returnData } = await multi.aggregate(calldata);\r\n    const res = returnData.map((call: any, i: any) =>\r\n      itf.decodeFunctionResult(calls[i].name, call),\r\n    );\r\n\r\n    return res;\r\n  } catch (e) {\r\n    console.error('[multicall]', e);\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-contract.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\requests\\BaseRequest.ts",["831","832","833","834","835","836","837","838","839","840","841","842"],"import config from 'src/config';\r\nimport axios from 'axios';\r\nimport { setAuthorizationToRequest } from 'src/utils/utils-auth';\r\nimport Storage from 'src/utils/storage';\r\n\r\nexport default class BaseRequest {\r\n  protected accessToken = '';\r\n  constructor() {\r\n    const accessToken = Storage.getAccessToken();\r\n    if (accessToken) {\r\n      this.accessToken = accessToken;\r\n      setAuthorizationToRequest(this.accessToken, Storage.getChainId());\r\n    }\r\n  }\r\n\r\n  getUrlPrefix() {\r\n    return config.api.baseUrlApi;\r\n  }\r\n\r\n  async get(url: string, params?: any) {\r\n    try {\r\n      const config = {\r\n        params,\r\n      };\r\n      const response = await axios.get(this.getUrlPrefix() + url, config);\r\n      return this._responseHandler(response);\r\n    } catch (error) {\r\n      return this._errorHandler(error);\r\n    }\r\n  }\r\n\r\n  async put(url: any, data: any) {\r\n    try {\r\n      const response = await axios.put(this.getUrlPrefix() + url, data);\r\n      return this._responseHandler(response);\r\n    } catch (error) {\r\n      return this._errorHandler(error);\r\n    }\r\n  }\r\n\r\n  async patch(url: any, data: any) {\r\n    try {\r\n      const response = await axios.patch(this.getUrlPrefix() + url, data);\r\n      return this._responseHandler(response);\r\n    } catch (error) {\r\n      return this._errorHandler(error);\r\n    }\r\n  }\r\n\r\n  async post(url: any, data: any) {\r\n    try {\r\n      const response = await axios.post(this.getUrlPrefix() + url, data);\r\n      return this._responseHandler(response);\r\n    } catch (error) {\r\n      return this._errorHandler(error);\r\n    }\r\n  }\r\n\r\n  async delete(url: any, data?: any) {\r\n    try {\r\n      const config = {\r\n        data,\r\n      };\r\n      const response = await axios.delete(this.getUrlPrefix() + url, config);\r\n      return this._responseHandler(response);\r\n    } catch (error) {\r\n      return this._errorHandler(error);\r\n    }\r\n  }\r\n\r\n  async _responseHandler(response: any) {\r\n    return response.data;\r\n  }\r\n\r\n  _errorNavigator(err: any) {\r\n    if (!err.response || !err.response.status) {\r\n      return;\r\n    }\r\n    switch (err.response.status) {\r\n      case 403:\r\n        window.location.pathname = '/403';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  async _errorHandler(err: any) {\r\n    this._errorNavigator(err);\r\n    if (err.response) {\r\n      console.log('===errorHandler', JSON.stringify(err.response));\r\n      console.log('===errorHandler data', JSON.stringify(err.response.data));\r\n      console.log(\r\n        '===errorHandler status',\r\n        JSON.stringify(err.response.status),\r\n      );\r\n      console.log(\r\n        '===errorHandler headers',\r\n        JSON.stringify(err.response.headers),\r\n      );\r\n    } else {\r\n      console.log('==errorHandler', JSON.stringify(err));\r\n    }\r\n    if (\r\n      err.response &&\r\n      err.response.data &&\r\n      err.response.data.message &&\r\n      err.response.data.message[0]\r\n    ) {\r\n      throw new Error(err.response.data.message[0]);\r\n    }\r\n    if (err.response && err.response.data && err.response.data.error) {\r\n      throw new Error(err.response.data.error);\r\n    }\r\n    throw err;\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\abi\\index.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\requests\\UserRequest.ts",["843","844","845","846","847","848","849"],"import config from 'src/config';\r\nimport BaseRequest from './BaseRequest';\r\n\r\nexport default class UserRequest extends BaseRequest {\r\n  getUrlPrefix() {\r\n    return config.api.userApi;\r\n  }\r\n  getUsers(params: any) {\r\n    const url = '/admin/users';\r\n    return this.get(url, params);\r\n  }\r\n  getUserDetail(id: string) {\r\n    const url = `/admin/users/${id}`;\r\n    return this.get(url, {});\r\n  }\r\n  getReport() {\r\n    const url = `/admin/dashboard`;\r\n    return this.get(url, {});\r\n  }\r\n  getStakingPool() {\r\n    const url = `/admin/staking-pool`;\r\n    return this.get(url);\r\n  }\r\n  getDiamondTierRanking() {\r\n    const url = `/public/diamond-tier`;\r\n    return this.get(url);\r\n  }\r\n  getCompetitions(params: any) {\r\n    const url = `/public/competitions`;\r\n    return this.get(url, params);\r\n  }\r\n  getCompetition(id: number) {\r\n    const url = `/public/competitions/${id}`;\r\n    return this.get(url);\r\n  }\r\n  addCompetition(params: any) {\r\n    const url = `/admin/competitions`;\r\n    return this.post(url, params);\r\n  }\r\n  updateCompetition(id: number, params: any) {\r\n    const url = `/admin/competitions/${id}`;\r\n    return this.put(url, params);\r\n  }\r\n  updateStageCompetition(id: number, params: any) {\r\n    const url = `/admin/competitions/${id}/stage`;\r\n    return this.put(url, params);\r\n  }\r\n  finalizeCompetition(id: number, params: any) {\r\n    const url = `/admin/competitions/${id}/finalize`;\r\n    return this.post(url, params);\r\n  }\r\n  getCompetitionLive() {\r\n    const url = `/public/competitions/live-competition`;\r\n    return this.get(url);\r\n  }\r\n  getSnapshots(params: any) {\r\n    const url = `/public/snapshots`;\r\n    return this.get(url, params);\r\n  }\r\n  getSnapshotById(id: string) {\r\n    const url = `/public/snapshots/${id}`;\r\n    return this.get(url);\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\MinusMoreIcon.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppDataTable.tsx",["850"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport {\r\n  forwardRef,\r\n  useImperativeHandle,\r\n  Ref,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n  ReactNode,\r\n  useMemo,\r\n} from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { debounce } from 'lodash';\r\nimport AppPagination from './AppPagination';\r\nimport LoadingIcon from '../assets/icons/LoadingIcon';\r\nimport 'src/styles/components/AppDataTable.scss';\r\nimport AppButton from './AppButton';\r\nimport { Table, TableContainer, useColorMode, Flex } from '@chakra-ui/react';\r\n\r\n// For more params, please define them below with ? mark\r\nexport interface RequestParams {\r\n  search?: string;\r\n  network?: string;\r\n  type?: string;\r\n  status?: string | number;\r\n  name?: string;\r\n  permissionName?: string;\r\n  searchKey?: string;\r\n  poolId?: string;\r\n  projectId?: string;\r\n}\r\n\r\ninterface DataTableProps {\r\n  requestParams?: RequestParams; // if requestParams are not passed, only fetchs API in didMount\r\n  limit?: number;\r\n  wrapperClassName?: string;\r\n  fetchData: (requestParams: RequestParams) => Promise<IResponseType>;\r\n  renderBody: (tableData: any[]) => ReactNode;\r\n  renderHeader?: () => ReactNode;\r\n  renderNoData?: () => ReactNode;\r\n  loading?: boolean;\r\n}\r\n\r\nexport interface DataTableRef {\r\n  tableData: any[];\r\n}\r\n\r\nexport interface Pagination {\r\n  limit: number; // the limit item of page\r\n  page: number; // the current page\r\n  sortBy?: string;\r\n  sortType?: 'asc' | 'desc'; // Available values : asc, desc\r\n}\r\n\r\ninterface IResponseType {\r\n  totalDocs: number;\r\n  totalPages: number;\r\n  page: number;\r\n  limit: number;\r\n  docs: any[];\r\n}\r\n\r\nconst AppDataTable = forwardRef(\r\n  (props: DataTableProps, ref: Ref<DataTableRef>) => {\r\n    const DEFAULT_LIMIT = 20;\r\n    const DEBOUNCE_TIME = 1000;\r\n    const CONSTANT = 'CONSTANT';\r\n\r\n    // make requestParams not change => call at the first load\r\n    const defaultRequestParams = useMemo(() => ({}), [CONSTANT]);\r\n\r\n    const {\r\n      limit = DEFAULT_LIMIT,\r\n      requestParams = defaultRequestParams,\r\n      fetchData,\r\n      renderBody,\r\n      renderHeader,\r\n      renderNoData,\r\n    } = props;\r\n\r\n    const initialPagination: Pagination = { limit, page: 1 };\r\n\r\n    const [tableData, setTableData] = useState<any[]>([]);\r\n    const [totalPages, setTotalPages] = useState<number>(0);\r\n    const [pagination, setPagination] = useState<Pagination>(initialPagination);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [isLoadingMore, setIsLoadingMore] = useState<boolean>(false);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      tableData,\r\n      fetchTableData,\r\n      pagination,\r\n      isLoadingMore,\r\n    }));\r\n\r\n    const fetchTableData = async (\r\n      params: RequestParams,\r\n      tablePagination: Pagination,\r\n      isLoadMore = false,\r\n    ) => {\r\n      const setLoading = isLoadMore ? setIsLoadingMore : setIsLoading;\r\n      setLoading(true);\r\n      const response: IResponseType = await fetchData({\r\n        ...params,\r\n        ...tablePagination,\r\n      });\r\n      setLoading(false);\r\n      if (response && response.docs) {\r\n        setTableData((prevState) =>\r\n          isLoadMore ? [...prevState, ...response.docs] : response.docs,\r\n        );\r\n        setPagination({ ...tablePagination });\r\n        setTotalPages(response.totalPages);\r\n      } else setTableData([]);\r\n    };\r\n\r\n    const debounceFetchTablaData = useCallback(\r\n      debounce(fetchTableData, DEBOUNCE_TIME),\r\n      [requestParams],\r\n    );\r\n\r\n    useEffect(() => {\r\n      debounceFetchTablaData(requestParams, { ...pagination, page: 1 });\r\n      return () => {\r\n        debounceFetchTablaData.cancel();\r\n      };\r\n    }, [debounceFetchTablaData]);\r\n\r\n    const onChangePagination = (event: { selected: number }) => {\r\n      fetchTableData(requestParams, {\r\n        ...pagination,\r\n        page: event.selected + 1,\r\n      });\r\n    };\r\n\r\n    const onLoadMore = () => {\r\n      const nextPage = pagination.page + 1;\r\n      fetchTableData(\r\n        requestParams,\r\n        { ...pagination, page: nextPage },\r\n        isMobile,\r\n      );\r\n    };\r\n\r\n    const _renderLoading = () => {\r\n      const width = isMobile ? 100 : 150;\r\n      return (\r\n        <div>\r\n          <LoadingIcon width={width} height={width} />\r\n        </div>\r\n      );\r\n    };\r\n\r\n    const _renderLoadMore = () => {\r\n      return pagination.page < totalPages ? (\r\n        <div className=\"load-more\">\r\n          <AppButton\r\n            size={'sm'}\r\n            variant=\"outline\"\r\n            className=\"btn-load-more\"\r\n            onClick={onLoadMore}\r\n            isLoading={isLoadingMore}\r\n            isDisabled={isLoadingMore}\r\n          >\r\n            See more\r\n          </AppButton>\r\n        </div>\r\n      ) : null;\r\n    };\r\n    const _renderPagination = () => {\r\n      return (\r\n        <Flex justifyContent=\"flex-end\">\r\n          <AppPagination\r\n            pageCount={totalPages}\r\n            forcePage={pagination.page - 1}\r\n            onPageChange={onChangePagination}\r\n          />\r\n        </Flex>\r\n      );\r\n    };\r\n\r\n    const _renderFooter = () => {\r\n      if (totalPages <= 1 || isLoading || props.loading) {\r\n        return null;\r\n      }\r\n      return isMobile ? _renderLoadMore() : _renderPagination();\r\n    };\r\n    const _renderNoResultOrLoading = () => {\r\n      if (isLoading || props.loading) {\r\n        return _renderLoading();\r\n      }\r\n      if (!tableData.length) {\r\n        return renderNoData ? (\r\n          renderNoData()\r\n        ) : (\r\n          <div\r\n            style={{ marginTop: '25px', width: '100%', textAlign: 'center' }}\r\n          >\r\n            No data...\r\n          </div>\r\n        );\r\n      }\r\n    };\r\n    const _renderBody = () => {\r\n      if (!tableData.length || isLoading || props.loading) {\r\n        return;\r\n      }\r\n      return <>{renderBody(tableData)}</>;\r\n    };\r\n\r\n    const _renderTable = () => {\r\n      return (\r\n        <>\r\n          {renderHeader && renderHeader()}\r\n          {_renderBody()}\r\n        </>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <TableContainer>\r\n          <Table colorScheme=\"gray\">{_renderTable()}</Table>\r\n        </TableContainer>\r\n        {_renderNoResultOrLoading()}\r\n        {_renderFooter()}\r\n      </>\r\n    );\r\n  },\r\n);\r\n\r\nexport default AppDataTable;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppPagination.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\assets\\icons\\NoResult.tsx",["851"],"import animationData from 'src/assets/icons/no-result-found.json';\r\nimport Lottie from 'react-lottie';\r\nimport 'src/styles/components/NoResult.scss';\r\nimport { BgNoResultIcon } from 'src/assets/icons/index';\r\n\r\nconst NoResultIcon = (props: any) => {\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: 'xMidYMid slice',\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Lottie\r\n      options={defaultOptions}\r\n      height={props.height || 'auto'}\r\n      width={props.width || 'auto'}\r\n    />\r\n  );\r\n};\r\n\r\nconst NoResult = () => {\r\n  return (\r\n    <div className={'no-result'}>\r\n      <div className={'bg-img'}>\r\n        <BgNoResultIcon className={'bg'} />\r\n        <div className={'context-result'}>\r\n          <NoResultIcon styles={'icon-anim'} />\r\n          <div className={'text-view'}>\r\n            <span className={'title'}>No results found</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoResult;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-project.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\constants.tsx",["852","853","854","855","856","857"],"import config from './config';\r\n\r\nexport const DEFAULT_CONNECTOR = 'metamask-connector';\r\nexport const DEFAULT_CHAINID =\r\n  `${config.networks[config.defaultNetwork].chainId}` || '56';\r\nexport const TRANSACTION_ERROR =\r\n  'Transaction failed. Please check blockchain to know more error.';\r\nexport const DEFAULT_LIMIT = 10;\r\nexport const API_URL_PREFIX = 'admin';\r\nexport const ADMIN_URL_PREFIX = 'dashboard';\r\nexport const IMAGE_URL_PREFIX = 'image';\r\nexport const MAX_BUY_CAMPAIGN = 1000;\r\nexport const DATETIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\r\n\r\nexport const ACCEPT_CURRENCY = {\r\n  ETH: 'eth',\r\n  USDT: 'usdt',\r\n  USDC: 'usdc',\r\n  POLYGON: 'matic',\r\n  AVAX: 'avax',\r\n  BSC: 'bnb',\r\n};\r\nexport const BUY_TYPE = {\r\n  WHITELIST_LOTTERY: 'whitelist',\r\n  FCFS: 'fcfs',\r\n};\r\nexport const POOL_TYPE = {\r\n  SWAP: 'swap',\r\n  CLAIMABLE: 'claimable',\r\n};\r\nexport const NETWORK_AVAILABLE = {\r\n  ETH: 'eth',\r\n  BSC: 'bsc',\r\n  POLYGON: 'polygon',\r\n  AVAX: 'avalanche',\r\n};\r\nexport const PUBLIC_WINNER_STATUS = {\r\n  PUBLIC: 1,\r\n  PRIVATE: 0,\r\n};\r\nexport const POOL_IS_PRIVATE = {\r\n  PUBLIC: 0,\r\n  PRIVATE: 1,\r\n  SEED: 2,\r\n  COMMUNITY: 3,\r\n};\r\nexport const PICK_WINNER_RULE = {\r\n  RULE_NORMAL: 'rule-normal',\r\n  RULE_WITH_WEIGHT_RATE: 'rule-with-weight-rate',\r\n  RULE_LUCKY_DOVE: 'rule-lucky-dove', // extend from RULE_WITH_WEIGHT_RATE\r\n  RULE_LUCKY_AND_WEIGHT: 'rule-lucky-and-weight',\r\n  RULE_PLAY_OFF: 'rule-play-off',\r\n};\r\n\r\nexport const CHAIN_IDS = {\r\n  MAINNET: 1,\r\n  ROPSTEN: 3,\r\n  RINKEBY: 4,\r\n  GOERLI: 5,\r\n  KOVAN: 42,\r\n  BSC_TESTNET: 97,\r\n  BSC_MAINNET: 56,\r\n  POLYGON_TESTNET: 80001,\r\n  POLYGON: 137,\r\n};\r\nexport const CHAIN_ID_NAME_MAPPING: any = {\r\n  '1': 'Mainnet',\r\n  '3': 'Ropsten',\r\n  '4': 'Rinkeby',\r\n  '5': 'Goerli',\r\n  '42': 'Kovan',\r\n  '97': 'BSC Testnet',\r\n  '56': 'BSC Mainnet',\r\n  '137': 'Polygon Mainnet',\r\n  '80001': 'Polygon Testnet',\r\n};\r\nexport const ETH_NETWORK_ACCEPT_CHAINS: any = {\r\n  '1': 'Mainnet',\r\n  '3': 'Ropsten',\r\n  '4': 'Rinkeby',\r\n  '5': 'Goerli',\r\n  '42': 'Kovan',\r\n};\r\nexport const BSC_NETWORK_ACCEPT_CHAINS: any = {\r\n  '97': 'BSC Testnet',\r\n  '56': 'BSC Mainnet',\r\n};\r\n\r\nexport const POLYGON_NETWORK_ACCEPT_CHAINS: any = {\r\n  '80001': 'Polygon Testnet',\r\n  '137': 'Polygon Mainnet',\r\n};\r\n\r\nexport const ETHERSCAN_BASE_URL: any = {\r\n  '1': 'https://etherscan.io/address',\r\n  '4': 'https://rinkeby.etherscan.io/address',\r\n  '5': 'https://goerli.etherscan.io/address',\r\n  '56': 'https://bscscan.com/address',\r\n  '97': 'https://testnet.bscscan.com/address',\r\n  '137': 'https://polygonscan.com/address/',\r\n  '80001': 'https://mumbai.polygonscan.com/address/',\r\n};\r\n\r\nexport const EXPORT_USER_TYPE: any = {\r\n  USER_LIST: 'USER_LIST',\r\n  USER_PARTICIPANT: 'USER_PARTICIPANT',\r\n  USER_WINNER: 'USER_WINNER',\r\n};\r\n\r\nexport enum TYPE_POOL_CREATED {\r\n  IDO = 'IDO',\r\n  INO = 'INO',\r\n}\r\nexport enum KYC_VALUE {\r\n  NONE = 'NONE',\r\n  APPROVED = 'APPROVED',\r\n}\r\n\r\nexport enum KYC_STATUS {\r\n  INCOMPLETE = 'Unverified', // Blockpass verifications pending\r\n  APPROVED = 'Verified', // profile has been approved by Merchant\r\n  RESUBMIT = 'Submitted', // Merchant has rejected one or more attributes\r\n  WAITING = 'Rejected', // Merchant's review pending\r\n  INREVIEW = 'Reviewing', // in review by Merchant\r\n  REJECTED = 'Unverified',\r\n}\r\n\r\nexport enum AUCTION_STATUS {\r\n  ACTIVE = 1,\r\n  PENDING = 2,\r\n  INACTIVE = 3,\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\broacast.tsx",["858","859","860","861","862","863","864","865","866","867"],"export const AppBroadcast = {\r\n  on(event: any, callback: any) {\r\n    document.addEventListener(event, (e) => callback(e.detail));\r\n  },\r\n  dispatch(event: any, data?: any) {\r\n    document.dispatchEvent(new CustomEvent(event, { detail: data }));\r\n  },\r\n  remove(event: any, callback?: any) {\r\n    document.removeEventListener(event, callback);\r\n  },\r\n};\r\n\r\nconst STORE_EVENT_NAME = `dispatch_store`;\r\nexport const StoreBroadcast = {\r\n  on(callback: any) {\r\n    document.addEventListener(STORE_EVENT_NAME, (e: any) => callback(e.detail));\r\n  },\r\n  dispatch(data?: any) {\r\n    document.dispatchEvent(new CustomEvent(STORE_EVENT_NAME, { detail: data }));\r\n  },\r\n  remove(callback?: any) {\r\n    document.removeEventListener(STORE_EVENT_NAME, callback);\r\n  },\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\store\\myAccount.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Forbidden.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\user.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalLogin.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppChartDonut.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppChartLine.tsx",["868"],"/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport 'src/styles/components/AppChartLine.scss';\r\nimport { Box, Stack } from '@chakra-ui/react';\r\nimport Card from 'src/components/Card';\r\n\r\nChart.register(...registerables);\r\n\r\ninterface LineData {\r\n  label: string;\r\n  dataLabel: string[];\r\n  data: any[];\r\n}\r\n\r\ninterface LineChartProps {\r\n  id: string;\r\n  tokenData: any[];\r\n}\r\n\r\nconst AppChartLine: FC<LineChartProps> = (props) => {\r\n  const { id, tokenData } = props;\r\n\r\n  const [data, setData] = useState<LineData[]>([]);\r\n\r\n  const CHART_TYPE = 'line';\r\n  const DATASET_COLORS = [\r\n    'rgba(0, 120, 255, 1)',\r\n    'rgba(55, 222, 254, 1)',\r\n    'rgba(64, 195, 109, 1)',\r\n    'rgba(181, 62, 250, 1)',\r\n    'rgba(240, 116, 22, 1)',\r\n    'rgba(253, 218, 2, 1)',\r\n    'rgba(245, 66, 114, 1)',\r\n    'rgba(245, 239, 66, 1)',\r\n    'rgba(245, 66, 96, 1)',\r\n    'rgba(66, 245, 117, 1)',\r\n    'rgba(245, 236, 66, 1)',\r\n    'rgba(72, 245, 66, 1)',\r\n    'rgba(245, 242, 66, 1)',\r\n    'rgba(66, 245, 150, 1)',\r\n    'rgba(66, 164, 245, 1)',\r\n  ];\r\n  const DAYS_IN_MONTH = 30;\r\n  const MONTH_LABEL = 'Month';\r\n  const BORDER_DASH = [2, 2]; // number pixels of line and number pixels of space\r\n  const legendContainerId = 'line-chart-legend-container' + id;\r\n\r\n  useEffect(() => {\r\n    if (tokenData.length > 0) {\r\n      onGenerateChartData(tokenData);\r\n    }\r\n  }, [tokenData]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      onDrawChart();\r\n    }\r\n  }, [data]);\r\n\r\n  const isEndOfMonth = (day: number | string) => {\r\n    return Number(day) % DAYS_IN_MONTH === 0;\r\n  };\r\n\r\n  const onGenerateChartData = (tokensData: any[]) => {\r\n    const newData = tokensData.map((tokenInfos: any) => {\r\n      if (!tokenInfos.schedules)\r\n        return {\r\n          label: tokenInfos.title,\r\n          dataLabel: [],\r\n          data: [],\r\n        };\r\n      const dataTitle = Object.keys(tokenInfos.schedules).filter(\r\n        (titleToken) => !isNaN(Number(titleToken)),\r\n      );\r\n      return {\r\n        label: tokenInfos.title,\r\n        dataLabel: dataTitle,\r\n        data: dataTitle.map((title) => tokenInfos.schedules[title]),\r\n      };\r\n    });\r\n    setData(newData);\r\n  };\r\n\r\n  const onGenerateCalculatedLabels = (\r\n    dataLabels: Array<any>,\r\n  ): Array<string> => {\r\n    const labels = dataLabels[0].dataLabel; // get the first data label (equal in all data)\r\n    const finalLabels: Array<string> = [];\r\n    labels.forEach((item: string, _index: number) => {\r\n      if (isEndOfMonth(item)) {\r\n        finalLabels.push(\r\n          Number(item) > 0\r\n            ? `${MONTH_LABEL} ${Number(item) / DAYS_IN_MONTH}`\r\n            : '',\r\n        ); // Month 0 is hidden\r\n      }\r\n    });\r\n    return finalLabels;\r\n  };\r\n\r\n  const onGenerateCalculatedData = (dataCalculate: any): Array<number> => {\r\n    const labels = dataCalculate.dataLabel;\r\n    const finalData: Array<number> = [];\r\n    labels.forEach((item: string, index: number) => {\r\n      if (isEndOfMonth(item)) {\r\n        finalData.push(dataCalculate.data[index]);\r\n      }\r\n    });\r\n    return finalData;\r\n  };\r\n\r\n  const onGenerateData = () => {\r\n    const labels = onGenerateCalculatedLabels(data);\r\n    const datasets = data.map((item, index) => ({\r\n      label: item.label,\r\n      data: onGenerateCalculatedData(item),\r\n      backgroundColor: DATASET_COLORS[index],\r\n      fill: true,\r\n    }));\r\n    return { labels, datasets };\r\n  };\r\n\r\n  const onGenerateOptions = () => {\r\n    return {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      pointRadius: 0,\r\n      backgroundColor: 'rgba(21, 27, 56, 1)',\r\n      plugins: {\r\n        title: {\r\n          display: false,\r\n        },\r\n        htmlLengend: {\r\n          // ID of the container to put the legend in\r\n          containerID: legendContainerId,\r\n        },\r\n        legend: {\r\n          display: false, // use custom legend\r\n        },\r\n      },\r\n      scales: {\r\n        x: {\r\n          grid: {\r\n            color: '#252D55',\r\n            borderDash: BORDER_DASH,\r\n          },\r\n        },\r\n        y: {\r\n          stacked: true,\r\n          grid: {\r\n            color: '#252D55',\r\n            borderDash: BORDER_DASH,\r\n          },\r\n        },\r\n      },\r\n      interaction: {\r\n        mode: 'nearest',\r\n        axis: 'x',\r\n        intersect: false,\r\n      },\r\n    };\r\n  };\r\n\r\n  const getOrCreateLegendList = () => {\r\n    const legendContainer = document.getElementById(legendContainerId);\r\n    if (!legendContainer) {\r\n      return;\r\n    }\r\n    let listContainer = legendContainer.querySelector('ul');\r\n    if (!listContainer) {\r\n      listContainer = document.createElement('ul');\r\n      listContainer.className = 'linechart__legend__list';\r\n      legendContainer.appendChild(listContainer);\r\n    }\r\n\r\n    return listContainer;\r\n  };\r\n\r\n  const htmlLegendPlugin = {\r\n    id: legendContainerId,\r\n    afterUpdate(chart: any) {\r\n      const ul = getOrCreateLegendList();\r\n      if (!ul) {\r\n        return;\r\n      }\r\n      // Remove old legend items\r\n      while (ul.firstChild) {\r\n        ul.firstChild.remove();\r\n      }\r\n      // Reuse the built-in legendItems generator\r\n      const items = chart.options.plugins.legend.labels.generateLabels(chart);\r\n      items.forEach((item: any) => {\r\n        const li = document.createElement('li');\r\n        li.className = 'linechart__legend__list__item';\r\n        li.onclick = () => {\r\n          const { type } = chart.config;\r\n          if (type === 'pie' || type === 'doughnut') {\r\n            // Pie and doughnut charts only have a single dataset and visibility is per item\r\n            chart.toggleDataVisibility(item.index);\r\n          } else {\r\n            chart.setDatasetVisibility(\r\n              item.datasetIndex,\r\n              !chart.isDatasetVisible(item.datasetIndex),\r\n            );\r\n          }\r\n          chart.update();\r\n        };\r\n        // Checkbox\r\n        const icon = document.createElement('img');\r\n        icon.src = `/images/${\r\n          !item.hidden ? 'checked-icon.svg' : 'checkbox-icon.svg'\r\n        }`;\r\n        icon.className = 'linechart__legend__list__icon-checkbox';\r\n\r\n        // Color box\r\n        const boxSpan = document.createElement('span');\r\n        boxSpan.className = 'linechart__legend__list__color-box';\r\n        boxSpan.style.background = item.fillStyle;\r\n\r\n        // Text\r\n        const textContainer = document.createElement('p');\r\n        textContainer.className = 'linechart__legend__list__text';\r\n        const text = document.createTextNode(item.text);\r\n        textContainer.appendChild(text);\r\n\r\n        li.appendChild(icon);\r\n        li.appendChild(boxSpan);\r\n        li.appendChild(textContainer);\r\n        ul.appendChild(li);\r\n      });\r\n    },\r\n  };\r\n\r\n  const onDrawChart = () => {\r\n    const areaChart = document.getElementById(id);\r\n    const chart = Chart.getChart(id);\r\n    if (chart) chart.destroy();\r\n    const dataChart = onGenerateData();\r\n    const options = onGenerateOptions();\r\n    if (!areaChart) {\r\n      return null;\r\n    }\r\n    // @ts-ignore\r\n    return new Chart(areaChart, {\r\n      type: CHART_TYPE,\r\n      data: dataChart,\r\n      options,\r\n      plugins: [htmlLegendPlugin],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={4}>\r\n      <Card>\r\n        <canvas id={id} />\r\n      </Card>\r\n      <Box>\r\n        <Box id={legendContainerId} />\r\n      </Box>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default AppChartLine;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\AuctionRequest.ts",["869","870","871"],"import config from 'src/config';\r\nimport BaseRequest from 'src/requests/BaseRequest';\r\n\r\nexport default class AuctionRequest extends BaseRequest {\r\n  getUrlPrefix() {\r\n    return config.api.auctionApi;\r\n  }\r\n\r\n  getAuctions(params: any) {\r\n    const url = '/public/auctions';\r\n    return this.get(url, params);\r\n  }\r\n\r\n  createAuction(params: any) {\r\n    const url = `/my/auctions`;\r\n    return this.post(url, params);\r\n  }\r\n\r\n  getAuctionDetail(id: string) {\r\n    const url = `/public/auctions/${id}`;\r\n    return this.get(url);\r\n  }\r\n\r\n  getSwapList(params: {\r\n    network: string;\r\n    poolId: string;\r\n    sortBy?: string;\r\n    sortType?: string;\r\n    page?: number;\r\n    limit?: number;\r\n  }) {\r\n    const url = '/public/swaps';\r\n    return this.get(url, params);\r\n  }\r\n\r\n  getListAuctions(userAddress: string, params: any) {\r\n    const url = `/admin/auctions`;\r\n    return this.get(url, { ...params, userAddress });\r\n  }\r\n\r\n  getInfoJoinExitHistoryPool(id: string) {\r\n    const url = `/public/pools/${id}/join-exits`;\r\n    return this.get(url);\r\n  }\r\n\r\n  getPriceSnapshotOfPool(poolId: string, mainTokenAddress: string) {\r\n    const url = `/public/pools/${poolId}/price-snapshots`;\r\n    return this.get(url, {\r\n      asset: mainTokenAddress,\r\n    });\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\auction.ts",["872","873","874","875","876"],"import { checkIsTokenBase, TokenType } from './utils-token';\r\n\r\ninterface LBPTokenType extends TokenType {\r\n  icon?: string | undefined;\r\n  latestPriceRate?: string | number | undefined;\r\n}\r\n\r\nexport interface ITokenDraft {\r\n  address: string;\r\n  name: string;\r\n  symbol: string;\r\n  decimals: number;\r\n}\r\n\r\nexport interface ITokenAuction {\r\n  id: string;\r\n  network: string;\r\n  onchainId: string;\r\n  address: string;\r\n  symbol: string;\r\n  name: string;\r\n  decimals: number;\r\n  priceRate: string;\r\n  balance: string;\r\n  weight: string;\r\n  latestPriceRate: string;\r\n}\r\n\r\nexport interface IPoolAuctionResponseType {\r\n  id: string;\r\n  network: string;\r\n  onchainId: string;\r\n  address: string;\r\n  factory: string;\r\n  symbol: string;\r\n  name: string;\r\n  swapEnabled: boolean;\r\n  swapFee: string;\r\n  owner: string;\r\n  vault: {\r\n    id: string;\r\n    network: string;\r\n    address: string;\r\n    poolCount: number;\r\n    totalSwapCount: number;\r\n    totalLiquidity: string;\r\n    totalSwapVolume: string;\r\n    totalSwapFee: string;\r\n  };\r\n  txid: string;\r\n  tokens: ITokenAuction[];\r\n  tokensList: string[];\r\n  createTime: number;\r\n  totalLiquidity: string;\r\n  totalSwapFee: string;\r\n  totalSwapVolume: string;\r\n  totalWeight: string;\r\n  totalShares: string;\r\n  holdersCount: number;\r\n  swapsCount: number;\r\n  startTime: number;\r\n  endTime: number;\r\n  startWeights: string[];\r\n  endWeights: string[];\r\n}\r\n\r\nexport interface IAuctionResponseType {\r\n  id: string;\r\n  network: string;\r\n  creationTx: string;\r\n  ownerAddress: string;\r\n  logoUrl: string;\r\n  description: string;\r\n  draftInfo: {\r\n    tokens: ITokenDraft[];\r\n    amounts: number[];\r\n    startTime: number;\r\n    endTime: number;\r\n    startWeights: number[];\r\n    endWeights: number[];\r\n    swapFee: number;\r\n  };\r\n  pool: IPoolAuctionResponseType;\r\n  socialLinks: {\r\n    website?: string;\r\n    telegram?: string;\r\n    twitter?: string;\r\n    medium?: string;\r\n    discord?: string;\r\n  };\r\n  isDraft: boolean;\r\n  isVerified: boolean;\r\n  status?: number;\r\n}\r\n\r\ninterface AuctionDraftInfo {\r\n  amounts: string[];\r\n  endTime: number;\r\n  endWeights: string[];\r\n  startTime: number;\r\n  startWeights: string[];\r\n  swapFee: number;\r\n  tokens: LBPTokenType[];\r\n}\r\n\r\nexport class Auction {\r\n  protected isDraft = false;\r\n  protected isVerified = false;\r\n  protected draftInfo: AuctionDraftInfo | null = null;\r\n  protected pool = null;\r\n  protected network = '';\r\n  protected logoUrl = '';\r\n  protected status = 0;\r\n\r\n  constructor(auction: any) {\r\n    if (!auction) {\r\n      return;\r\n    }\r\n    this.setIsDraft(auction.isDraft);\r\n    this.setIsVerified(auction.isVerified);\r\n    this.setDraftInfo(auction.draftInfo);\r\n    this.setPool(auction.pool);\r\n    this.setNetwork(auction.network);\r\n    this.setLogoUrl(auction.logoUrl);\r\n    this.setStatus(auction.status);\r\n  }\r\n\r\n  setIsDraft(isDraft: boolean): boolean {\r\n    this.isDraft = isDraft;\r\n    return this.isDraft;\r\n  }\r\n\r\n  getIsDraft(): boolean {\r\n    return this.isDraft;\r\n  }\r\n\r\n  setIsVerified(isVerified: boolean): boolean {\r\n    this.isVerified = isVerified;\r\n    return this.isVerified;\r\n  }\r\n\r\n  getIsVerified(): boolean {\r\n    return this.isVerified;\r\n  }\r\n\r\n  setDraftInfo(draftInfo: AuctionDraftInfo | null) {\r\n    this.draftInfo = draftInfo;\r\n    return this.draftInfo;\r\n  }\r\n\r\n  getDraftInfo(): AuctionDraftInfo | null {\r\n    return this.draftInfo;\r\n  }\r\n\r\n  setPool(pool: any | null) {\r\n    this.pool = pool;\r\n    return this.pool;\r\n  }\r\n\r\n  getPool(): any | null {\r\n    return this.pool;\r\n  }\r\n\r\n  setNetwork(network: string) {\r\n    this.network = network;\r\n    return this.network;\r\n  }\r\n\r\n  setLogoUrl(logoUrl: string) {\r\n    this.logoUrl = logoUrl;\r\n    return this.logoUrl;\r\n  }\r\n\r\n  setStatus(status: number) {\r\n    this.status = status;\r\n    return this.status;\r\n  }\r\n\r\n  getNetwork(): string {\r\n    return this.network;\r\n  }\r\n\r\n  getStatus(): number {\r\n    return this.status;\r\n  }\r\n\r\n  getLogoUrl(): string {\r\n    return this.logoUrl;\r\n  }\r\n\r\n  getStartTime(): number {\r\n    return this.getIsDraft()\r\n      ? this.getDraftInfo()?.startTime\r\n      : this.getPool().startTime;\r\n  }\r\n\r\n  getEndTime(): number {\r\n    return this.getIsDraft()\r\n      ? this.getDraftInfo()?.endTime\r\n      : this.getPool().endTime;\r\n  }\r\n\r\n  getStartWeights(): string[] {\r\n    return this.getIsDraft()\r\n      ? this.getDraftInfo()?.startWeights\r\n      : this.getPool().startWeights;\r\n  }\r\n\r\n  getEndWeights(): string[] {\r\n    return this.getIsDraft()\r\n      ? this.getDraftInfo()?.endWeights\r\n      : this.getPool().endWeights;\r\n  }\r\n\r\n  getTokens() {\r\n    const tokens = this.getIsDraft()\r\n      ? this.getDraftInfo()?.tokens\r\n      : this.getPool().tokens;\r\n    return tokens.sort((a: any, b: any) => {\r\n      if (a.address.toLowerCase() < b.address.toLowerCase()) {\r\n        return -1;\r\n      }\r\n      return 1;\r\n    });\r\n  }\r\n\r\n  getName() {\r\n    return this.getIsDraft() ? '' : this.getPool().name;\r\n  }\r\n\r\n  getSymbol() {\r\n    return this.getIsDraft() ? '' : this.getPool().symbol;\r\n  }\r\n\r\n  getPoolId() {\r\n    return this.getIsDraft() ? '' : this.getPool().id;\r\n  }\r\n\r\n  getTokenBase(): LBPTokenType {\r\n    return this.getTokens().find((item: ITokenAuction) =>\r\n      checkIsTokenBase(item.address, this.getNetwork()),\r\n    );\r\n  }\r\n\r\n  getTokenBaseIndex(): number {\r\n    return this.getTokens().findIndex(\r\n      (item: ITokenAuction) => item.address === this.getTokenBase().address,\r\n    );\r\n  }\r\n\r\n  getTokenMain(): LBPTokenType {\r\n    return this.getTokens().find(\r\n      (item: ITokenAuction) => item.address !== this.getTokenBase().address,\r\n    );\r\n  }\r\n\r\n  getTokenMainIndex(): number {\r\n    return this.getTokens().findIndex(\r\n      (item: ITokenAuction) => item.address === this.getTokenMain().address,\r\n    );\r\n  }\r\n\r\n  getPrice(): number | string {\r\n    return this.getTokenMain()?.latestPriceRate || 0;\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-farm.ts",["877","878","879","880","881","882","883","884"],"import { isAddress } from 'ethers/lib/utils';\r\nimport { multicall } from 'src/utils/utils-multicall';\r\nimport abi from 'src/abi';\r\nimport config from 'src/config';\r\nimport { stakingPoolContract } from './utils-contract';\r\nimport { getNetworkProvider } from './utils-network';\r\nimport { request } from 'src/utils/utils-subgraph';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nconst PROD_BUNI_ADDRESS = '0x0e7beec376099429b85639eb3abe7cf22694ed49';\r\nconst PROD_WBNB_ADDRESS = '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c';\r\n\r\nexport const getUserStakingPool = async (\r\n  userAddress: string,\r\n  poolAddress: string,\r\n) => {\r\n  if (!isAddress(poolAddress) || !isAddress(userAddress)) {\r\n    return null;\r\n  }\r\n  const calls = [\r\n    {\r\n      address: poolAddress,\r\n      name: 'userInfo',\r\n      params: [userAddress],\r\n    },\r\n    {\r\n      address: poolAddress,\r\n      name: 'pendingReward',\r\n      params: [userAddress],\r\n    },\r\n  ];\r\n\r\n  const [allocUserInfo, pendingReward] = await multicall(\r\n    abi['StakingPool'],\r\n    calls,\r\n  );\r\n\r\n  let stakedAmount = 0;\r\n  if (allocUserInfo) {\r\n    stakedAmount = allocUserInfo?.amount.toString() || '0';\r\n  }\r\n\r\n  return {\r\n    poolAddress,\r\n    stakedAmount,\r\n    pendingReward: pendingReward.toString(),\r\n  };\r\n};\r\n\r\n//hardcode get price buni in production\r\nexport const getTokenBuniPrice = async (): Promise<any> => {\r\n  const query = {\r\n    tokenPrice: {\r\n      __args: {\r\n        id: PROD_BUNI_ADDRESS,\r\n      },\r\n    },\r\n  };\r\n  const res = await request('getTokenPrice', query);\r\n  return res && res.tokenPrice;\r\n};\r\n\r\n//hardcode get price bnb in production\r\nexport const getTokenBnBPrice = async (): Promise<any> => {\r\n  const query = {\r\n    tokenPrice: {\r\n      __args: {\r\n        id: PROD_WBNB_ADDRESS,\r\n      },\r\n    },\r\n  };\r\n  const res = await request('getTokenPrice', query);\r\n  return res && res.tokenPrice;\r\n};\r\n\r\nexport const getTokenPrice = async (tokenId: string): Promise<string> => {\r\n  if (!tokenId) {\r\n    return '0';\r\n  }\r\n  const query = {\r\n    tokenPrice: {\r\n      __args: {\r\n        id: tokenId.toLowerCase(),\r\n      },\r\n    },\r\n  };\r\n  const res = await request('getTokenPrice', query);\r\n  return res && res.tokenPrice;\r\n};\r\n\r\nexport const getStakeUnitPriceUsd = async (\r\n  farmConfig: any,\r\n): Promise<string | number> => {\r\n  if (farmConfig.stakeType.toLowerCase() === 'token') {\r\n    let res;\r\n    if (farmConfig.poolTokens[0].symbol.toUpperCase() === 'WBNB') {\r\n      res = await getTokenBnBPrice();\r\n    } else if (farmConfig.poolTokens[0].symbol.toUpperCase() === 'BUNI') {\r\n      res = await getTokenBuniPrice();\r\n    } else {\r\n      res = await getTokenPrice(\r\n        farmConfig.poolTokens[0].contractAddress.toLowerCase(),\r\n      );\r\n    }\r\n    //@ts-ignore\r\n    return res && res.price;\r\n  }\r\n  const calls: any = [];\r\n  //get balance of pool in token address\r\n  farmConfig.poolTokens.forEach((poolToken: any) => {\r\n    calls.push({\r\n      address: poolToken.contractAddress,\r\n      name: 'balanceOf',\r\n      params: [farmConfig.stakingToken],\r\n    });\r\n  });\r\n  //get token price\r\n  const prices = {};\r\n  for (let index = 0; index < farmConfig.poolTokens.length; index++) {\r\n    let tokenPrice = {};\r\n    if (farmConfig.poolTokens[index].symbol.toUpperCase() === 'WBNB') {\r\n      tokenPrice = await getTokenBnBPrice();\r\n    } else if (farmConfig.poolTokens[index].symbol.toUpperCase() === 'BUNI') {\r\n      tokenPrice = await getTokenBuniPrice();\r\n    } else {\r\n      tokenPrice = await getTokenPrice(\r\n        farmConfig.poolTokens[index].contractAddress,\r\n      );\r\n    }\r\n    //@ts-ignore\r\n    prices[farmConfig.poolTokens[index].contractAddress] = tokenPrice.price;\r\n  }\r\n  const result = await multicall(abi['Erc20'], calls);\r\n  const totalLiq = result\r\n    .reduce((total: any, tokenAmount: any, index: any) => {\r\n      //@ts-ignore\r\n      const unitPrice = prices[farmConfig.poolTokens[index].contractAddress];\r\n\r\n      const totalToken = new BigNumber(unitPrice)\r\n        .times(new BigNumber(tokenAmount.balance.toString()).toString())\r\n        .div(1e18);\r\n\r\n      total = new BigNumber(total).plus(totalToken);\r\n\r\n      return total;\r\n    }, new BigNumber(0))\r\n    .toString();\r\n  let [totalSupply] = await multicall(abi['Erc20'], [\r\n    {\r\n      address: farmConfig.stakingToken,\r\n      name: 'totalSupply',\r\n    },\r\n  ]);\r\n  totalSupply = new BigNumber(totalSupply.toString()).div(1e18);\r\n  return new BigNumber(totalLiq).div(totalSupply).toString();\r\n};\r\n\r\nexport const getStakedTokenSupply = async (poolAddress: string) => {\r\n  const contract = await stakingPoolContract(\r\n    poolAddress,\r\n    getNetworkProvider(config.defaultNetwork),\r\n  );\r\n  const stakedTokenSupply = await contract.stakedTokenSupply();\r\n  return stakedTokenSupply.toString();\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-pools.ts",["885","886","887","888"],"import { Idl } from '@project-serum/anchor/src/idl';\r\nimport { Connection, PublicKey } from '@solana/web3.js';\r\nimport config from 'src/config';\r\nimport { IDOPool } from './pool';\r\nimport { UserInterface } from './user';\r\nimport { preSalePoolContract } from './utils-contract';\r\nimport { convertWeiToDec, formatNumber } from './utils-formats';\r\nimport { getNetworkProvider } from './utils-network';\r\nimport { Program, Provider } from '@project-serum/anchor';\r\nimport abi from 'src/abi';\r\nimport { TimelineInterface } from './timelines';\r\n\r\nconst PRESALE_POOL_PROGRAM_ID = 'EGUmJfqFRUp25N4dHkH5Kn3yTvVUFGLfxRb8j5AfUzYa';\r\n\r\nexport enum PHASES {\r\n  UPCOMING,\r\n  WHITE_LIST,\r\n  TOKEN_SALE,\r\n  CLAIM,\r\n}\r\n\r\nexport const getPublicRaiseByUSD = (\r\n  tokenAmount: string,\r\n  tokenPrice: string,\r\n  tokenDecimals: number,\r\n  currencyDecimals: number,\r\n  currencyByUSD: number,\r\n): string => {\r\n  const publicRaise =\r\n    +convertWeiToDec(tokenAmount, tokenDecimals) *\r\n    +convertWeiToDec(tokenPrice, currencyDecimals);\r\n  const publicRaiseByUSD = publicRaise * currencyByUSD;\r\n  return formatNumber(publicRaiseByUSD.toFixed(2));\r\n};\r\n\r\nconst _getSolanaConnection = (pool: IDOPool): Connection => {\r\n  return new Connection(\r\n    config.networks[pool.getNetwork()].rpcUrls[0],\r\n    'confirmed',\r\n  );\r\n};\r\n\r\nexport const _getPreSalePoolProgram = (\r\n  pool: IDOPool,\r\n  user?: UserInterface,\r\n): Program<Idl> => {\r\n  const connection = _getSolanaConnection(pool);\r\n  // const solanaProvider = getSolanaProvider(pool, user) as any;\r\n  const provider = new Provider(connection, {} as any, {\r\n    preflightCommitment: 'confirmed',\r\n    commitment: 'confirmed',\r\n  });\r\n  return new Program(\r\n    abi['PreSalePoolSolana'],\r\n    new PublicKey(PRESALE_POOL_PROGRAM_ID),\r\n    provider,\r\n  );\r\n};\r\n\r\nconst _getPreSalePoolInfo = (pool: IDOPool, user?: UserInterface) => {\r\n  if (!pool) {\r\n    return null;\r\n  }\r\n  const program = _getPreSalePoolProgram(pool);\r\n  const poolAddress = new PublicKey(pool.getContractAddress());\r\n  return program.account.presalePoolAccount.fetch(poolAddress);\r\n};\r\n\r\nexport const getSoldTokens = async (\r\n  pool: IDOPool,\r\n  user?: UserInterface,\r\n): Promise<number> => {\r\n  if (pool.isNetworkSolana()) {\r\n    const poolInfo = await _getPreSalePoolInfo(pool);\r\n    return poolInfo ? +poolInfo.tokenSold : 0;\r\n  } else {\r\n    const networkProvider = getNetworkProvider(pool.getNetwork());\r\n    const contract = preSalePoolContract(\r\n      pool.getContractAddress(),\r\n      networkProvider,\r\n    );\r\n    try {\r\n      const soldTokens = await contract.tokenSold();\r\n      return +soldTokens;\r\n    } catch (error) {\r\n      return 0;\r\n    }\r\n  }\r\n};\r\n\r\nexport const shouldHighlightIDOPhase = (\r\n  timeline: TimelineInterface,\r\n  phase: number,\r\n): boolean => {\r\n  if (phase === PHASES.UPCOMING) {\r\n    return timeline.shouldHighlightUpcomingPhase();\r\n  }\r\n  if (phase === PHASES.WHITE_LIST) {\r\n    return timeline.shouldHighlightWhitelistPhase();\r\n  }\r\n  if (phase === PHASES.TOKEN_SALE) {\r\n    return timeline.shouldHighlightSwapPhase();\r\n  }\r\n  if (phase === PHASES.CLAIM) {\r\n    return timeline.shouldHighlightClaimPhase();\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isBeforeIDOPhase = (\r\n  timeline: TimelineInterface,\r\n  phase: number,\r\n): boolean => {\r\n  if (phase === PHASES.WHITE_LIST) {\r\n    return timeline.beforeWhitelistPhase();\r\n  }\r\n  if (phase === PHASES.TOKEN_SALE) {\r\n    return timeline.beforeSwapPhase();\r\n  }\r\n  if (phase === PHASES.CLAIM) {\r\n    return timeline.beforeClaimPhase();\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getIDOPhaseClassName = (\r\n  idoTimeline: TimelineInterface,\r\n  phase: number,\r\n): string => {\r\n  if (shouldHighlightIDOPhase(idoTimeline, phase)) {\r\n    return 'happening';\r\n  }\r\n  if (!isBeforeIDOPhase(idoTimeline, phase)) {\r\n    return 'done';\r\n  }\r\n  return '';\r\n};\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\pool.ts",["889","890","891","892"],"import { SolanaProviderType } from 'src/connectors';\r\nimport { IdoTimeline, INOTimeline, TimelineInterface } from './timelines';\r\nimport config from 'src/config';\r\nimport { getNetworkConfig, getSolanaNetworkId } from './utils-network';\r\nimport { convertWeiToDec } from './utils-formats';\r\nimport { Project, ProjectInterface } from './utils-project';\r\n\r\nexport type PackageType = {\r\n  packageId: string | number;\r\n  name: string;\r\n  logoUrl: string;\r\n  quantity: number;\r\n  price: string;\r\n  sold: number;\r\n};\r\nexport type TokenType = {\r\n  network: string;\r\n  address: string;\r\n  name: string;\r\n  symbol: string;\r\n  decimals: number;\r\n  logoUrl: string;\r\n};\r\nexport type winingTicketType = {\r\n  tier: string;\r\n  allocationSize: string;\r\n  individualMinTicket: number;\r\n  individualMaxTicket: number;\r\n};\r\nexport type ClaimScheduleType = {\r\n  startTime: number;\r\n  maxClaimablePercentage: number;\r\n};\r\nexport type IdoDetailsType = {\r\n  token: TokenType;\r\n  maxCap: string;\r\n  price: string;\r\n  ticketAllocation: {\r\n    tokenPerTicket: string;\r\n    winingTickets: winingTicketType[];\r\n  };\r\n  claimSchedules: ClaimScheduleType[];\r\n};\r\n\r\nexport type InoDetailsType = {\r\n  maxCap: number;\r\n  packages: PackageType[];\r\n  token: TokenType;\r\n  claimSchedules: ClaimScheduleType[];\r\n  ticketAllocation: {\r\n    boxPerTicket: number;\r\n    winingTickets: winingTicketType[];\r\n  };\r\n  serialContents?: string;\r\n};\r\nexport type CurrencyType = {\r\n  id: string;\r\n  network: string;\r\n  address: string;\r\n  name: string;\r\n  symbol: string;\r\n  decimals: number;\r\n  coinGeckoId: string;\r\n};\r\n\r\nexport interface Network {\r\n  name: string;\r\n  icon: string | undefined;\r\n  value: string;\r\n}\r\n\r\nexport type PoolResponseType = {\r\n  id: string;\r\n  project: any;\r\n  ownerAddress: string;\r\n  name: string;\r\n  type: string;\r\n  network: string;\r\n  currency: CurrencyType;\r\n  currencyPriceUSD: number;\r\n  receiveFundAddress: string;\r\n  contractAddress: string;\r\n  creationTx: string;\r\n  conditionsOfParticipation: {\r\n    isKycRequired: boolean;\r\n    eligibleTiers: string[];\r\n  };\r\n  featureImageUrl: string;\r\n  buyingRules: string;\r\n  whitelistSetting: {\r\n    startTime: number;\r\n    endTime: number;\r\n  };\r\n  saleSetting: {\r\n    startTime: number;\r\n    endTime: number;\r\n  };\r\n  freeBuySetting: {\r\n    endTime: number;\r\n    maxAllocationPerUser: string;\r\n  };\r\n  isKycRequired: boolean;\r\n  isHidden: boolean;\r\n  idoDetails: IdoDetailsType;\r\n  inoDetails: InoDetailsType;\r\n  lbpDetails: any;\r\n  status: string;\r\n};\r\n\r\nexport interface PoolContent {\r\n  id: string;\r\n  project: any;\r\n  ownerAddress: string;\r\n  name: string;\r\n  type: string;\r\n  network: Network;\r\n  currency: CurrencyType;\r\n  currencyPriceUSD: number;\r\n  receiveFundAddress: string;\r\n  contractAddress: string;\r\n  creationTx: string;\r\n  conditionsOfParticipation: {\r\n    isKycRequired: boolean;\r\n    eligibleTiers: string[];\r\n  };\r\n  featureImageUrl: string;\r\n  buyingRules: string;\r\n  whitelistSetting: {\r\n    startTime: number;\r\n    endTime: number;\r\n  };\r\n  saleSetting: {\r\n    startTime: number;\r\n    endTime: number;\r\n  };\r\n  freeBuySetting: {\r\n    endTime: number;\r\n    maxAllocationPerUser: string;\r\n  };\r\n  isKycRequired: boolean;\r\n  isHidden: boolean;\r\n  idoDetails: IdoDetailsType;\r\n  inoDetails: InoDetailsType;\r\n  lbpDetails: any;\r\n  status: string;\r\n}\r\nexport type Erc20TokenType = {\r\n  symbol: string;\r\n  decimals: number;\r\n  logoUrl?: string;\r\n};\r\n\r\nexport type JoinConditionsType = {\r\n  kyc: boolean;\r\n  tiers: string[];\r\n};\r\n\r\nexport class Pool {\r\n  protected id = '';\r\n  protected name = '';\r\n  protected type = '';\r\n  protected network = '';\r\n  protected contractAddress = '';\r\n  protected joinConditions: JoinConditionsType = {\r\n    kyc: false,\r\n    tiers: [],\r\n  };\r\n  protected collateralCurrency: Erc20TokenType | null = null;\r\n  protected timeline: TimelineInterface | null = null;\r\n  protected project: ProjectInterface | null = null;\r\n\r\n  protected freeBuyAllocation = 0;\r\n  protected currencyInUSD = 0;\r\n  protected hasFreeBuyPhase = false;\r\n\r\n  protected solanaProvider: SolanaProviderType | null = null;\r\n\r\n  // TODO: define pool detail type\r\n  constructor(pool: PoolResponseType) {\r\n    if (!pool) {\r\n      return;\r\n    }\r\n    this.hasFreeBuyPhase = !!pool.freeBuySetting;\r\n    this.freeBuyAllocation =\r\n      Number(pool.freeBuySetting?.maxAllocationPerUser) || 0;\r\n    this.currencyInUSD = pool.currencyPriceUSD;\r\n\r\n    this.setId(pool.id);\r\n    this.setName(pool.name);\r\n    this.setType(pool.type);\r\n    this.setContractAddress(pool.contractAddress);\r\n    this.setNetwork(pool.network);\r\n\r\n    this.setCollateralCurrency({\r\n      symbol: pool.currency?.symbol || '',\r\n      decimals: Number(pool.currency?.decimals || 18),\r\n    });\r\n\r\n    this.setJoinConditions({\r\n      kyc: pool.isKycRequired,\r\n      tiers: pool.conditionsOfParticipation?.eligibleTiers || [],\r\n    });\r\n    const project = new Project(pool.project);\r\n    this.setProject(project);\r\n\r\n    const timeline = new IdoTimeline(pool);\r\n    this.setTimeline(timeline);\r\n  }\r\n\r\n  setId(id: string) {\r\n    return (this.id = id);\r\n  }\r\n\r\n  getId(): string {\r\n    return this.id;\r\n  }\r\n\r\n  setName(name: string) {\r\n    return (this.name = name);\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  setType(type: string) {\r\n    return (this.type = type);\r\n  }\r\n\r\n  getType(): string {\r\n    return this.type;\r\n  }\r\n\r\n  setNetwork(network: string) {\r\n    return (this.network = network);\r\n  }\r\n\r\n  getNetwork(): string {\r\n    return this.network;\r\n  }\r\n\r\n  setContractAddress(contractAddress: string) {\r\n    return (this.contractAddress = contractAddress);\r\n  }\r\n\r\n  getContractAddress(): string {\r\n    return this.contractAddress;\r\n  }\r\n\r\n  setCollateralCurrency(collateralCurrency: Erc20TokenType) {\r\n    return (this.collateralCurrency = collateralCurrency);\r\n  }\r\n\r\n  getCollateralCurrency(): Erc20TokenType | null {\r\n    return this.collateralCurrency;\r\n  }\r\n\r\n  getCollateralCurrencyDecimals(): number {\r\n    return this.collateralCurrency?.decimals || 18;\r\n  }\r\n\r\n  getCollateralCurrencySymbol(): string {\r\n    return this.collateralCurrency?.symbol || '';\r\n  }\r\n\r\n  getCollateralCurrencyAddress(): string {\r\n    const networkCurrencies = config.networks[this.getNetwork()].currencies;\r\n    if (\r\n      !networkCurrencies ||\r\n      !networkCurrencies[this.getCollateralCurrencySymbol().toLowerCase()]\r\n    ) {\r\n      return '';\r\n    }\r\n    return networkCurrencies[this.getCollateralCurrencySymbol().toLowerCase()]\r\n      .address;\r\n  }\r\n\r\n  setJoinConditions(joinConditions: JoinConditionsType) {\r\n    return (this.joinConditions = joinConditions);\r\n  }\r\n\r\n  getJoinConditions(): JoinConditionsType {\r\n    return this.joinConditions;\r\n  }\r\n\r\n  setTimeline(timeline: TimelineInterface) {\r\n    return (this.timeline = timeline);\r\n  }\r\n\r\n  getTimeline(): TimelineInterface | null {\r\n    return this.timeline;\r\n  }\r\n\r\n  setProject(project: ProjectInterface) {\r\n    return (this.project = project);\r\n  }\r\n\r\n  getProject(): ProjectInterface | null {\r\n    return this.project;\r\n  }\r\n\r\n  getFreeBuyAllocation(): number {\r\n    return this.freeBuyAllocation;\r\n  }\r\n\r\n  getCurrencyInUSD(): number {\r\n    return this.currencyInUSD;\r\n  }\r\n\r\n  getTiers() {\r\n    return this.joinConditions.tiers;\r\n  }\r\n\r\n  getNetworkIcon() {\r\n    const networkConfig = getNetworkConfig(this.network);\r\n    return networkConfig?.icon;\r\n  }\r\n\r\n  isPoolDeployed(): boolean {\r\n    return !!this.contractAddress;\r\n  }\r\n\r\n  doesPoolHasFreeBuyPhase(): boolean {\r\n    return this.hasFreeBuyPhase;\r\n  }\r\n\r\n  doesPoolRequireKYC(): boolean {\r\n    return this.joinConditions.kyc;\r\n  }\r\n}\r\n\r\nexport class IDOPool extends Pool {\r\n  protected claimSchedules: ClaimScheduleType[];\r\n  protected capacity = 0;\r\n  protected swapRate = '0';\r\n  protected imageUrl = '';\r\n\r\n  protected swapToken: Erc20TokenType | null = null;\r\n\r\n  constructor(pool: PoolResponseType) {\r\n    super(pool);\r\n    this.claimSchedules = pool.idoDetails?.claimSchedules;\r\n    this.setSwapToken({\r\n      symbol: pool.idoDetails?.token?.symbol || '',\r\n      decimals: Number(pool.idoDetails?.token?.decimals || 18),\r\n      logoUrl: pool.idoDetails?.token?.logoUrl,\r\n    });\r\n    this.setCapacity(+pool.idoDetails?.maxCap || 0);\r\n    this.setSwapRate(pool.idoDetails?.price || '0');\r\n    this.imageUrl = pool.featureImageUrl;\r\n  }\r\n\r\n  setSwapToken(swapToken: Erc20TokenType) {\r\n    return (this.swapToken = swapToken);\r\n  }\r\n\r\n  getSwapToken(): Erc20TokenType | null {\r\n    return this.swapToken;\r\n  }\r\n\r\n  getImageUrl(): string {\r\n    return this.imageUrl;\r\n  }\r\n\r\n  getSwapTokenDecimals(): number {\r\n    return this.swapToken?.decimals || 18;\r\n  }\r\n\r\n  getSwapTokenSymbol(): string {\r\n    return this.swapToken?.symbol || '';\r\n  }\r\n\r\n  getSwapTokenLogoUrl(): string {\r\n    return this.swapToken?.logoUrl || '';\r\n  }\r\n\r\n  setCapacity(capacity: number) {\r\n    return (this.capacity = capacity);\r\n  }\r\n\r\n  getCapacity(): number {\r\n    return this.capacity;\r\n  }\r\n\r\n  setSwapRate(swapRate: string) {\r\n    return (this.swapRate = swapRate);\r\n  }\r\n\r\n  getWeiSwapRate(): string {\r\n    return this.swapRate;\r\n  }\r\n\r\n  getSwapRate(): string {\r\n    return convertWeiToDec(\r\n      this.getWeiSwapRate(),\r\n      this.getCollateralCurrencyDecimals(),\r\n    );\r\n  }\r\n\r\n  getClaimSchedules(): ClaimScheduleType[] {\r\n    return this.claimSchedules;\r\n  }\r\n\r\n  isNetworkSolana(): boolean {\r\n    return this.getNetwork() === config.networks[getSolanaNetworkId()].id;\r\n  }\r\n\r\n  getFactoryAddress(): string {\r\n    return config.networks[this.getNetwork()].factoryAddress?.IDO || '';\r\n  }\r\n}\r\n\r\nexport class INOPool extends IDOPool {\r\n  protected packages: PackageType[];\r\n\r\n  constructor(pool: PoolResponseType) {\r\n    super(pool);\r\n    this.claimSchedules = pool.inoDetails?.claimSchedules;\r\n    this.setSwapToken({\r\n      symbol: pool.inoDetails?.token?.symbol || '',\r\n      decimals: Number(pool.inoDetails?.token?.decimals || 18),\r\n      logoUrl: pool.inoDetails?.token?.logoUrl,\r\n    });\r\n    this.setCapacity(+pool.inoDetails?.maxCap || 0);\r\n    this.imageUrl = pool.featureImageUrl;\r\n    this.packages = pool?.inoDetails?.packages;\r\n    const timeline = new INOTimeline(pool);\r\n    this.setTimeline(timeline);\r\n  }\r\n\r\n  setPackages(packages: PackageType[]) {\r\n    this.packages = packages;\r\n  }\r\n\r\n  getPackages(): PackageType[] {\r\n    return this.packages;\r\n  }\r\n\r\n  getFactoryAddress(): string {\r\n    return config.networks[this.getNetwork()].factoryAddress?.INO || '';\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\timelines.ts",["893","894"],"export interface TimelineInterface {\r\n  whitelistPhase: WhitelistPhaseType;\r\n  swapPhase: SwapPhaseType;\r\n  claimPhase?: ClaimPhaseType;\r\n\r\n  setWhitelistPhase(whitelistPhase: WhitelistPhaseType): void;\r\n  getWhitelistPhase(): WhitelistPhaseType;\r\n  beforeWhitelistPhase(): boolean;\r\n  isWhitelistPhase(): boolean;\r\n  afterWhitelistPhase(): boolean;\r\n  setSwapPhase(swapPhase: SwapPhaseType): void;\r\n  getSwapPhase(): SwapPhaseType;\r\n  getPrivateSwapPhase(): PhaseType;\r\n  getPublicSwapPhase(): PhaseType | null;\r\n  getSwapTime(): PhaseType;\r\n  beforeSwapPhase(): boolean;\r\n  isSwapPhase(): boolean;\r\n  isPrivateSwapPhase(): boolean;\r\n  isPublicSwapPhase(): boolean;\r\n  afterSwapPhase(): boolean;\r\n  setClaimPhase(claimPhase: ClaimPhaseType): void;\r\n  getClaimPhase(): ClaimPhaseType;\r\n  beforeClaimPhase(): boolean;\r\n  isClaimPhase(): boolean;\r\n  shouldHighlightUpcomingPhase(): boolean;\r\n  shouldHighlightWhitelistPhase(): boolean;\r\n  shouldHighlightSwapPhase(): boolean;\r\n  shouldHighlightClaimPhase(): boolean;\r\n  hasVestingSchedule(): boolean;\r\n}\r\n\r\nexport const IDO_PHASE_UPCOMING = 'upcoming';\r\nexport const IDO_PHASE_WHITELIST = 'whitelist';\r\nexport const IDO_PHASE_SWAP = 'swap';\r\nexport const IDO_PHASE_CLAIM = 'claim';\r\n\r\nexport const IDO_PHASE_LIST = [\r\n  IDO_PHASE_UPCOMING,\r\n  IDO_PHASE_WHITELIST,\r\n  IDO_PHASE_SWAP,\r\n  IDO_PHASE_CLAIM,\r\n];\r\n\r\nexport type PhaseType = {\r\n  startTime: number;\r\n  endTime: number;\r\n};\r\n\r\nexport type WhitelistPhaseType = {\r\n  startTime: number;\r\n  endTime: number;\r\n};\r\n\r\nexport type SwapPhaseType = {\r\n  privateSwap: PhaseType;\r\n  publicSwap: PhaseType | null;\r\n};\r\n\r\nexport type ScheduleType = {\r\n  startTime: number;\r\n  maxClaimablePercentage: number;\r\n};\r\n\r\nexport type ClaimPhaseType = {\r\n  startTime: number;\r\n  endTime?: number;\r\n  schedules: ScheduleType[] | [];\r\n};\r\n\r\nexport class IdoTimeline implements TimelineInterface {\r\n  public whitelistPhase: WhitelistPhaseType = {\r\n    startTime: 0,\r\n    endTime: 0,\r\n  };\r\n\r\n  public swapPhase: SwapPhaseType = {\r\n    privateSwap: {\r\n      startTime: 0,\r\n      endTime: 0,\r\n    },\r\n    publicSwap: {\r\n      startTime: 0,\r\n      endTime: 0,\r\n    },\r\n  };\r\n\r\n  public claimPhase: ClaimPhaseType = {\r\n    startTime: 0,\r\n    schedules: [],\r\n  };\r\n  constructor(poolDetails: any) {\r\n    if (!poolDetails) {\r\n      return;\r\n    }\r\n    const { whitelistSetting, saleSetting, freeBuySetting, idoDetails } =\r\n      poolDetails;\r\n\r\n    whitelistSetting &&\r\n      this.setWhitelistPhase({\r\n        startTime: whitelistSetting?.startTime * 1000,\r\n        endTime: whitelistSetting?.endTime * 1000,\r\n      });\r\n    this.setSwapPhase({\r\n      privateSwap: {\r\n        startTime: saleSetting ? saleSetting?.startTime * 1000 : 0,\r\n        endTime: saleSetting ? saleSetting?.endTime * 1000 : 0,\r\n      },\r\n      publicSwap:\r\n        !freeBuySetting || !saleSetting\r\n          ? null\r\n          : {\r\n              startTime: saleSetting ? saleSetting?.endTime * 1000 : 0,\r\n              endTime:\r\n                freeBuySetting?.endTime * 1000 || saleSetting?.endTime * 1000,\r\n            },\r\n    });\r\n\r\n    const hasClaimPhase =\r\n      idoDetails &&\r\n      idoDetails.claimSchedules &&\r\n      idoDetails.claimSchedules.length;\r\n    hasClaimPhase &&\r\n      this.setClaimPhase({\r\n        startTime: idoDetails.claimSchedules[0].startTime * 1000,\r\n        schedules: idoDetails.claimSchedules,\r\n      });\r\n  }\r\n  shouldHighlightUpcomingPhase(): boolean {\r\n    return this.beforeWhitelistPhase();\r\n  }\r\n  setWhitelistPhase(whitelistPhase: WhitelistPhaseType): void {\r\n    this.whitelistPhase = whitelistPhase;\r\n  }\r\n  getWhitelistPhase(): WhitelistPhaseType {\r\n    return this.whitelistPhase;\r\n  }\r\n  beforeWhitelistPhase(): boolean {\r\n    return (\r\n      !this.whitelistPhase.startTime ||\r\n      new Date().getTime() < this.whitelistPhase.startTime\r\n    );\r\n  }\r\n  isWhitelistPhase(): boolean {\r\n    const currentTime = new Date().getTime();\r\n    return (\r\n      !!this.whitelistPhase.startTime &&\r\n      !!this.whitelistPhase.endTime &&\r\n      currentTime >= this.whitelistPhase.startTime &&\r\n      currentTime <= this.whitelistPhase.endTime\r\n    );\r\n  }\r\n  afterWhitelistPhase(): boolean {\r\n    return (\r\n      !!this.whitelistPhase.endTime &&\r\n      new Date().getTime() > this.whitelistPhase.endTime\r\n    );\r\n  }\r\n  shouldHighlightWhitelistPhase(): boolean {\r\n    return this.isWhitelistPhase();\r\n  }\r\n\r\n  setSwapPhase(swapPhase: SwapPhaseType) {\r\n    this.swapPhase = swapPhase;\r\n  }\r\n  getSwapPhase(): SwapPhaseType {\r\n    return this.swapPhase;\r\n  }\r\n  getPrivateSwapPhase(): PhaseType {\r\n    return this.swapPhase.privateSwap;\r\n  }\r\n  getPublicSwapPhase(): PhaseType | null {\r\n    return this.swapPhase.publicSwap;\r\n  }\r\n  getSwapTime(): PhaseType {\r\n    const privateSwapPhase = this.getPrivateSwapPhase();\r\n    const publicSwapPhase = this.getPublicSwapPhase();\r\n    return {\r\n      startTime: privateSwapPhase.startTime,\r\n      endTime: publicSwapPhase\r\n        ? publicSwapPhase.endTime\r\n        : privateSwapPhase.endTime,\r\n    };\r\n  }\r\n  beforeSwapPhase(): boolean {\r\n    const { startTime } = this.getSwapTime();\r\n    return !startTime || new Date().getTime() < startTime;\r\n  }\r\n  isSwapPhase(): boolean {\r\n    const { startTime, endTime } = this.getSwapTime();\r\n    const currentTime = new Date().getTime();\r\n    return (\r\n      !!startTime &&\r\n      !!endTime &&\r\n      currentTime >= startTime &&\r\n      currentTime <= endTime\r\n    );\r\n  }\r\n  isPrivateSwapPhase(): boolean {\r\n    const { startTime, endTime } = this.getPrivateSwapPhase();\r\n    const currentTime = new Date().getTime();\r\n    return currentTime >= startTime && currentTime <= endTime;\r\n  }\r\n  isPublicSwapPhase(): boolean {\r\n    const publicSwapPhase = this.getPublicSwapPhase();\r\n    if (!publicSwapPhase) {\r\n      return false;\r\n    }\r\n    const currentTime = new Date().getTime();\r\n    return (\r\n      currentTime >= publicSwapPhase.startTime &&\r\n      currentTime <= publicSwapPhase.endTime\r\n    );\r\n  }\r\n  afterSwapPhase(): boolean {\r\n    const { endTime } = this.getSwapTime();\r\n    return !!endTime && new Date().getTime() > endTime;\r\n  }\r\n  shouldHighlightSwapPhase(): boolean {\r\n    // Token Sale timeline = (after whitelist + before token sale) + token sale\r\n    return (\r\n      (this.afterWhitelistPhase() && this.beforeSwapPhase()) ||\r\n      this.isSwapPhase()\r\n    );\r\n  }\r\n  setClaimPhase(claimPhase: ClaimPhaseType) {\r\n    this.claimPhase = claimPhase;\r\n  }\r\n  getClaimPhase(): ClaimPhaseType {\r\n    return this.claimPhase;\r\n  }\r\n  beforeClaimPhase(): boolean {\r\n    return (\r\n      !this.claimPhase.startTime ||\r\n      new Date().getTime() < this.claimPhase.startTime\r\n    );\r\n  }\r\n  isClaimPhase(): boolean {\r\n    return (\r\n      !!this.claimPhase.startTime &&\r\n      new Date().getTime() >= this.claimPhase.startTime\r\n    );\r\n  }\r\n  shouldHighlightClaimPhase(): boolean {\r\n    return (\r\n      (this.afterSwapPhase() && this.beforeClaimPhase()) || this.isClaimPhase()\r\n    );\r\n  }\r\n  hasVestingSchedule(): boolean {\r\n    const { startTime } = this.getClaimPhase();\r\n    const currentTime = new Date().getTime();\r\n    return currentTime >= startTime;\r\n  }\r\n}\r\n\r\nexport class INOTimeline extends IdoTimeline {\r\n  constructor(poolDetails: any) {\r\n    super(poolDetails);\r\n    if (!poolDetails) {\r\n      return;\r\n    }\r\n    const { whitelistSetting, saleSetting, freeBuySetting, inoDetails } =\r\n      poolDetails;\r\n\r\n    this.setWhitelistPhase({\r\n      startTime: whitelistSetting?.startTime * 1000,\r\n      endTime: whitelistSetting?.endTime * 1000,\r\n    });\r\n    this.setSwapPhase({\r\n      privateSwap: {\r\n        startTime: saleSetting?.startTime * 1000,\r\n        endTime: saleSetting?.endTime * 1000,\r\n      },\r\n      publicSwap: !freeBuySetting\r\n        ? null\r\n        : {\r\n            startTime: saleSetting?.endTime * 1000,\r\n            endTime:\r\n              freeBuySetting?.endTime * 1000 || saleSetting?.endTime * 1000,\r\n          },\r\n    });\r\n\r\n    const hasClaimPhase =\r\n      inoDetails &&\r\n      inoDetails.claimSchedules &&\r\n      inoDetails.claimSchedules.length;\r\n    hasClaimPhase &&\r\n      this.setClaimPhase({\r\n        startTime: inoDetails.claimSchedules[0].startTime * 1000,\r\n        endTime:\r\n          inoDetails.claimSchedules[inoDetails.claimSchedules.length - 1]\r\n            .startTime * 1000,\r\n        schedules: inoDetails.claimSchedules,\r\n      });\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-auction.ts",["895","896","897","898"],"import moment from 'moment';\r\nimport BigNumber from 'bignumber.js';\r\nimport { getNetworkProvider } from './utils-network';\r\nimport { LBPContract, vaultContract } from './utils-contract';\r\nimport { Auction } from './auction';\r\nimport { STATUS_POOL } from 'src/pages/Auctions/AuctionDetail';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { convertDecToWei } from './utils-formats';\r\nimport abi from 'src/abi';\r\nimport config from 'src/config';\r\n\r\nconst BONE = new BigNumber(1);\r\n\r\nexport type TokenType = {\r\n  decimals: number;\r\n  symbol: string;\r\n  name: string;\r\n  address: string;\r\n};\r\n\r\nexport interface TokenInterface extends TokenType {\r\n  totalSupply: string;\r\n  logo: string;\r\n}\r\n\r\nexport interface MediaInterface {\r\n  website: string;\r\n  telegram: string;\r\n  twitter: string;\r\n  discord: string;\r\n  medium: string;\r\n}\r\n\r\nexport interface AuctionType {\r\n  network: string;\r\n  token: TokenInterface;\r\n  collateralToken: TokenType;\r\n  depositToken: {\r\n    launch: number | string;\r\n    collateral: number | string;\r\n  };\r\n  duration: {\r\n    startDate: Date;\r\n    endDate: Date;\r\n  };\r\n  weights: {\r\n    startWeight: number;\r\n    endWeight: number;\r\n  };\r\n  description: string;\r\n  media: MediaInterface;\r\n  countries: string[];\r\n  swapFee: number;\r\n  permissions: {\r\n    pauseTrading: boolean;\r\n    pullLiquidity: boolean;\r\n  };\r\n  step: number;\r\n}\r\n\r\nexport interface IAuctionSnapshotResponseType {\r\n  avgPrice: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport const DEFAULT_SWAP_FEE = 0.15 / 100;\r\nexport const DEFAULT_CURRENCY = 'usdc';\r\nexport const TIME_FORMAT = 'HH:mm:ss MMM D, YYYY';\r\n\r\nexport interface RefStep {\r\n  validate?: () => void;\r\n  auction?: AuctionType;\r\n}\r\n\r\nexport interface CollateralToken {\r\n  name: string;\r\n  icon: string;\r\n  currency: string;\r\n  address: string;\r\n  decimals: number;\r\n  coingeckoId: string;\r\n}\r\n\r\nexport interface AuctionPriceChartData {\r\n  time: number | string;\r\n  value: number | string;\r\n}\r\n\r\nexport const getCurrentAuctionTime = (): moment.Moment =>\r\n  moment().startOf('minute');\r\n\r\nexport const calcAuctionChartData = (\r\n  collateralBalance: number | string,\r\n  tokenBalance: number | string,\r\n  startTokenWeight: number,\r\n  endTokenWeight: number,\r\n  startDate: Date,\r\n  endDate: Date,\r\n  swapFee = DEFAULT_SWAP_FEE,\r\n): AuctionPriceChartData[] => {\r\n  const duration = moment(endDate).diff(moment(startDate), 'hours');\r\n  if (duration <= 0) {\r\n    return [];\r\n  }\r\n  const chartData = [];\r\n  for (let step = 0; step <= duration; step++) {\r\n    const tokenWeightOut = new BigNumber(\r\n      startTokenWeight -\r\n        (step / duration) * Math.abs(startTokenWeight - endTokenWeight),\r\n    );\r\n    const tokenWeightIn = new BigNumber(1).minus(tokenWeightOut);\r\n\r\n    const inAmount = calcSpotPrice(\r\n      collateralBalance,\r\n      tokenWeightIn.toString(),\r\n      tokenBalance,\r\n      tokenWeightOut.toString(),\r\n      swapFee,\r\n    );\r\n    const price = new BigNumber(inAmount).toFixed(8, BigNumber.ROUND_HALF_UP);\r\n\r\n    chartData.push({\r\n      time: moment(startDate).add(step, 'hours').valueOf(),\r\n      value: price,\r\n    });\r\n  }\r\n\r\n  return chartData;\r\n};\r\n\r\nexport const calcSpotPrice = (\r\n  tokenBalanceIn: string | number,\r\n  tokenWeightIn: string | number,\r\n  tokenBalanceOut: string | number,\r\n  tokenWeightOut: string | number,\r\n  swapFee: string | number,\r\n) => {\r\n  const weightRatio = new BigNumber(tokenWeightOut).div(tokenWeightIn);\r\n  const inAmount = new BigNumber(tokenBalanceIn)\r\n    .dividedBy(tokenBalanceOut)\r\n    .multipliedBy(weightRatio)\r\n    .toString();\r\n\r\n  return new BigNumber(inAmount).multipliedBy(BONE.plus(swapFee)).toString();\r\n};\r\n\r\nexport const getStatusEnableSwap = async (\r\n  network: string,\r\n  poolAddress: string,\r\n) => {\r\n  const provider = getNetworkProvider(network);\r\n  try {\r\n    const contract = LBPContract(poolAddress, provider);\r\n    return await contract.getSwapEnabled();\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport interface IAuctionResponseType {\r\n  id: string;\r\n  network: string;\r\n  creationTx: string;\r\n  ownerAddress: string;\r\n  logoUrl: string;\r\n  description: string;\r\n  draftInfo: {\r\n    tokens: ITokenDraft[];\r\n    amounts: number[];\r\n    startTime: number;\r\n    endTime: number;\r\n    startWeights: number[];\r\n    endWeights: number[];\r\n    swapFee: number;\r\n  };\r\n  pool: IPoolAuctionResponseType;\r\n  socialLinks: {\r\n    website?: string;\r\n    telegram?: string;\r\n    twitter?: string;\r\n    medium?: string;\r\n    discord?: string;\r\n  };\r\n  isDraft: boolean;\r\n  isVerified: boolean;\r\n  status?: number;\r\n}\r\n\r\nexport interface IPoolAuctionResponseType {\r\n  id: string;\r\n  network: string;\r\n  onchainId: string;\r\n  address: string;\r\n  factory: string;\r\n  symbol: string;\r\n  name: string;\r\n  swapEnabled: boolean;\r\n  swapFee: string;\r\n  owner: string;\r\n  vault: {\r\n    id: string;\r\n    network: string;\r\n    address: string;\r\n    poolCount: number;\r\n    totalSwapCount: number;\r\n    totalLiquidity: string;\r\n    totalSwapVolume: string;\r\n    totalSwapFee: string;\r\n  };\r\n  txid: string;\r\n  tokens: ITokenAuction[];\r\n  tokensList: string[];\r\n  createTime: number;\r\n  totalLiquidity: string;\r\n  totalSwapFee: string;\r\n  totalSwapVolume: string;\r\n  totalWeight: string;\r\n  totalShares: string;\r\n  holdersCount: number;\r\n  swapsCount: number;\r\n  startTime: number;\r\n  endTime: number;\r\n  startWeights: string[];\r\n  endWeights: string[];\r\n}\r\n\r\nexport interface ITokenAuction {\r\n  id: string;\r\n  network: string;\r\n  onchainId: string;\r\n  address: string;\r\n  symbol: string;\r\n  name: string;\r\n  decimals: number;\r\n  priceRate: string;\r\n  balance: string;\r\n  weight: string;\r\n  latestPriceRate: string;\r\n}\r\nexport interface ITokenDraft {\r\n  address: string;\r\n  name: string;\r\n  symbol: string;\r\n  decimals: number;\r\n}\r\n\r\nexport interface ITokenMain {\r\n  id: string;\r\n  network: string;\r\n  onchainId: string;\r\n  address: string;\r\n  symbol: string;\r\n  name: string;\r\n  decimals: number;\r\n  priceRate: string;\r\n  balance: string;\r\n  weight: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface ITokenBase {\r\n  coingeckoId: string;\r\n  address: string;\r\n  name: string;\r\n  symbol: string;\r\n  decimals: number;\r\n  icon: string;\r\n}\r\n\r\nexport const getInfoJoinExitPool = async (auction: IAuctionResponseType) => {\r\n  const lbpAuction = new Auction(auction);\r\n\r\n  let balanceStart = [];\r\n  let isExit = false;\r\n  let balanceExit = [];\r\n\r\n  try {\r\n    const response = (await rf\r\n      .getRequest('AuctionRequest')\r\n      .getInfoJoinExitHistoryPool(lbpAuction.getPoolId())) as any;\r\n    if (response && response.docs) {\r\n      const balancePoolStart = response.docs.find(\r\n        (item: any) => item.type === STATUS_POOL.JOIN,\r\n      );\r\n\r\n      balanceStart = balancePoolStart.amounts;\r\n\r\n      const balancePoolExit = response.docs.find(\r\n        (item: any) => item.type === STATUS_POOL.EXIT,\r\n      );\r\n\r\n      if (balancePoolExit && !!Object.values(balancePoolExit).length) {\r\n        isExit = true;\r\n        balanceExit = balancePoolExit.amounts;\r\n      }\r\n\r\n      return {\r\n        balanceStart,\r\n        isExit,\r\n        balanceExit,\r\n      };\r\n    }\r\n  } catch (error: any) {\r\n    return {\r\n      balanceStart,\r\n      isExit,\r\n      balanceExit,\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentBalances = async (\r\n  poolId: string,\r\n  network: string,\r\n  vaultAddress: string,\r\n) => {\r\n  const provider = getNetworkProvider(network);\r\n  try {\r\n    const contract = vaultContract(vaultAddress, provider);\r\n    const { balances } = await contract.getPoolTokens(poolId);\r\n    return balances.map((item: string) => item.toString());\r\n  } catch (e) {\r\n    return [];\r\n  }\r\n};\r\n\r\nfunction calculateWeightChangeProgress(\r\n  timestamp: number | string,\r\n  startTime: number | string,\r\n  endTime: number | string,\r\n): string {\r\n  if (Number(timestamp) > Number(endTime)) {\r\n    return convertDecToWei('1');\r\n  } else if (Number(timestamp) < Number(startTime)) {\r\n    return '0';\r\n  }\r\n  // No need for SafeMath as it was checked right above: endTime >= currentTime >= startTime\r\n  const totalSeconds = Number(endTime) - Number(startTime);\r\n  const secondsElapsed = Number(timestamp) - Number(startTime);\r\n  return totalSeconds == 0\r\n    ? convertDecToWei('1')\r\n    : new BigNumber(secondsElapsed)\r\n        .dividedBy(totalSeconds)\r\n        .multipliedBy(convertDecToWei('1'))\r\n        .decimalPlaces(0)\r\n        .toString();\r\n}\r\n\r\nexport function getNormalizedWeight(\r\n  timestamp: number | string,\r\n  poolState: {\r\n    startTime: number;\r\n    endTime: number;\r\n    startWeight: string;\r\n    endWeight: string;\r\n  },\r\n): number | string {\r\n  const pctProgress = calculateWeightChangeProgress(\r\n    timestamp,\r\n    poolState.startTime,\r\n    poolState.endTime,\r\n  );\r\n  if (\r\n    new BigNumber(pctProgress).isZero() ||\r\n    new BigNumber(poolState.startWeight).comparedTo(poolState.endWeight) === 0\r\n  ) {\r\n    return poolState.startWeight;\r\n  }\r\n  if (new BigNumber(pctProgress).comparedTo(convertDecToWei('1')) >= 0) {\r\n    return poolState.endWeight;\r\n  }\r\n  if (\r\n    new BigNumber(poolState.startWeight).comparedTo(poolState.endWeight) >= 0\r\n  ) {\r\n    const weightDelta = new BigNumber(pctProgress)\r\n      .multipliedBy(\r\n        new BigNumber(poolState.startWeight).minus(poolState.endWeight),\r\n      )\r\n      .dividedBy(convertDecToWei('1'))\r\n      .decimalPlaces(0);\r\n\r\n    return new BigNumber(poolState.startWeight).minus(weightDelta).toString();\r\n  }\r\n  const weightDelta = new BigNumber(pctProgress)\r\n    .multipliedBy(\r\n      new BigNumber(poolState.endWeight).minus(poolState.startWeight),\r\n    )\r\n    .dividedBy(convertDecToWei('1'))\r\n    .decimalPlaces(0);\r\n  return new BigNumber(poolState.startWeight).plus(weightDelta).toString();\r\n}\r\n\r\nexport const toggleEnableSwap = async (\r\n  poolAddress: string,\r\n  isEnabledSwap: boolean,\r\n  network: string,\r\n) => {\r\n  const paramsSend = [poolAddress, isEnabledSwap];\r\n  const addressContract = config.networks[network].addresses.auctionProxy;\r\n  return [abi['LBPProxy'], addressContract, 'setSwapEnabled', paramsSend, {}];\r\n};\r\n\r\nexport const withdrawAuction = (poolAddress: string, network: string) => {\r\n  const addressContract = config.networks[network].addresses.auctionProxy;\r\n  const paramsSend = [poolAddress, [0, 0], 0];\r\n  return [abi['LBPProxy'], addressContract, 'exitPool', paramsSend, {}];\r\n};","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppSilder.tsx",["899"],"import {\r\n  Slider,\r\n  SliderTrack,\r\n  SliderFilledTrack,\r\n  SliderThumb,\r\n  Tooltip,\r\n} from '@chakra-ui/react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst AppSlider = ({ handleChange, value, ...props }: any) => {\r\n  const [sliderValue, setSliderValue] = useState(value);\r\n  const [showTooltip, setShowTooltip] = useState(false);\r\n\r\n  useEffect(() => setSliderValue(value), [value]);\r\n\r\n  return (\r\n    <Slider\r\n      id=\"slider\"\r\n      value={sliderValue}\r\n      colorScheme=\"pink\"\r\n      onChange={(v) => {\r\n        setSliderValue(v);\r\n        handleChange(v);\r\n      }}\r\n      onMouseEnter={() => setShowTooltip(true)}\r\n      onMouseLeave={() => setShowTooltip(false)}\r\n      {...props}\r\n    >\r\n      <SliderTrack>\r\n        <SliderFilledTrack />\r\n      </SliderTrack>\r\n      <Tooltip\r\n        hasArrow\r\n        bg=\"pink.600\"\r\n        color=\"white\"\r\n        placement=\"top\"\r\n        isOpen={showTooltip}\r\n        label={`${sliderValue}%`}\r\n      >\r\n        <SliderThumb />\r\n      </Tooltip>\r\n    </Slider>\r\n  );\r\n};\r\n\r\nexport default AppSlider;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalStuck.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-formats.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\requests\\CoingeckoRequest.ts",["900"],"import config from 'src/config';\r\nimport BaseRequest from './BaseRequest';\r\n\r\nexport default class CoingeckoRequest extends BaseRequest {\r\n  getUrlPrefix() {\r\n    return config.apiCoingecko;\r\n  }\r\n\r\n  getTokenPrice(params: any) {\r\n    const url = '/coins/markets';\r\n    return this.get(url, params);\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\requests\\AdminRequest.ts",["901","902","903","904","905","906","907","908","909","910","911","912"],"D:\\buni\\buni-launchpad-adminpage\\src\\requests\\PoolRequest.ts",["913","914"],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppCardStatistic.tsx",["915","916"],"import {\r\n  Flex,\r\n  Stat,\r\n  StatLabel,\r\n  StatNumber,\r\n  useColorModeValue,\r\n  Text,\r\n  Box,\r\n  BoxProps,\r\n} from '@chakra-ui/react';\r\nimport { FC } from 'react';\r\nimport 'src/styles/components/AppStatistic.scss';\r\n\r\ninterface AppStatisticProps extends BoxProps {\r\n  startContent?: any;\r\n  endContent?: any;\r\n  name?: string;\r\n  growth?: number;\r\n  value?: number | string;\r\n}\r\n\r\nconst AppStatistic: FC<AppStatisticProps> = ({\r\n  startContent,\r\n  endContent,\r\n  name,\r\n  growth,\r\n  value,\r\n  ...props\r\n}) => {\r\n  const textColor = useColorModeValue('secondaryGray.900', 'white');\r\n  const textColorSecondary = 'secondaryGray.600';\r\n\r\n  return (\r\n    <Box\r\n      className=\"appStatistic\"\r\n      bg={useColorModeValue('#ffffff', 'navy.800')}\r\n      {...props}\r\n    >\r\n      <Flex\r\n        my=\"auto\"\r\n        h=\"100%\"\r\n        align={{ base: 'center', xl: 'start' }}\r\n        justify={{ base: 'center', xl: 'center' }}\r\n      >\r\n        {startContent}\r\n\r\n        <Stat my=\"auto\" ms={startContent ? '18px' : '0px'}>\r\n          <StatLabel\r\n            lineHeight=\"100%\"\r\n            color={textColorSecondary}\r\n            fontSize={{\r\n              base: 'sm',\r\n            }}\r\n          >\r\n            {name || '--'}\r\n          </StatLabel>\r\n          <StatNumber\r\n            color={textColor}\r\n            fontSize={{\r\n              base: '2xl',\r\n            }}\r\n          >\r\n            {value || '--'}\r\n          </StatNumber>\r\n          {growth ? (\r\n            <Flex align=\"center\">\r\n              <Text color=\"green.500\" fontSize=\"xs\" fontWeight=\"700\" me=\"5px\">\r\n                {growth}\r\n              </Text>\r\n              <Text color=\"secondaryGray.600\" fontSize=\"xs\" fontWeight=\"400\">\r\n                since last month\r\n              </Text>\r\n            </Flex>\r\n          ) : null}\r\n        </Stat>\r\n        <Flex ms=\"auto\" w=\"max-content\">\r\n          {endContent}\r\n        </Flex>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AppStatistic;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\tier.ts",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-pool.ts",["917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940"],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppCKEditor.tsx",["941","942","943"],"import React, { FC, useEffect, useRef, useState } from 'react';\r\nimport { Box, Text, useColorModeValue } from '@chakra-ui/react';\r\n\r\ninterface AppCKEditorProps {\r\n  onChange: (data: unknown) => void;\r\n  name?: string;\r\n  value?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst AppCKEditor: FC<AppCKEditorProps> = ({\r\n  onChange,\r\n  name,\r\n  value,\r\n  disabled,\r\n}) => {\r\n  const editorRef = useRef<any>(null);\r\n  const [editorLoaded, setEditorLoaded] = useState(false);\r\n  const { CKEditor, ClassicEditor } = editorRef.current || {};\r\n\r\n  useEffect(() => {\r\n    editorRef.current = {\r\n      /* eslint @typescript-eslint/no-var-requires: \"off\" */\r\n      CKEditor: require('@ckeditor/ckeditor5-react').CKEditor,\r\n      ClassicEditor: require('@ckeditor/ckeditor5-build-classic'),\r\n    };\r\n    setEditorLoaded(true);\r\n  }, [editorRef]);\r\n\r\n  return (\r\n    <Box\r\n      w={'full'}\r\n      style={{\r\n        ['--ck-color-base-background' as string]: 'transparent',\r\n        ['--ck-color-toolbar-background' as string]: 'transparent',\r\n        ['--ck-color-text' as string]: useColorModeValue(\r\n          'gray.800',\r\n          'whiteAlpha.900',\r\n        ),\r\n        ['--ck-focus-ring' as string]: 'inherit',\r\n      }}\r\n    >\r\n      {editorLoaded ? (\r\n        <CKEditor\r\n          name={name}\r\n          editor={ClassicEditor}\r\n          data={value}\r\n          disabled={disabled}\r\n          onChange={(event: any, editor: { getData: () => any }) => {\r\n            const data = editor.getData();\r\n            onChange(data);\r\n          }}\r\n        />\r\n      ) : (\r\n        <Text>Editor loading</Text>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AppCKEditor;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalFinalizeCompetition.tsx",["944","945","946","947","948","949","950"],"import React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport BaseModal from 'src/modals/BaseModal';\r\nimport {\r\n  Box,\r\n  Table,\r\n  TableContainer,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Text,\r\n  Flex,\r\n} from '@chakra-ui/react';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport AppSelect from 'src/components/AppSelect';\r\nimport {\r\n  formatShortAddress,\r\n  formatTimestamp,\r\n  formatWeiNumber,\r\n} from 'src/utils/utils-formats';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { toastError, toastSuccess } from 'src/utils/utils-notify';\r\nimport { IDiamondUser, COMPETITION_STATUS } from 'src/pages/PageStaking';\r\n\r\ninterface IModalFinalizeCompetition {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  fetchData?: () => void;\r\n  competitionId: any;\r\n  snapshots: any;\r\n}\r\n\r\nconst ModalFinalizeCompetition: FC<IModalFinalizeCompetition> = ({\r\n  open,\r\n  onClose,\r\n  competitionId,\r\n  snapshots,\r\n  fetchData,\r\n}) => {\r\n  const [snapshotId, setSnapshotId] = useState<string>('');\r\n  const [rankUsers, setRankUsers] = useState<IDiamondUser[]>([]);\r\n  const [isLoading, setLoading] = useState<boolean>(false);\r\n\r\n  const handleClose = () => {\r\n    onClose();\r\n    setSnapshotId('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (snapshots && !!snapshots.length) {\r\n      const listUser = snapshots.find(\r\n        (item: any) => +item.snapshotId === +snapshotId,\r\n      )?.rankedUsers;\r\n      setRankUsers(listUser);\r\n    }\r\n  }, [snapshots, snapshotId]);\r\n\r\n  const finalizeCompetition = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await rf.getRequest('UserRequest').finalizeCompetition(competitionId, {\r\n        snapshotId,\r\n      });\r\n      toastSuccess({ message: 'Finalize competition successfully!' });\r\n      setLoading(false);\r\n      onClose();\r\n      fetchData && fetchData();\r\n    } catch (e: any) {\r\n      toastError({ message: e.message });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const _renderDiamondTierRanking = () => {\r\n    const _renderBodyTable = () => {\r\n      return (\r\n        <Tbody>\r\n          {rankUsers &&\r\n            !!rankUsers.length &&\r\n            rankUsers?.map((user: IDiamondUser, index: number) => {\r\n              const stakedBpt =\r\n                user.stakingTokens && user.stakingTokens[1]\r\n                  ? user.stakingTokens[1].stakedAmount\r\n                  : '0';\r\n              const stakedBuni =\r\n                user.stakingTokens && user.stakingTokens[0]\r\n                  ? user.stakingTokens[0].stakedAmount\r\n                  : '0';\r\n              return (\r\n                <Tr key={index}>\r\n                  <Td>{user.rank}</Td>\r\n                  <Td>{formatShortAddress(user.userAddress)}</Td>\r\n                  <Td>{formatWeiNumber(stakedBpt)} BPT</Td>\r\n                  <Td>{formatWeiNumber(stakedBuni)} BUNI</Td>\r\n                </Tr>\r\n              );\r\n            })}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTable = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Position</Th>\r\n            <Th>Wallet Address</Th>\r\n            <Th>BPT Staked</Th>\r\n            <Th>BUNI Staked</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <Box mt={5}>\r\n        <Text mt={8} fontWeight={500}>\r\n          Diamond Tier List\r\n        </Text>\r\n        <TableContainer>\r\n          <Table colorScheme=\"gray\">\r\n            {_renderHeaderTable()}\r\n            {_renderBodyTable()}\r\n          </Table>\r\n        </TableContainer>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BaseModal\r\n        size=\"xl\"\r\n        title=\"Finalize Competition\"\r\n        isOpen={open}\r\n        onClose={handleClose}\r\n      >\r\n        <Box>\r\n          <Text>\r\n            Select snapshot time{' '}\r\n            <Text color={'red.500'} as={'span'}>\r\n              *\r\n            </Text>\r\n          </Text>\r\n          <AppSelect\r\n            placeholder={'Select snapshot'}\r\n            onChange={(e) => {\r\n              setSnapshotId(e.target.value);\r\n            }}\r\n          >\r\n            {snapshots &&\r\n              !!snapshots.length &&\r\n              snapshots?.map((option: any, index: number) => (\r\n                <option value={option.snapshotId} key={index}>\r\n                  {formatTimestamp(option.snapshotTime, 'HH:mm - YYYY/MM/DD')}\r\n                </option>\r\n              ))}\r\n          </AppSelect>\r\n\r\n          {rankUsers && !!rankUsers.length && _renderDiamondTierRanking()}\r\n\r\n          <Flex justifyContent={'flex-end'} mt={5}>\r\n            <AppButton\r\n              isDisabled={!snapshotId}\r\n              onClick={finalizeCompetition}\r\n              isLoading={isLoading}\r\n            >\r\n              Submit\r\n            </AppButton>\r\n          </Flex>\r\n        </Box>\r\n      </BaseModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalFinalizeCompetition;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\utils\\utils-subgraph.ts",["951","952"],"import merge from 'lodash/merge';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport { jsonToGraphQLQuery } from 'json-to-graphql-query';\r\nimport config from 'src/config';\r\n\r\nconst queries: any = {\r\n  getTokenPrice: {\r\n    tokenPrice: {\r\n      id: true,\r\n      symbol: true,\r\n      name: true,\r\n      price: true,\r\n    },\r\n  },\r\n  getTokenPrices: {\r\n    tokenPrices: {\r\n      id: true,\r\n      symbol: true,\r\n      name: true,\r\n      price: true,\r\n    },\r\n  },\r\n};\r\n\r\nexport async function request(key: string | null, jsonQuery: any = {}) {\r\n  jsonQuery = key\r\n    ? merge(cloneDeep(queries[key]), cloneDeep(jsonQuery))\r\n    : jsonQuery;\r\n  const query =\r\n    typeof jsonQuery === 'string'\r\n      ? jsonQuery\r\n      : jsonToGraphQLQuery({ query: jsonQuery });\r\n  const res = await fetch(config.subgraphUrl, {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ query }),\r\n  });\r\n  try {\r\n    const { data } = await res.json();\r\n    return data;\r\n  } catch (e) {\r\n    return Promise.reject(e);\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\hooks\\usePool.ts",["953","954"],"import { useDispatch } from 'react-redux';\r\nimport { IDOPool, INOPool } from 'src/utils/pool';\r\nimport { toastError, toastSuccess } from 'src/utils/utils-notify';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { processTransaction } from 'src/store/transactions';\r\nimport { UserInterface } from 'src/utils/user';\r\nimport abi from 'src/abi';\r\nimport config from 'src/config';\r\nimport { TYPE_POOL_CREATED } from 'src/constants';\r\n\r\nconst usePool = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const deployPool = async (\r\n    pool: IDOPool | INOPool,\r\n    user: UserInterface,\r\n    isDeploy: boolean,\r\n  ) => {\r\n    if (pool.isPoolDeployed()) {\r\n      toastError({ message: 'Pool is deployed !!!' });\r\n      return;\r\n    }\r\n    if (!isDeploy) {\r\n      return;\r\n    }\r\n\r\n    const timeline = pool.getTimeline();\r\n    if (!timeline?.afterWhitelistPhase()) {\r\n      toastError({ message: 'Please waiting open whitelist phase' });\r\n      return;\r\n    } else if (\r\n      timeline?.afterWhitelistPhase() &&\r\n      !timeline?.beforeSwapPhase()\r\n    ) {\r\n      toastError({ message: 'Please wait to close the whitelist phase' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // check winner list\r\n      const winnerResponse = await rf.getRequest('PoolRequest').getWinnerList({\r\n        poolId: pool.getId(),\r\n      });\r\n      if (!winnerResponse || !winnerResponse.docs) {\r\n        return;\r\n      }\r\n      if (!winnerResponse.docs.length) {\r\n        toastError({ message: 'You have to do pick winner before deploy !' });\r\n        return;\r\n      }\r\n      // register pool onchain\r\n      const transaction = await dispatch(\r\n        processTransaction({\r\n          provider: user?.getProvider(),\r\n          params: [\r\n            pool.getType() === TYPE_POOL_CREATED.IDO\r\n              ? abi['PreSaleFactory']\r\n              : abi['InoFactory'],\r\n            pool.getFactoryAddress(),\r\n            'registerPool',\r\n            [config.signer],\r\n            {},\r\n          ],\r\n        }) as any,\r\n      );\r\n      // deploy\r\n      if (!transaction || !transaction.payload || !transaction.payload.hash) {\r\n        toastError({ message: 'Cannot register pool on chain !' });\r\n        return;\r\n      }\r\n      await rf\r\n        .getRequest('PoolRequest')\r\n        .deploy(pool.getId(), { creationTx: transaction.payload.hash });\r\n      toastSuccess({ message: 'Deploy successfully !' });\r\n    } catch (error: any) {\r\n      console.error(error);\r\n      toastError({ message: error.toString() });\r\n    }\r\n  };\r\n\r\n  return {\r\n    deployPool,\r\n  };\r\n};\r\n\r\nexport default usePool;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalPickWinners.tsx",["955","956","957","958","959"],"import { FC, useEffect, useMemo, useState } from 'react';\r\nimport { Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport BaseModal from 'src/modals/BaseModal';\r\nimport { IDOPool, INOPool } from 'src/utils/pool';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { IResponseDocsRequest } from 'src/utils/common';\r\nimport { toastError } from 'src/utils/utils-notify';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport LoadingIcon from 'src/assets/icons/LoadingIcon';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { getTierName } from 'src/utils/tier';\r\n\r\ninterface ModalPickWinnersProps {\r\n  pool: IDOPool | INOPool | null;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\ninterface Participant {\r\n  id: string;\r\n  poolId: string;\r\n  candidate: string;\r\n  userAddress: string;\r\n  userInfo: {\r\n    tier: string;\r\n    lotteryTickets: number;\r\n  };\r\n  pool: any;\r\n}\r\n\r\ninterface Winner {\r\n  id: string;\r\n  poolId: string;\r\n  type: string;\r\n  candidate: string;\r\n  userAddress: string;\r\n  userTier: string;\r\n  ticket: number;\r\n  allocationSize: string;\r\n}\r\n\r\nconst ModalPickWinners: FC<ModalPickWinnersProps> = (props) => {\r\n  const { pool, isOpen, onClose } = props;\r\n  const [showWinners, setShowWinners] = useState<boolean>(false);\r\n  const [loadingPickWinners, setLoadingPickWinners] = useState<boolean>(false);\r\n  const [triggerRepickWinners, setTriggerRepickWinners] =\r\n    useState<boolean>(false);\r\n\r\n  const checkIfPickedWinners = async () => {\r\n    const response: IResponseDocsRequest<Winner> | undefined = await getWinners(\r\n      { poolId: pool?.getId() },\r\n    );\r\n    if (response && response.docs && response.docs.length) {\r\n      setShowWinners(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIfPickedWinners();\r\n  }, []);\r\n\r\n  const tableParams = useMemo(() => {\r\n    return {\r\n      poolId: pool?.getId(),\r\n    };\r\n  }, [pool?.getId(), triggerRepickWinners]);\r\n\r\n  const getParticipants = async (params: any) => {\r\n    const { poolId } = params;\r\n    if (!poolId) {\r\n      return;\r\n    }\r\n    const response = await rf\r\n      .getRequest('PoolRequest')\r\n      .getParticipantList(params);\r\n    if (!response || !response.docs || !response.docs.length) {\r\n      toastError({ message: 'Pool has not had participants yet !' });\r\n      return;\r\n    }\r\n    return response;\r\n  };\r\n\r\n  const getWinners = async (params: any) => {\r\n    const { poolId } = params;\r\n    if (!poolId) {\r\n      return;\r\n    }\r\n    const response: IResponseDocsRequest<Winner> = await rf\r\n      .getRequest('PoolRequest')\r\n      .getWinnerList(tableParams);\r\n    if (!response || !response.docs) {\r\n      toastError({ message: 'Get Winners failed !' });\r\n      return;\r\n    }\r\n    return response;\r\n  };\r\n\r\n  const onPickWinners = async () => {\r\n    if (!pool?.getId()) {\r\n      return;\r\n    }\r\n    try {\r\n      setLoadingPickWinners(true);\r\n      await rf.getRequest('PoolRequest').pickWinners(pool.getId());\r\n      setShowWinners(true);\r\n      setTriggerRepickWinners((prevState) => !prevState);\r\n      setLoadingPickWinners(false);\r\n    } catch (error: any) {\r\n      setLoadingPickWinners(false);\r\n      toastError({ message: error.toString() });\r\n    }\r\n  };\r\n\r\n  const _renderTableTitle = () => {\r\n    return showWinners ? 'Winners of Pool' : 'Participants of Pool';\r\n  };\r\n\r\n  const _renderHeaderTable = () => {\r\n    return (\r\n      <>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Candidate</Th>\r\n            <Th>Tier</Th>\r\n            {!showWinners ? (\r\n              <Th>Lottery Tickets</Th>\r\n            ) : (\r\n              <>\r\n                <Th>Ticket</Th>\r\n                <Th>Allocation Size</Th>\r\n              </>\r\n            )}\r\n          </Tr>\r\n        </Thead>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const _renderBodyTableParticipants = (users: Participant[]) => {\r\n    return (\r\n      <Tbody>\r\n        {users.map((user: Participant) => {\r\n          return (\r\n            <Tr key={user.id}>\r\n              <Td>{user.userAddress}</Td>\r\n              <Td>{getTierName(user.userInfo.tier)}</Td>\r\n              <Td>{user.userInfo.lotteryTickets}</Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    );\r\n  };\r\n\r\n  const _renderBodyTableWinners = (users: Winner[]) => {\r\n    return (\r\n      <Tbody>\r\n        {users.map((user: Winner) => {\r\n          return (\r\n            <Tr key={user.id}>\r\n              <Td>{user.userAddress}</Td>\r\n              <Td>{getTierName(user.userTier)}</Td>\r\n              <Td>{user.ticket}</Td>\r\n              <Td>{user.allocationSize}</Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    );\r\n  };\r\n\r\n  const _renderPickWinnersButton = () => {\r\n    return showWinners ? 'Repick Winners' : 'Pick Winners';\r\n  };\r\n\r\n  return (\r\n    <BaseModal\r\n      size={`${isMobile ? 'xs' : '4xl'}`}\r\n      title=\"Pick Winners\"\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      onActionLeft={onClose}\r\n      onActionRight={onPickWinners}\r\n      textActionLeft=\"Cancel\"\r\n      isLoadingButtonRight={loadingPickWinners}\r\n      textActionRight={_renderPickWinnersButton()}\r\n    >\r\n      <div>{_renderTableTitle()}</div>\r\n      <AppDataTable\r\n        requestParams={tableParams}\r\n        fetchData={showWinners ? getWinners : getParticipants}\r\n        limit={10}\r\n        renderBody={\r\n          showWinners ? _renderBodyTableWinners : _renderBodyTableParticipants\r\n        }\r\n        renderHeader={_renderHeaderTable}\r\n      />\r\n    </BaseModal>\r\n  );\r\n};\r\n\r\nexport default ModalPickWinners;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\store\\metadata.ts",["960","961","962","963","964"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport config from 'src/config';\r\nimport { ITierInfo } from 'src/utils/common';\r\nimport _ from 'lodash';\r\n\r\ninterface MetadataState {\r\n  tiers: ITierInfo[];\r\n  lpRate: number;\r\n  tokensUsdPrice: any;\r\n  metadataStakingPools: any;\r\n}\r\n\r\nconst initialState: MetadataState = {\r\n  tiers: [],\r\n  lpRate: 12500,\r\n  tokensUsdPrice: {},\r\n  metadataStakingPools: [],\r\n};\r\n\r\nexport const getTiers = createAsyncThunk('metadata/getTiers', async () => {\r\n  const res = await rf.getRequest('MetaDataRequest').getStakingTiers();\r\n  if (res.docs && res.docs.length) return res.docs;\r\n});\r\n\r\nexport const getMetadataStakingPools = createAsyncThunk(\r\n  'metadata/getStakingPools',\r\n  async () => {\r\n    const res = await rf.getRequest('MetaDataRequest').getStakingPools();\r\n    if (res.docs && res.docs.length) return res.docs;\r\n  },\r\n);\r\n\r\nfunction getAvailableCurrencies() {\r\n  let availableCurrencies = [''];\r\n  for (const network in config.networks) {\r\n    availableCurrencies = availableCurrencies.concat(\r\n      Object.keys(config.networks[network].currencies).map(\r\n        (currency: any) =>\r\n          config.networks[network].currencies[currency].coingeckoId,\r\n      ),\r\n    );\r\n  }\r\n  return _.uniq(availableCurrencies);\r\n}\r\n\r\nexport const getTokensUsdPrice = createAsyncThunk(\r\n  'metadata/getTokensUsdPrice',\r\n  async () => {\r\n    const supportedTokens = getAvailableCurrencies();\r\n    const params = {\r\n      vs_currency: 'usd',\r\n      ids: supportedTokens.join(','),\r\n    };\r\n    const resObject = await rf\r\n      .getRequest('CoingeckoRequest')\r\n      .getTokenPrice(params);\r\n    if (resObject) {\r\n      return resObject.reduce(function (result: any, item: any) {\r\n        const key = item.symbol.toLowerCase();\r\n        result[key] = item.current_price;\r\n        return result;\r\n      }, {});\r\n    }\r\n  },\r\n);\r\n\r\nexport const init = createAsyncThunk(\r\n  'metadata/init',\r\n  async (_, { dispatch }) => {\r\n    dispatch(getMetadataStakingPools());\r\n    dispatch(getTiers());\r\n    dispatch(getTokensUsdPrice());\r\n  },\r\n);\r\n\r\nconst metadataSlice = createSlice({\r\n  name: 'metadata',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getTiers.fulfilled, (state, { payload }) => {\r\n        state.tiers = payload;\r\n      })\r\n      .addCase(getTokensUsdPrice.fulfilled, (state, { payload }) => {\r\n        state.tokensUsdPrice = payload;\r\n      })\r\n      .addCase(getMetadataStakingPools.fulfilled, (state, { payload }) => {\r\n        state.metadataStakingPools = payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default metadataSlice.reducer;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\hooks\\useMetadata.ts",["965"],"import { useDispatch } from 'react-redux';\r\nimport Storage from 'src/utils/storage';\r\nimport { init } from 'src/store/metadata';\r\n\r\ntype ReturnType = {\r\n  initMetadata: () => Promise<void>;\r\n};\r\n\r\nconst useMetadata = (): ReturnType => {\r\n  const dispatch = useDispatch();\r\n  const initMetadata = async (): Promise<void> => {\r\n    Storage.init();\r\n    await dispatch(init() as any);\r\n  };\r\n\r\n  return {\r\n    initMetadata,\r\n  };\r\n};\r\n\r\nexport default useMetadata;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\components\\CopyableWalletAddress.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\utils\\preSalePool.ts",["966"],"import { Program, Provider, web3, BN } from '@project-serum/anchor';\r\nimport { Idl } from '@project-serum/anchor/src/idl';\r\nimport { ASSOCIATED_PROGRAM_ID } from '@project-serum/anchor/dist/cjs/utils/token';\r\nimport {\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  Token,\r\n  TOKEN_PROGRAM_ID,\r\n} from '@solana/spl-token';\r\nimport { PublicKey, TokenAmount, Transaction } from '@solana/web3.js';\r\n\r\nexport default class PreSalePool {\r\n  private readonly connection: web3.Connection;\r\n  private readonly provider: Provider;\r\n\r\n  public static PRESALE_POOL_SEED = Buffer.from('presale-pool');\r\n  public static USER_SEED = Buffer.from('user');\r\n\r\n  constructor(public readonly program: Program<Idl>) {\r\n    this.connection = this.program.provider.connection;\r\n    this.provider = this.program.provider;\r\n  }\r\n\r\n  public async getPresalePoolAccount(id: web3.PublicKey) {\r\n    return web3.PublicKey.findProgramAddress(\r\n      [PreSalePool.PRESALE_POOL_SEED, id.toBuffer()],\r\n      this.program.programId,\r\n    );\r\n  }\r\n\r\n  public async getPresalePoolTokenAccount(\r\n    presalePoolAccount: web3.PublicKey,\r\n    token: web3.PublicKey,\r\n  ): Promise<web3.PublicKey> {\r\n    return Token.getAssociatedTokenAddress(\r\n      ASSOCIATED_PROGRAM_ID,\r\n      TOKEN_PROGRAM_ID,\r\n      token,\r\n      presalePoolAccount,\r\n      true,\r\n    );\r\n  }\r\n\r\n  public async getUserAccount(\r\n    presalePoolAccount: web3.PublicKey,\r\n    user: web3.PublicKey,\r\n  ) {\r\n    return web3.PublicKey.findProgramAddress(\r\n      [PreSalePool.USER_SEED, presalePoolAccount.toBuffer(), user.toBuffer()],\r\n      this.program.programId,\r\n    );\r\n  }\r\n\r\n  public async initPresalePool(params: {\r\n    id: web3.PublicKey;\r\n    token: web3.PublicKey;\r\n    signer: web3.PublicKey;\r\n  }) {\r\n    const [presalePoolAccount] = await this.getPresalePoolAccount(params.id);\r\n    const presalePoolTokenAccount = await this.getPresalePoolTokenAccount(\r\n      presalePoolAccount,\r\n      params.token,\r\n    );\r\n\r\n    return this.program.rpc.initPresalePool(params.id, params.signer, {\r\n      accounts: {\r\n        sender: this.provider.wallet.publicKey,\r\n        presalePoolAccount,\r\n        systemProgram: web3.SystemProgram.programId,\r\n      },\r\n      postInstructions: [\r\n        Token.createAssociatedTokenAccountInstruction(\r\n          ASSOCIATED_PROGRAM_ID,\r\n          TOKEN_PROGRAM_ID,\r\n          params.token,\r\n          presalePoolTokenAccount,\r\n          presalePoolAccount,\r\n          this.provider.wallet.publicKey,\r\n        ),\r\n      ],\r\n    });\r\n  }\r\n\r\n  public async getBuyTokenByTokenWithPermissionTransaction(params: {\r\n    presalePoolAccount: web3.PublicKey;\r\n    fundingWallet: web3.PublicKey;\r\n    inToken: web3.PublicKey;\r\n    inAmount: BN;\r\n    outToken: web3.PublicKey;\r\n    outAmount: BN;\r\n    maxAmount: BN;\r\n    minAmount: BN;\r\n    maxCap: BN;\r\n    signer: web3.Keypair;\r\n    candidate: web3.PublicKey;\r\n  }) {\r\n    const senderTokenAccount = await Token.getAssociatedTokenAddress(\r\n      ASSOCIATED_PROGRAM_ID,\r\n      TOKEN_PROGRAM_ID,\r\n      params.inToken,\r\n      params.candidate,\r\n    );\r\n    const [senderUserAccount] = await this.getUserAccount(\r\n      params.presalePoolAccount,\r\n      params.candidate,\r\n    );\r\n\r\n    const fundingWalletTokenAccount = await Token.getAssociatedTokenAddress(\r\n      ASSOCIATED_PROGRAM_ID,\r\n      TOKEN_PROGRAM_ID,\r\n      params.inToken,\r\n      params.fundingWallet,\r\n    );\r\n\r\n    const preInstructions = [];\r\n    if (!(await this.connection.getAccountInfo(senderUserAccount))) {\r\n      preInstructions.push(\r\n        this.program.instruction.initUser(params.candidate, {\r\n          accounts: {\r\n            sender: params.candidate,\r\n            presalePoolAccount: params.presalePoolAccount,\r\n            userAccount: senderUserAccount,\r\n            systemProgram: web3.SystemProgram.programId,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n    if (!(await this.connection.getAccountInfo(fundingWalletTokenAccount))) {\r\n      preInstructions.push(\r\n        Token.createAssociatedTokenAccountInstruction(\r\n          ASSOCIATED_PROGRAM_ID,\r\n          TOKEN_PROGRAM_ID,\r\n          params.inToken,\r\n          fundingWalletTokenAccount,\r\n          params.fundingWallet,\r\n          params.candidate,\r\n        ),\r\n      );\r\n    }\r\n\r\n    const transaction = this.program.transaction.buyTokenByTokenWithPersmission(\r\n      params.fundingWallet,\r\n      params.inToken,\r\n      params.inAmount,\r\n      params.outToken,\r\n      params.outAmount,\r\n      params.maxAmount,\r\n      params.minAmount,\r\n      params.maxCap,\r\n      {\r\n        accounts: {\r\n          sender: params.candidate,\r\n          senderTokenAccount,\r\n          senderUserAccount,\r\n          signer: params.signer.publicKey,\r\n          presalePoolAccount: params.presalePoolAccount,\r\n          fundingWalletTokenAccount,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: web3.SystemProgram.programId,\r\n        },\r\n        preInstructions,\r\n      },\r\n    );\r\n    transaction.recentBlockhash = (\r\n      await this.connection.getRecentBlockhash()\r\n    ).blockhash;\r\n    transaction.feePayer = params.candidate;\r\n    const recoverTx = Transaction.from(\r\n      transaction.serialize({ requireAllSignatures: false }),\r\n    );\r\n    recoverTx.partialSign(params.signer);\r\n\r\n    return recoverTx;\r\n  }\r\n\r\n  public async getBuyTokenBySolWithPermissionTransaction(params: {\r\n    presalePoolAccount: web3.PublicKey;\r\n    fundingWallet: web3.PublicKey;\r\n    inAmount: BN;\r\n    outToken: web3.PublicKey;\r\n    outAmount: BN;\r\n    maxAmount: BN;\r\n    minAmount: BN;\r\n    maxCap: BN;\r\n    signer: web3.Keypair;\r\n    candidate: web3.PublicKey;\r\n  }) {\r\n    const [senderUserAccount] = await this.getUserAccount(\r\n      params.presalePoolAccount,\r\n      params.candidate,\r\n    );\r\n\r\n    const preInstructions = [];\r\n    if (!(await this.connection.getAccountInfo(senderUserAccount))) {\r\n      preInstructions.push(\r\n        this.program.instruction.initUser(params.candidate, {\r\n          accounts: {\r\n            sender: params.candidate,\r\n            presalePoolAccount: params.presalePoolAccount,\r\n            userAccount: senderUserAccount,\r\n            systemProgram: web3.SystemProgram.programId,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n\r\n    const inToken = PublicKey.default;\r\n    const transaction = this.program.transaction.buyTokenBySolWithPersmission(\r\n      params.fundingWallet,\r\n      inToken,\r\n      params.inAmount,\r\n      params.outToken,\r\n      params.outAmount,\r\n      params.maxAmount,\r\n      params.minAmount,\r\n      params.maxCap,\r\n      {\r\n        accounts: {\r\n          sender: params.candidate,\r\n          senderUserAccount,\r\n          signer: params.signer.publicKey,\r\n          presalePoolAccount: params.presalePoolAccount,\r\n          fundingWallet: params.fundingWallet,\r\n          systemProgram: web3.SystemProgram.programId,\r\n        },\r\n        preInstructions,\r\n      },\r\n    );\r\n    transaction.recentBlockhash = (\r\n      await this.connection.getRecentBlockhash()\r\n    ).blockhash;\r\n    transaction.feePayer = params.candidate;\r\n    const recoverTx = Transaction.from(\r\n      transaction.serialize({ requireAllSignatures: false }),\r\n    );\r\n    recoverTx.partialSign(params.signer);\r\n\r\n    return recoverTx;\r\n  }\r\n\r\n  public async getClaimTokensTransaction(params: {\r\n    presalePoolAccount: web3.PublicKey;\r\n    token: web3.PublicKey;\r\n    amount: BN;\r\n    signer: web3.Keypair;\r\n    candidate: web3.PublicKey;\r\n  }) {\r\n    const senderTokenAccount = await Token.getAssociatedTokenAddress(\r\n      ASSOCIATED_PROGRAM_ID,\r\n      TOKEN_PROGRAM_ID,\r\n      params.token,\r\n      params.candidate,\r\n    );\r\n    const [senderUserAccount] = await this.getUserAccount(\r\n      params.presalePoolAccount,\r\n      params.candidate,\r\n    );\r\n    const presalePoolTokenAccount = await this.getPresalePoolTokenAccount(\r\n      params.presalePoolAccount,\r\n      params.token,\r\n    );\r\n\r\n    const preInstructions = [];\r\n    if (!(await this.connection.getAccountInfo(senderTokenAccount))) {\r\n      preInstructions.push(\r\n        Token.createAssociatedTokenAccountInstruction(\r\n          ASSOCIATED_PROGRAM_ID,\r\n          TOKEN_PROGRAM_ID,\r\n          params.token,\r\n          senderTokenAccount,\r\n          params.candidate,\r\n          params.candidate,\r\n        ),\r\n      );\r\n    }\r\n\r\n    const transaction = this.program.transaction.claimTokens(\r\n      params.token,\r\n      params.amount,\r\n      {\r\n        accounts: {\r\n          sender: params.candidate,\r\n          senderUserAccount,\r\n          senderTokenAccount,\r\n          signer: params.signer.publicKey,\r\n          presalePoolAccount: params.presalePoolAccount,\r\n          presalePoolTokenAccount,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: web3.SystemProgram.programId,\r\n        },\r\n        preInstructions,\r\n      },\r\n    );\r\n    transaction.recentBlockhash = (\r\n      await this.connection.getRecentBlockhash()\r\n    ).blockhash;\r\n    transaction.feePayer = params.candidate;\r\n    const recoverTx = Transaction.from(\r\n      transaction.serialize({ requireAllSignatures: false }),\r\n    );\r\n    recoverTx.partialSign(params.signer);\r\n\r\n    return recoverTx;\r\n  }\r\n\r\n  public async setNewSigner(params: {\r\n    presalePoolAccount: web3.PublicKey;\r\n    newSigner: web3.PublicKey;\r\n  }) {\r\n    return this.program.rpc.setNewSigner(params.newSigner, {\r\n      accounts: {\r\n        sender: this.provider.wallet.publicKey,\r\n        presalePoolAccount: params.presalePoolAccount,\r\n      },\r\n    });\r\n  }\r\n\r\n  public async emergencyWithdraw(params: {\r\n    presalePoolAccount: web3.PublicKey;\r\n    token: web3.PublicKey;\r\n    wallet: web3.PublicKey;\r\n    amount: BN;\r\n  }) {\r\n    this._onlyEOA(params.wallet);\r\n\r\n    const presalePoolTokenAccount = await this.getPresalePoolTokenAccount(\r\n      params.presalePoolAccount,\r\n      params.token,\r\n    );\r\n    const walletTokenAccount = await Token.getAssociatedTokenAddress(\r\n      ASSOCIATED_PROGRAM_ID,\r\n      TOKEN_PROGRAM_ID,\r\n      params.token,\r\n      params.wallet,\r\n    );\r\n\r\n    const preInstructions = [];\r\n    if (!(await this.connection.getAccountInfo(walletTokenAccount))) {\r\n      preInstructions.push(\r\n        Token.createAssociatedTokenAccountInstruction(\r\n          ASSOCIATED_PROGRAM_ID,\r\n          TOKEN_PROGRAM_ID,\r\n          params.token,\r\n          walletTokenAccount,\r\n          params.wallet,\r\n          this.provider.wallet.publicKey,\r\n        ),\r\n      );\r\n    }\r\n\r\n    const transaction = this.program.transaction.emergencyWithdraw(\r\n      params.token,\r\n      params.wallet,\r\n      params.amount,\r\n      {\r\n        accounts: {\r\n          sender: this.provider.wallet.publicKey,\r\n          walletTokenAccount,\r\n          presalePoolAccount: params.presalePoolAccount,\r\n          presalePoolTokenAccount,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n        },\r\n        preInstructions,\r\n      },\r\n    );\r\n    transaction.recentBlockhash = (\r\n      await this.connection.getRecentBlockhash()\r\n    ).blockhash;\r\n    transaction.feePayer = this.provider.wallet.publicKey;\r\n    transaction.sign((this.provider.wallet as any).payer);\r\n\r\n    return this.connection.sendRawTransaction(transaction.serialize());\r\n  }\r\n\r\n  private _onlyEOA(address: web3.PublicKey) {\r\n    if (!web3.PublicKey.isOnCurve(address.toBuffer())) {\r\n      throw new Error('only EOA address');\r\n    }\r\n  }\r\n\r\n  async getAssociatedTokenAccount(mint: web3.PublicKey, owner: web3.PublicKey) {\r\n    return Token.getAssociatedTokenAddress(\r\n      ASSOCIATED_TOKEN_PROGRAM_ID,\r\n      TOKEN_PROGRAM_ID,\r\n      mint,\r\n      owner,\r\n    );\r\n  }\r\n\r\n  async getTokenBalance(\r\n    tokenId: web3.PublicKey,\r\n    address: web3.PublicKey,\r\n  ): Promise<TokenAmount> {\r\n    try {\r\n      const tokenAccount = await this.getAssociatedTokenAccount(\r\n        tokenId,\r\n        address,\r\n      );\r\n      const accountInfo = await this.connection.getAccountInfo(tokenAccount);\r\n      if (!accountInfo) {\r\n        return {\r\n          amount: '0',\r\n          decimals: 0,\r\n          uiAmount: 0,\r\n          uiAmountString: '0',\r\n        };\r\n      }\r\n      const balanceInfo = await this.connection.getTokenAccountBalance(\r\n        tokenAccount,\r\n      );\r\n      return balanceInfo.value;\r\n    } catch (error) {\r\n      return {\r\n        amount: '0',\r\n        decimals: 0,\r\n        uiAmount: 0,\r\n        uiAmountString: '0',\r\n      };\r\n    }\r\n  }\r\n}\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserList.tsx",["967"],"import { Box, Flex, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport AppLink from 'src/components/AppLink';\r\nimport AppSearch from 'src/components/AppSearch';\r\nimport AppSelect from 'src/components/AppSelect';\r\nimport Card from 'src/components/Card';\r\nimport config from 'src/config';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport BasePage from 'src/layouts/BasePage';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { IUsersResponse, NOT_AVAILABLE_TEXT } from 'src/utils/common';\r\nimport {\r\n  formatKysStatusAsString,\r\n  formatShortAddress,\r\n} from '../utils/utils-formats';\r\n\r\ninterface ISearchUserList {\r\n  search: string;\r\n  filterKycStatus: string;\r\n}\r\nconst KYC_STATUS_OPTIONS = [\r\n  { label: 'All Status', value: '', status: [] },\r\n  { label: 'Unverified', value: 'Unverified', status: ['NONE', 'INCOMPLETE'] },\r\n  { label: 'Verified', value: 'Verified', status: ['APPROVED'] },\r\n  { label: 'Submitted', value: 'Submitted', status: ['RESUBMIT'] },\r\n  { label: 'Rejected', value: 'Rejected', status: ['REJECTED', 'BLOCKED'] },\r\n  { label: 'Reviewing', value: 'Reviewing', status: ['INREVIEW', 'WAITING'] },\r\n];\r\n\r\nconst UsersList = () => {\r\n  const [filterValue, setFilterValue] = useState<ISearchUserList>({\r\n    search: '',\r\n    filterKycStatus: '',\r\n  });\r\n  const { user } = useAuth();\r\n  const fetchDataUsersTable = async (payload: any) => {\r\n    payload.kycStatus =\r\n      KYC_STATUS_OPTIONS.find((kyc) => kyc.value === payload.filterKycStatus)\r\n        ?.status || [];\r\n    return rf.getRequest('UserRequest').getUsers(payload);\r\n  };\r\n\r\n  const _renderBodyTable = (listUser: IUsersResponse[]) => {\r\n    return (\r\n      <Tbody>\r\n        {listUser.map((userLaunchpad: IUsersResponse, index: number) => {\r\n          return (\r\n            <Tr key={index}>\r\n              <Td>{formatShortAddress(userLaunchpad.userAddress)}</Td>\r\n              <Td>\r\n                <Flex minHeight={'50px'} alignItems=\"center\">\r\n                  {userLaunchpad.userName || NOT_AVAILABLE_TEXT}\r\n                </Flex>\r\n              </Td>\r\n              <Td>{userLaunchpad.email || NOT_AVAILABLE_TEXT}</Td>\r\n              <Td>{userLaunchpad.addressCountry || NOT_AVAILABLE_TEXT}</Td>\r\n              <Td>{formatKysStatusAsString(userLaunchpad?.kycStatus)}</Td>\r\n              <Td>\r\n                {user?.havePermissions(\r\n                  config.permissions.users.VIEW_USER_DETAIL,\r\n                ) && (\r\n                  <AppLink to={`/users/${userLaunchpad.userAddress}`}>\r\n                    View Detail\r\n                  </AppLink>\r\n                )}\r\n              </Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    );\r\n  };\r\n\r\n  const _renderHeaderTable = () => {\r\n    return (\r\n      <>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>User Address</Th>\r\n            <Th>Name</Th>\r\n            <Th>Email</Th>\r\n            <Th>Country</Th>\r\n            <Th>Status</Th>\r\n            <Th>Action</Th>\r\n          </Tr>\r\n        </Thead>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <BasePage>\r\n      <Card>\r\n        <Flex my={'20px'} flexDirection={isMobile ? 'column' : 'row'}>\r\n          <Box>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                setFilterValue({ ...filterValue, search: e.target.value })\r\n              }\r\n            />\r\n          </Box>\r\n          <Box mt={isMobile ? '5' : 0} marginLeft={'10px'}>\r\n            <AppSelect\r\n              width={isMobile ? '100%' : 'auto'}\r\n              onChange={(e) =>\r\n                setFilterValue({\r\n                  ...filterValue,\r\n                  filterKycStatus: e.target.value,\r\n                })\r\n              }\r\n            >\r\n              {KYC_STATUS_OPTIONS.map((option, index) => (\r\n                <option value={option.value} key={index}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </AppSelect>\r\n          </Box>\r\n        </Flex>\r\n\r\n        <AppDataTable\r\n          requestParams={{ ...filterValue }}\r\n          fetchData={fetchDataUsersTable}\r\n          limit={10}\r\n          renderBody={_renderBodyTable}\r\n          renderHeader={_renderHeaderTable}\r\n        />\r\n      </Card>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default UsersList;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Auctions\\AuctionDetail.tsx",["968","969","970","971","972","973","974","975"],"import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { getToken, getSymbolBaseToken } from 'src/utils/utils-token';\r\nimport { convertWeiToDec } from 'src/utils/utils-formats';\r\nimport { multicall } from 'src/utils/utils-multicall';\r\nimport { appRetry } from 'src/utils/utils-helpers';\r\nimport abi from 'src/abi';\r\nimport NoResult from 'src/assets/icons/NoResult';\r\nimport {\r\n  getCurrentBalances,\r\n  calcSpotPrice,\r\n  getInfoJoinExitPool,\r\n} from 'src/utils/utils-auction';\r\nimport { Auction } from 'src/utils/auction';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'src/store';\r\nimport BasePage from 'src/layouts/BasePage';\r\nimport LoadingIcon from 'src/assets/icons/LoadingIcon';\r\nimport PartAuctionDetail from './part/PartAuctionDetail';\r\nimport { Box } from '@chakra-ui/react';\r\nimport Card from 'src/components/Card';\r\nimport PartAuctionIntro from './part/PartAuctionIntro';\r\nimport PartAuctionChart from './part/PartAuctionChart';\r\n\r\nexport const STATUS_POOL = {\r\n  JOIN: 'JOIN',\r\n  EXIT: 'EXIT',\r\n};\r\n\r\nconst LBPDetails = () => {\r\n  const { id: auctionId } = useParams() as any;\r\n  const [auction, setAuction] = useState<any>(null);\r\n  const [baseToken, setBaseToken] = useState<any>({});\r\n  const [mainToken, setMainToken] = useState<any>({});\r\n  const [mainTokenIndex, setMainTokenIndex] = useState<number>(0);\r\n  const [baseTokenIndex, setBaseTokenIndex] = useState<number>(1);\r\n  const [balanceStart, setBalanceStart] = useState<string[]>([]);\r\n  const [balanceCurrent, setBalanceCurrent] = useState<string[]>([]);\r\n  const [tokenWeights, setTokenWeights] = useState<string[]>([]);\r\n  const [swapFee, setSwapFee] = useState<string>('0');\r\n  const [isExit, setIsExit] = useState<boolean>(false);\r\n  const [balanceExit, setBalanceExit] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const reloadAuctionDetailInterval: { current: NodeJS.Timeout | null } =\r\n    useRef(null);\r\n\r\n  const { tokensUsdPrice } = useSelector((state: RootState) => state.metadata);\r\n\r\n  const onHandleAuctionDetail = (auction: any) => {\r\n    const lbpAuction = new Auction(auction);\r\n    if (reloadAuctionDetailInterval.current) {\r\n      clearInterval(reloadAuctionDetailInterval.current);\r\n    }\r\n\r\n    if (lbpAuction.getIsDraft()) {\r\n      // reload to get auction detail after every 30 seconds\r\n      reloadAuctionDetailInterval.current = setInterval(() => {\r\n        fetchAuctionDetail();\r\n      }, 30000);\r\n    }\r\n\r\n    // set baseToken\r\n    let tokenBaseInPool = lbpAuction.getTokenBase();\r\n    const tokenBaseIndex = lbpAuction.getTokenBaseIndex();\r\n    tokenBaseInPool = getToken(\r\n      lbpAuction.getNetwork(),\r\n      tokenBaseInPool.address,\r\n    );\r\n    setBaseToken(tokenBaseInPool);\r\n    setBaseTokenIndex(tokenBaseIndex);\r\n\r\n    // set mainToken\r\n    let tokenMainInPool = lbpAuction.getTokenMain();\r\n    tokenMainInPool = { ...tokenMainInPool, icon: auction.logoUrl };\r\n    const tokenMainIndex = lbpAuction.getTokenMainIndex();\r\n    setMainToken(tokenMainInPool);\r\n    setMainTokenIndex(tokenMainIndex);\r\n  };\r\n\r\n  const fetchAuctionDetail = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = (await rf\r\n        .getRequest('AuctionRequest')\r\n        .getAuctionDetail(auctionId)) as any;\r\n      if (response) {\r\n        setAuction(response);\r\n        onHandleAuctionDetail(response);\r\n      }\r\n    } catch (error: any) {\r\n      setLoading(false);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [auctionId]);\r\n\r\n  const getBalancesCurrentPool = useCallback(async () => {\r\n    const lbpAuction = new Auction(auction);\r\n\r\n    const pool = lbpAuction.getPool();\r\n    const poolNetwork = lbpAuction.getNetwork();\r\n    const tokenBaseInPool = lbpAuction.getTokenBase();\r\n    const tokenBaseIndex = lbpAuction.getTokenBaseIndex();\r\n    const tokenMainInPool = lbpAuction.getTokenMain();\r\n    const tokenMainIndex = lbpAuction.getTokenMainIndex();\r\n\r\n    if (!pool) {\r\n      return;\r\n    }\r\n\r\n    const balances = await getCurrentBalances(\r\n      pool.onchainId,\r\n      poolNetwork,\r\n      pool.vault.address,\r\n    );\r\n\r\n    const balanceBaseToken = convertWeiToDec(\r\n      balances[tokenBaseIndex],\r\n      tokenBaseInPool?.decimals,\r\n    );\r\n    const balanceMainToken = convertWeiToDec(\r\n      balances[tokenMainIndex],\r\n      tokenMainInPool?.decimals,\r\n    );\r\n    const balanceTokens = [];\r\n    balanceTokens[tokenBaseIndex] = balanceBaseToken;\r\n    balanceTokens[tokenMainIndex] = balanceMainToken;\r\n    setBalanceCurrent(balanceTokens);\r\n  }, [auction]);\r\n\r\n  const fetchBalancesPool = async () => {\r\n    await getBalancesCurrentPool();\r\n    await getInfoJoinExitHistoryPool();\r\n  };\r\n\r\n  const getWeightsAndSwapFeePool = async () => {\r\n    const { pool, network: poolNetwork } = auction;\r\n    if (!pool) {\r\n      return;\r\n    }\r\n    try {\r\n      const calls = [\r\n        {\r\n          address: pool.address,\r\n          name: 'getNormalizedWeights',\r\n          params: [],\r\n        },\r\n        {\r\n          address: pool.address,\r\n          name: 'getSwapFeePercentage',\r\n          params: [],\r\n        },\r\n      ];\r\n\r\n      const [normalizedWeights, swapFeePercentage] = await multicall(\r\n        abi['LBP'],\r\n        calls,\r\n        poolNetwork,\r\n      );\r\n\r\n      const weights = normalizedWeights[0];\r\n      setTokenWeights(weights);\r\n      setSwapFee(convertWeiToDec(swapFeePercentage));\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  const getInfoJoinExitHistoryPool = async () => {\r\n    const infoData = await getInfoJoinExitPool(auction);\r\n\r\n    if (infoData) {\r\n      setIsExit(infoData.isExit);\r\n      setBalanceExit(infoData.balanceExit);\r\n      setBalanceStart(infoData.balanceStart);\r\n    }\r\n  };\r\n\r\n  const getInfosPool = async () => {\r\n    await getBalancesCurrentPool();\r\n    await getInfoJoinExitHistoryPool();\r\n    await getWeightsAndSwapFeePool();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!auction) return;\r\n    appRetry(getInfosPool()).then();\r\n    const getInfos = setInterval(() => appRetry(getInfosPool()), 300000);\r\n    return () => {\r\n      clearInterval(getInfos);\r\n    };\r\n  }, [auction]);\r\n\r\n  useEffect(() => {\r\n    fetchAuctionDetail();\r\n  }, [auctionId]);\r\n\r\n  const isPoolEnd = useMemo(\r\n    () =>\r\n      tokensUsdPrice[getSymbolBaseToken(baseToken?.symbol?.toLowerCase())] *\r\n        Number(balanceCurrent[baseTokenIndex]) <\r\n      1,\r\n    [tokensUsdPrice, balanceCurrent, baseTokenIndex, baseToken],\r\n  );\r\n\r\n  const mainTokenReleased = useMemo(() => {\r\n    if (isExit) {\r\n      return +balanceStart[mainTokenIndex] - +balanceExit[mainTokenIndex];\r\n    }\r\n\r\n    if (!isExit && isPoolEnd) {\r\n      return 0;\r\n    }\r\n    return +balanceStart[mainTokenIndex] - +balanceCurrent[mainTokenIndex];\r\n  }, [balanceCurrent, balanceStart, isExit, balanceExit, isPoolEnd]);\r\n\r\n  const baseTokenAccrued = useMemo(() => {\r\n    if (isExit) {\r\n      return +balanceExit[baseTokenIndex] - +balanceStart[baseTokenIndex];\r\n    }\r\n\r\n    if (!isExit && isPoolEnd) {\r\n      return 0;\r\n    }\r\n    return +balanceCurrent[baseTokenIndex] - +balanceStart[baseTokenIndex];\r\n  }, [balanceStart, balanceCurrent, isExit, balanceExit, isPoolEnd]);\r\n\r\n  const priceTokenMain = useMemo(() => {\r\n    if (isExit) {\r\n      return mainToken.latestPriceRate.toString() || '0';\r\n    }\r\n\r\n    return (\r\n      calcSpotPrice(\r\n        balanceCurrent[baseTokenIndex],\r\n        tokenWeights[baseTokenIndex]?.toString(),\r\n        balanceCurrent[mainTokenIndex],\r\n        tokenWeights[mainTokenIndex]?.toString(),\r\n        swapFee,\r\n      ) || '0'\r\n    );\r\n  }, [\r\n    balanceCurrent,\r\n    isExit,\r\n    mainToken,\r\n    tokenWeights,\r\n    swapFee,\r\n    baseTokenIndex,\r\n    mainTokenIndex,\r\n  ]);\r\n\r\n  const _renderLBPDetail = () => {\r\n    if (!auction) {\r\n      return <NoResult />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"lbp-detail\">\r\n          <div className=\"detail-body\">\r\n            <div className=\"detail-content\">\r\n              <PartAuctionDetail\r\n                auction={auction}\r\n                mainToken={mainToken}\r\n                baseToken={baseToken}\r\n                baseTokenIndex={baseTokenIndex}\r\n                mainTokenIndex={mainTokenIndex}\r\n                mainTokenReleased={mainTokenReleased}\r\n                baseTokenAccrued={baseTokenAccrued}\r\n                balanceStart={balanceStart}\r\n                balanceCurrent={balanceCurrent}\r\n                priceTokenMain={priceTokenMain}\r\n                fetchData={fetchBalancesPool}\r\n                tokenWeights={tokenWeights}\r\n                swapFee={swapFee}\r\n                isEnabledSwap={false}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const _renderAuctionDetail = () => {\r\n    if (!auction) {\r\n      return <NoResult />;\r\n    }\r\n    return (\r\n      <Box>\r\n        <Box\r\n          __css={{ position: 'relative', zIndex: 2, marginX: 'auto' }}\r\n          maxW={'850px'}\r\n        >\r\n          <Card>\r\n            <Box mb={6}>\r\n              <PartAuctionIntro\r\n                auction={auction}\r\n                mainToken={mainToken}\r\n                baseToken={baseToken}\r\n                mainTokenIndex={mainTokenIndex}\r\n                mainTokenReleased={mainTokenReleased}\r\n                baseTokenAccrued={baseTokenAccrued}\r\n                balanceStart={balanceStart}\r\n                priceTokenMain={priceTokenMain}\r\n                balanceCurrent={balanceCurrent}\r\n                baseTokenIndex={baseTokenIndex}\r\n                fetchData={fetchBalancesPool}\r\n              />\r\n            </Box>\r\n            <Box mb={6}>\r\n              <Card variant=\"sub\">\r\n                <PartAuctionChart\r\n                  auction={auction}\r\n                  mainToken={mainToken}\r\n                  baseToken={baseToken}\r\n                  baseTokenIndex={baseTokenIndex}\r\n                  mainTokenIndex={mainTokenIndex}\r\n                  balanceStart={balanceStart}\r\n                  balanceCurrent={balanceCurrent}\r\n                  tokenWeights={tokenWeights}\r\n                  swapFee={swapFee}\r\n                />\r\n              </Card>\r\n            </Box>\r\n            <Box mb={6}>\r\n              <PartAuctionDetail\r\n                auction={auction}\r\n                mainToken={mainToken}\r\n                baseToken={baseToken}\r\n                baseTokenIndex={baseTokenIndex}\r\n                mainTokenIndex={mainTokenIndex}\r\n                mainTokenReleased={mainTokenReleased}\r\n                baseTokenAccrued={baseTokenAccrued}\r\n                balanceStart={balanceStart}\r\n                balanceCurrent={balanceCurrent}\r\n                priceTokenMain={priceTokenMain}\r\n                fetchData={fetchBalancesPool}\r\n                tokenWeights={tokenWeights}\r\n                swapFee={swapFee}\r\n                isEnabledSwap={false}\r\n              />\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <div className=\"projectDetail\">\r\n        {loading ? (\r\n          <div className=\"loadingPage\">\r\n            <LoadingIcon />\r\n          </div>\r\n        ) : (\r\n          <>{_renderAuctionDetail()}</>\r\n        )}\r\n      </div>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default LBPDetails;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Auctions\\part\\PartAuctionChart.tsx",["976"],"import { FC, useEffect, useState } from 'react';\r\nimport styles from 'src/styles/pages/LBPDetails/LBPChart.module.scss';\r\nimport {\r\n  AuctionPriceChartData,\r\n  calcAuctionChartData,\r\n  calcSpotPrice,\r\n  getCurrentAuctionTime,\r\n  getNormalizedWeight,\r\n  IAuctionResponseType,\r\n  IAuctionSnapshotResponseType,\r\n  ITokenBase,\r\n  ITokenMain,\r\n} from 'src/utils/utils-auction';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport moment from 'moment';\r\nimport { convertWeiToDec } from 'src/utils/utils-formats';\r\nimport BigNumber from 'bignumber.js';\r\nimport AuctionPriceChart from 'src/pages/PageCreateAuction/part/AuctionPriceChart';\r\n\r\ninterface PartAuctionChartProps {\r\n  auction: IAuctionResponseType;\r\n  mainToken: ITokenMain;\r\n  baseToken: ITokenBase;\r\n  mainTokenIndex: number;\r\n  baseTokenIndex: number;\r\n  balanceStart: string[];\r\n  balanceCurrent: string[];\r\n  tokenWeights: string[];\r\n  swapFee: string;\r\n}\r\n\r\nconst PartAuctionChart: FC<PartAuctionChartProps> = ({\r\n  auction,\r\n  mainToken,\r\n  baseToken,\r\n  mainTokenIndex,\r\n  baseTokenIndex,\r\n  balanceStart,\r\n  balanceCurrent,\r\n  tokenWeights,\r\n  swapFee,\r\n}) => {\r\n  const [chartData, setChartData] = useState<AuctionPriceChartData[]>([]);\r\n\r\n  const getCurrentAuctionData = (): AuctionPriceChartData => {\r\n    const currentTime = getCurrentAuctionTime().valueOf();\r\n    const currentPrice =\r\n      calcSpotPrice(\r\n        +balanceCurrent[baseTokenIndex],\r\n        +convertWeiToDec(tokenWeights[baseTokenIndex]?.toString()),\r\n        +balanceCurrent[mainTokenIndex],\r\n        +convertWeiToDec(tokenWeights[mainTokenIndex]?.toString()),\r\n        swapFee,\r\n      ) || '0';\r\n\r\n    return {\r\n      time: currentTime,\r\n      value: currentPrice,\r\n    };\r\n  };\r\n\r\n  const generateAuctionChartData = (\r\n    historyData: IAuctionSnapshotResponseType[] | undefined,\r\n  ): AuctionPriceChartData[] => {\r\n    if (!historyData || !historyData.length) {\r\n      return generateAuctionChartDataWithoutSwap();\r\n    }\r\n    return generateAuctionChartDataWithSwap(historyData);\r\n  };\r\n\r\n  const generateAuctionChartDataWithoutSwap = (): AuctionPriceChartData[] => {\r\n    const currentAuctionData = getCurrentAuctionData();\r\n    const predictedPriceWithoutSwapData = calcAuctionChartData(\r\n      +balanceStart[baseTokenIndex],\r\n      +balanceStart[mainTokenIndex],\r\n      +convertWeiToDec(auction.pool.startWeights[mainTokenIndex].toString()),\r\n      +convertWeiToDec(auction.pool.endWeights[mainTokenIndex].toString()),\r\n      new Date(auction.pool.startTime * 1000),\r\n      new Date(auction.pool.endTime * 1000),\r\n      Number(auction.pool.swapFee),\r\n    );\r\n\r\n    const result: AuctionPriceChartData[] = [...predictedPriceWithoutSwapData];\r\n    if (currentAuctionData.time < predictedPriceWithoutSwapData[0].time) {\r\n      // if currentTime is before startTime => replace currentPrice to the first value of chart => synchronize to price in Overview\r\n      result[0] = currentAuctionData;\r\n      return result;\r\n    }\r\n    result.push(currentAuctionData);\r\n    result.sort(\r\n      (a: AuctionPriceChartData, b: AuctionPriceChartData) => +a.time - +b.time,\r\n    );\r\n    return result;\r\n  };\r\n\r\n  const generateAuctionChartDataBeforeSwap = (\r\n    historyData: AuctionPriceChartData[],\r\n  ): AuctionPriceChartData[] => {\r\n    const firstHistoryData = historyData[0];\r\n    const firstHistoryWeight = getNormalizedWeight(\r\n      +firstHistoryData.time / 1000,\r\n      {\r\n        startTime: auction.pool.createTime,\r\n        endTime: auction.pool.endTime,\r\n        startWeight: new BigNumber(\r\n          auction.pool.startWeights[mainTokenIndex],\r\n        ).toString(),\r\n        endWeight: new BigNumber(\r\n          auction.pool.endWeights[mainTokenIndex],\r\n        ).toString(),\r\n      },\r\n    );\r\n    const beforeSwapPriceData = calcAuctionChartData(\r\n      +balanceStart[baseTokenIndex],\r\n      +balanceStart[mainTokenIndex],\r\n      +convertWeiToDec(auction.pool.startWeights[mainTokenIndex].toString()),\r\n      +convertWeiToDec(firstHistoryWeight.toString()),\r\n      new Date(\r\n        moment(auction.pool.startTime * 1000)\r\n          .startOf('hour')\r\n          .valueOf(),\r\n      ),\r\n      new Date(moment(firstHistoryData.time).startOf('hour').valueOf()),\r\n      +swapFee,\r\n    );\r\n    beforeSwapPriceData.pop(); // remove last data, instead first data of history\r\n\r\n    return beforeSwapPriceData;\r\n  };\r\n\r\n  const generateAuctionChartDataPredicted = (\r\n    historyData: AuctionPriceChartData[],\r\n  ): AuctionPriceChartData[] => {\r\n    const currentAuctionData = getCurrentAuctionData();\r\n\r\n    const lastHistoryData = historyData[historyData.length - 1];\r\n    const lastHistoryWeight = getNormalizedWeight(\r\n      Number(lastHistoryData.time) / 1000,\r\n      {\r\n        startTime: auction.pool.createTime,\r\n        endTime: auction.pool.endTime,\r\n        startWeight: new BigNumber(\r\n          auction.pool.startWeights[mainTokenIndex],\r\n        ).toString(),\r\n        endWeight: new BigNumber(\r\n          auction.pool.endWeights[mainTokenIndex],\r\n        ).toString(),\r\n      },\r\n    );\r\n\r\n    const predictedPriceData = calcAuctionChartData(\r\n      +balanceCurrent[baseTokenIndex],\r\n      +balanceCurrent[mainTokenIndex],\r\n      +convertWeiToDec(lastHistoryWeight.toString()),\r\n      +convertWeiToDec(auction.pool.endWeights[mainTokenIndex].toString()),\r\n      new Date(moment(lastHistoryData.time).startOf('hour').valueOf()),\r\n      new Date(auction.pool.endTime * 1000),\r\n      +swapFee,\r\n    );\r\n\r\n    predictedPriceData.shift(); // remove first data, instead last data of history\r\n\r\n    predictedPriceData.push(currentAuctionData);\r\n    predictedPriceData.sort(\r\n      (a: AuctionPriceChartData, b: AuctionPriceChartData) => +a.time - +b.time,\r\n    );\r\n\r\n    return predictedPriceData;\r\n  };\r\n\r\n  const generateAuctionChartDataWithSwap = (\r\n    historyData: IAuctionSnapshotResponseType[],\r\n  ): AuctionPriceChartData[] => {\r\n    const historyAuctionData: AuctionPriceChartData[] = historyData.map(\r\n      (item: IAuctionSnapshotResponseType) => ({\r\n        time: item.timestamp * 1000,\r\n        value: +item.avgPrice,\r\n      }),\r\n    );\r\n\r\n    const beforeSwapPriceData =\r\n      generateAuctionChartDataBeforeSwap(historyAuctionData);\r\n    const predictedPriceData =\r\n      generateAuctionChartDataPredicted(historyAuctionData);\r\n\r\n    return [\r\n      ...beforeSwapPriceData,\r\n      ...historyAuctionData,\r\n      ...predictedPriceData,\r\n    ];\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    if (\r\n      !auction ||\r\n      balanceCurrent.length <= 0 ||\r\n      tokenWeights.length <= 0 ||\r\n      !swapFee\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const historySnapshots = await rf\r\n      .getRequest('AuctionRequest')\r\n      .getPriceSnapshotOfPool(auction.pool.id, mainToken.address);\r\n\r\n    const chartData = generateAuctionChartData(historySnapshots.docs);\r\n    setChartData(chartData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [auction, balanceCurrent, tokenWeights, swapFee]);\r\n\r\n  return (\r\n    <AuctionPriceChart\r\n      id=\"historySwap\"\r\n      priceData={chartData}\r\n      symbol={{\r\n        main: mainToken.symbol,\r\n        base: baseToken.symbol,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PartAuctionChart;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Auctions\\part\\PartAuctionDetail.tsx",["977","978","979","980"],"import { CopyIcon, InfoOutlineIcon, LinkIcon } from '@chakra-ui/icons';\r\nimport BigNumber from 'bignumber.js';\r\nimport React, { FC, useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  DiscordIcon,\r\n  MediumIcon,\r\n  TelegramIcon,\r\n  TwitterIcon,\r\n  WebsiteGrayIcon,\r\n} from 'src/assets/icons';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport config from 'src/config';\r\nimport { RootState } from 'src/store';\r\nimport { Auction, IAuctionResponseType } from 'src/utils/auction';\r\nimport { ITokenBase, ITokenMain } from 'src/utils/utils-auction';\r\nimport {\r\n  formatNumber,\r\n  formatShortAddress,\r\n  formatTimestamp,\r\n  formatToPercent,\r\n  formatWeiNumber,\r\n} from 'src/utils/utils-formats';\r\nimport { copyToClipboard, roundNumber } from 'src/utils/utils-helpers';\r\nimport { checkIsTokenBase, getSymbolBaseToken } from 'src/utils/utils-token';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Divider,\r\n  Flex,\r\n  Heading,\r\n  Image,\r\n  Stack,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Tooltip, Tag, TagLabel\r\n} from '@chakra-ui/react';\r\nimport Card from 'src/components/Card';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { StatusLBP } from 'src/pages/PageAuctionList';\r\n\r\ninterface IPartLBPDetail {\r\n  auction: IAuctionResponseType;\r\n  mainToken: ITokenMain;\r\n  baseToken: ITokenBase;\r\n  mainTokenIndex: number;\r\n  baseTokenIndex: number;\r\n  baseTokenAccrued: number;\r\n  mainTokenReleased: number;\r\n  balanceStart: string[];\r\n  balanceCurrent: string[];\r\n  tokenWeights: string[];\r\n  swapFee: string;\r\n  priceTokenMain: string;\r\n  isEnabledSwap: boolean;\r\n  fetchData: () => void;\r\n}\r\n\r\nconst PartAuctionDetail: FC<IPartLBPDetail> = ({\r\n  auction,\r\n  mainToken,\r\n  baseToken,\r\n  baseTokenIndex,\r\n  mainTokenIndex,\r\n  baseTokenAccrued,\r\n  mainTokenReleased,\r\n  balanceStart,\r\n  balanceCurrent,\r\n  swapFee,\r\n}) => {\r\n  const { pool, network: poolNetwork, socialLinks, ownerAddress } = auction;\r\n\r\n  const lbpAuction = useMemo(() => new Auction(auction), [auction]);\r\n  const poolId = lbpAuction.getPoolId();\r\n\r\n  const { blockExplorer } = config.networks[poolNetwork];\r\n\r\n  const blockExplorerUrl = blockExplorer.url;\r\n  const iconExplorerUrl = blockExplorer.icon;\r\n\r\n  const { tokensUsdPrice } = useSelector((state: RootState) => state.metadata);\r\n\r\n  const priceBaseToken = useMemo(() => {\r\n    return tokensUsdPrice[getSymbolBaseToken(baseToken?.symbol?.toLowerCase())];\r\n  }, [tokensUsdPrice, baseToken]);\r\n\r\n  const totalMainTokenRelease = useMemo(() => {\r\n    if (+mainTokenReleased < 0) {\r\n      return 0;\r\n    }\r\n\r\n    return roundNumber(\r\n      mainTokenReleased,\r\n      BigNumber.ROUND_DOWN,\r\n      mainToken.decimals,\r\n    );\r\n  }, [mainTokenReleased, mainToken]);\r\n\r\n  const _renderDetailsTab = () => {\r\n    if (!pool) {\r\n      return;\r\n    }\r\n    const logoNetwork = config.networks[poolNetwork].icon;\r\n    const nameBlockExplorer = blockExplorer.name;\r\n    const { startTime, endTime, totalSwapVolume, endWeights, startWeights } =\r\n      pool;\r\n\r\n    const socialsMedia = [\r\n      {\r\n        icon: <TelegramIcon />,\r\n        label: 'Telegram',\r\n        link: socialLinks?.telegram,\r\n      },\r\n      {\r\n        icon: <TwitterIcon />,\r\n        label: 'Twitter',\r\n        link: socialLinks?.twitter,\r\n      },\r\n      {\r\n        icon: <WebsiteGrayIcon />,\r\n        label: 'Website',\r\n        link: socialLinks?.website,\r\n      },\r\n      {\r\n        icon: <DiscordIcon />,\r\n        label: 'Discord',\r\n        link: socialLinks?.discord,\r\n      },\r\n      {\r\n        icon: <MediumIcon />,\r\n        label: 'Medium',\r\n        link: socialLinks?.medium,\r\n      },\r\n    ];\r\n\r\n    const tokenNetworkLinks = [\r\n      {\r\n        icon: logoNetwork,\r\n        label: `${mainToken.symbol} Token on ${nameBlockExplorer}`,\r\n        link: blockExplorerUrl + 'address/' + mainToken.address,\r\n      },\r\n      {\r\n        icon: logoNetwork,\r\n        label: `Auction Owner on ${nameBlockExplorer}`,\r\n        link: blockExplorerUrl + 'address/' + ownerAddress,\r\n      },\r\n      {\r\n        icon: logoNetwork,\r\n        label: `Auction Address on ${nameBlockExplorer}`,\r\n        link: blockExplorerUrl + 'address/' + pool.address,\r\n      },\r\n    ];\r\n\r\n    const _renderSocialBlock = () => {\r\n      return (\r\n        <>\r\n          {socialsMedia.map((item, index) => (\r\n            <Card key={index} mb={2}>\r\n              <Flex ml={-2}>\r\n                <Flex pl={2} flexGrow={1} alignItems={'center'}>\r\n                  <Box mr={2}>{item.icon}</Box>\r\n                  <Text>{item.label}</Text>\r\n                </Flex>\r\n                <Box pl={2}>\r\n                  {item.link && item.link.length ? (\r\n                    <a\r\n                      href={item.link}\r\n                      target={'_blank'}\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      <LinkIcon />\r\n                    </a>\r\n                  ) : (\r\n                    <Text>No url</Text>\r\n                  )}\r\n                </Box>\r\n              </Flex>\r\n            </Card>\r\n          ))}\r\n        </>\r\n      );\r\n    };\r\n\r\n    const _renderTokenNetworkBlock = () => {\r\n      return (\r\n        <>\r\n          {tokenNetworkLinks.map((tokenNetwork, index) => (\r\n            <Card key={index} mb={2}>\r\n              <Flex ml={-2}>\r\n                <Flex pl={2} flexGrow={1} alignItems={'center'}>\r\n                  <Image w={6} mr={2} src={tokenNetwork.icon} alt=\"\" />\r\n                  <Text>{tokenNetwork.label}</Text>\r\n                </Flex>\r\n                <Box pl={2}>\r\n                  {tokenNetwork.link && tokenNetwork.link.length && (\r\n                    <a\r\n                      href={tokenNetwork.link}\r\n                      target={'_blank'}\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      <LinkIcon />\r\n                    </a>\r\n                  )}\r\n                </Box>\r\n              </Flex>\r\n            </Card>\r\n          ))}\r\n        </>\r\n      );\r\n    };\r\n\r\n    const _renderLBPDetailsBlock = () => {\r\n      return (\r\n        <>\r\n          <Flex flexWrap={'wrap'} ml={-2}>\r\n            <Box pl={2} flexGrow={1} mb={2}>\r\n              <Card>\r\n                <Flex ml={-2}>\r\n                  <Box pl={2} flexGrow={1}>\r\n                    <Text>Start Date</Text>\r\n                  </Box>\r\n                  <Box pl={2}>\r\n                    <Text>\r\n                      {formatTimestamp(startTime * 1000, 'HH:mm MMM DD, YYYY')}\r\n                    </Text>\r\n                  </Box>\r\n                </Flex>\r\n              </Card>\r\n            </Box>\r\n            <Box pl={2} flexGrow={1} mb={2}>\r\n              <Card>\r\n                <Flex ml={-2}>\r\n                  <Box pl={2} flexGrow={1}>\r\n                    <Text>End Date</Text>\r\n                  </Box>\r\n                  <Box pl={2}>\r\n                    {formatTimestamp(endTime * 1000, 'HH:mm MMM DD, YYYY')}\r\n                  </Box>\r\n                </Flex>\r\n              </Card>\r\n            </Box>\r\n          </Flex>\r\n        </>\r\n      );\r\n    };\r\n\r\n    const _renderLBPStatistic = () => {\r\n      return (\r\n        <Flex flexWrap={'wrap'} ml={-2}>\r\n          <Box pl={2} w={{ base: 'full', md: '50%' }} mb={2}>\r\n            <Card>\r\n              <Flex ml={-2}>\r\n                <Box pl={2} flexGrow={1}>\r\n                  <Text>Start Balances</Text>\r\n                </Box>\r\n                <Stack pl={2} alignItems={'flex-end'}>\r\n                  <Flex alignItems={'center'}>\r\n                    <Text>{formatNumber(balanceStart[mainTokenIndex])}</Text>\r\n                    <Image ml={2} w={6} src={mainToken.icon} alt=\"\" />\r\n                  </Flex>\r\n                  <Flex alignItems={'center'}>\r\n                    <Text>{formatNumber(balanceStart[baseTokenIndex])}</Text>\r\n                    <Image ml={2} w={6} src={baseToken.icon} alt=\"\" />\r\n                  </Flex>\r\n                </Stack>\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n          <Box pl={2} w={{ base: 'full', md: '50%' }} mb={2}>\r\n            <Card>\r\n              <Flex ml={-2}>\r\n                <Box pl={2} flexGrow={1}>\r\n                  <Text>Current Balances</Text>\r\n                </Box>\r\n                <Stack pl={2} alignItems={'flex-end'}>\r\n                  <Flex alignItems={'center'}>\r\n                    <Text>{formatNumber(balanceCurrent[mainTokenIndex])}</Text>\r\n                    <Image ml={2} w={6} src={mainToken.icon} alt=\"\" />\r\n                  </Flex>\r\n                  <Flex alignItems={'center'}>\r\n                    <Text>{formatNumber(balanceCurrent[baseTokenIndex])}</Text>\r\n                    <Image ml={2} w={6} src={baseToken.icon} alt=\"\" />\r\n                  </Flex>\r\n                </Stack>\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n          <Box pl={2} w={{ base: 'full', md: '50%' }} mb={2}>\r\n            <Card>\r\n              <Flex ml={-2}>\r\n                <Box pl={2} flexGrow={1}>\r\n                  <Text>Main Tokens Released</Text>\r\n                </Box>\r\n                <Flex pl={2} alignItems={'center'}>\r\n                  <Text>{formatNumber(totalMainTokenRelease)}</Text>\r\n                  <Image ml={2} w={6} src={mainToken.icon} alt=\"\" />\r\n                </Flex>\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n          <Box pl={2} w={{ base: 'full', md: '50%' }} mb={2}>\r\n            <Card>\r\n              <Flex ml={-2}>\r\n                <Box pl={2} flexGrow={1}>\r\n                  <Text>Base Tokens Accrued</Text>\r\n                </Box>\r\n                <Flex pl={2} alignItems={'center'}>\r\n                  <Text>\r\n                    {formatNumber(\r\n                      roundNumber(\r\n                        baseTokenAccrued,\r\n                        BigNumber.ROUND_DOWN,\r\n                        baseToken.decimals,\r\n                      ),\r\n                    )}\r\n                  </Text>\r\n                  <Image ml={2} w={6} src={baseToken.icon} alt=\"\" />\r\n                </Flex>\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n        </Flex>\r\n      );\r\n    };\r\n\r\n    const _renderLBPSettingBlock = () => {\r\n      return (\r\n        <Flex flexWrap={'wrap'} ml={-2}>\r\n          <Box pl={2} w={{ base: 'full', md: '50%' }} mb={2}>\r\n            <Card>\r\n              <Flex ml={-2}>\r\n                <Box pl={2} flexGrow={1}>\r\n                  <Text>Start Weights</Text>\r\n                </Box>\r\n                <Stack pl={2} alignItems={'flex-end'}>\r\n                  <Flex alignItems={'center'}>\r\n                    <Text>\r\n                      {formatToPercent(\r\n                        formatWeiNumber(startWeights[mainTokenIndex]),\r\n                      )}\r\n                    </Text>\r\n                    <Image ml={2} w={6} src={mainToken.icon} alt=\"\" />\r\n                  </Flex>\r\n                  <Flex alignItems={'center'}>\r\n                    <Text>\r\n                      +{' '}\r\n                      {formatToPercent(\r\n                        formatWeiNumber(startWeights[baseTokenIndex]),\r\n                      )}\r\n                    </Text>\r\n                    <Image ml={2} w={6} src={baseToken.icon} alt=\"\" />\r\n                  </Flex>\r\n                </Stack>\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n\r\n          <Box pl={2} w={{ base: 'full', md: '50%' }} mb={2}>\r\n            <Card>\r\n              <Flex ml={-2}>\r\n                <Box pl={2} flexGrow={1}>\r\n                  <Text>End Weights</Text>\r\n                </Box>\r\n                <Stack pl={2} alignItems={'flex-end'}>\r\n                  <Flex alignItems={'center'}>\r\n                    <Text>\r\n                      {formatToPercent(\r\n                        formatWeiNumber(endWeights[mainTokenIndex]),\r\n                      )}\r\n                    </Text>\r\n                    <Image ml={2} w={6} src={mainToken.icon} alt=\"\" />\r\n                  </Flex>\r\n                  <Flex alignItems={'center'}>\r\n                    <Text>\r\n                      +{' '}\r\n                      {formatToPercent(\r\n                        formatWeiNumber(endWeights[baseTokenIndex]),\r\n                      )}\r\n                    </Text>\r\n                    <Image ml={2} w={6} src={baseToken.icon} alt=\"\" />\r\n                  </Flex>\r\n                </Stack>\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n        </Flex>\r\n      );\r\n    };\r\n\r\n    const _renderOwnerRightBlock = () => {\r\n      return (\r\n        <Flex flexWrap={'wrap'} ml={-2}>\r\n          <Box pl={2} flexGrow={1} mb={2}>\r\n            <Card>\r\n              <Flex alignItems={'center'}>\r\n                <Box pl={2} flexGrow={1}>\r\n                  <Text>Total Volume</Text>\r\n                </Box>\r\n                <Box pl={2}>\r\n                  <Text>\r\n                    $\r\n                    {formatNumber(\r\n                      new BigNumber(+totalSwapVolume)\r\n                        .multipliedBy(+priceBaseToken)\r\n                        .toFixed(6, BigNumber.ROUND_DOWN),\r\n                    )}\r\n                  </Text>\r\n                </Box>\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n          <Box pl={2} flexGrow={1} mb={2}>\r\n            <Card>\r\n              <Flex alignItems={'center'}>\r\n                <Box pl={2} flexGrow={1}>\r\n                  <Text>\r\n                    Swap Fee (Collected by {lbpAuction.getName()} Project)\r\n                  </Text>\r\n                </Box>\r\n                <Box pl={2}>\r\n                  <Text>{formatToPercent(swapFee)}</Text>\r\n                </Box>\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n        </Flex>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <Card variant=\"sub\">\r\n        <Stack>\r\n          <Flex alignItems={'center'}>\r\n            <Image w={6} mr={2} src={auction.logoUrl} />\r\n            <Heading as={'h4'} mr={2} fontSize={'lg'}>\r\n              {lbpAuction.getName()}\r\n            </Heading>\r\n            <Badge variant=\"subtle\" bg={'gray.400'} borderRadius={'lg'} p={1}>\r\n              {pool.symbol}\r\n            </Badge>\r\n          </Flex>\r\n          <Flex alignItems={'center'}>\r\n            <Image w={6} mr={2} src={logoNetwork} alt=\"\" />\r\n            <Text>{formatShortAddress(mainToken.address)}</Text>\r\n            <AppButton\r\n              variant=\"no-effects\"\r\n              onClick={() => copyToClipboard(mainToken.address)}\r\n            >\r\n              <CopyIcon />\r\n            </AppButton>\r\n          </Flex>\r\n        </Stack>\r\n\r\n        <Divider my={6} />\r\n\r\n        <Stack mb={4} spacing={4}>\r\n          <Box>\r\n            <Text fontSize={'lg'} fontWeight={'medium'} mb={2}>\r\n              Auction Description\r\n            </Text>\r\n            <Box whiteSpace={'pre-wrap'}\r\n              dangerouslySetInnerHTML={{ __html: auction.description }}\r\n            ></Box>\r\n          </Box>\r\n          <Stack>\r\n            <Box>{_renderSocialBlock()}</Box>\r\n            <Box>{_renderTokenNetworkBlock()}</Box>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        <Stack mb={4} spacing={4}>\r\n          <Flex alignItems={'center'}>\r\n            <Text fontSize={'lg'} fontWeight={'medium'} mr={4}>\r\n              Auction Details\r\n            </Text>\r\n            <StatusLBP status={auction.status || 0} />\r\n          </Flex>\r\n          <Stack>\r\n            <Box>{_renderLBPDetailsBlock()}</Box>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        <Stack mb={4} spacing={4}>\r\n          <Flex alignItems={'center'}>\r\n            <Text fontSize={'lg'} fontWeight={'medium'} mr={4}>\r\n              Auction Statistics\r\n            </Text>\r\n          </Flex>\r\n          <Stack>\r\n            <Box>{_renderLBPStatistic()}</Box>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        <Stack mb={4} spacing={4}>\r\n          <Flex alignItems={'center'}>\r\n            <Text fontSize={'lg'} fontWeight={'medium'} mr={4}>\r\n              Auction Settings\r\n            </Text>\r\n          </Flex>\r\n          <Stack>\r\n            <Box>{_renderLBPSettingBlock()}</Box>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        <Stack mb={4} spacing={4}>\r\n          <Flex alignItems={'center'}>\r\n            <Text fontSize={'lg'} fontWeight={'medium'} mr={4}>\r\n              Owner rights\r\n            </Text>\r\n          </Flex>\r\n          <Flex flexDirection={['column', 'row']}>\r\n            <Tooltip label={\"Allows the Auction owner to stop the Auction early while retaining the ability to restart it.\"}>\r\n              <Tag size=\"lg\" colorScheme=\"blue.500\" borderRadius=\"full\" width={\"max-content\"}>\r\n                <TagLabel>Pause swapping <InfoOutlineIcon ml={2} /></TagLabel>\r\n              </Tag>\r\n            </Tooltip>\r\n\r\n            <Tooltip label={\"Allows the Auction owner to withdraw liquidity at any point during the LBP.\"}>\r\n              <Tag size=\"lg\" colorScheme=\"blue.500\" borderRadius=\"full\" ml={[0, 5]} width={\"max-content\"} mt={[3, 0]}>\r\n                <TagLabel>Pull liquidity <InfoOutlineIcon ml={2} /></TagLabel>\r\n              </Tag>\r\n            </Tooltip>\r\n          </Flex>\r\n          <Stack>\r\n            <Box>{_renderOwnerRightBlock()}</Box>\r\n          </Stack>\r\n        </Stack>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  const getPrice = (pool: any) => {\r\n    if (checkIsTokenBase(pool.tokenIn.address, poolNetwork)) {\r\n      return `${formatNumber(+pool.tokenAmountIn / +pool.tokenAmountOut)} ${\r\n        pool.tokenIn.symbol\r\n      }`;\r\n    }\r\n\r\n    return `${formatNumber(+pool.tokenAmountOut / +pool.tokenAmountIn)} ${\r\n      pool.tokenOut.symbol\r\n    }`;\r\n  };\r\n\r\n  const paramsHistory = useMemo(() => {\r\n    return {\r\n      network: poolNetwork,\r\n      poolId: poolId,\r\n    };\r\n  }, [poolNetwork, poolId]);\r\n\r\n  const _renderHistoryTab = () => {\r\n    const getDataHistory = (payload: any) => {\r\n      if (!payload.poolId) {\r\n        return;\r\n      }\r\n\r\n      return rf.getRequest('AuctionRequest').getSwapList(payload);\r\n    };\r\n\r\n    return (\r\n      <Card variant=\"sub\">\r\n        <Heading as={'h4'} mr={2} fontSize={'lg'}>\r\n          Swap History\r\n        </Heading>\r\n        <Divider my={6} />\r\n        <AppDataTable\r\n          limit={10}\r\n          requestParams={paramsHistory}\r\n          fetchData={(payload) => getDataHistory(payload)}\r\n          renderHeader={() => {\r\n            return (\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Time</Th>\r\n                  <Th>Type</Th>\r\n                  <Th>Input</Th>\r\n                  <Th>Output</Th>\r\n                  <Th>Price</Th>\r\n                  <Th>Wallet</Th>\r\n                </Tr>\r\n              </Thead>\r\n            );\r\n          }}\r\n          renderBody={(data: any[]) => {\r\n            return (\r\n              <Tbody>\r\n                {data.map((swap: any) => (\r\n                  <Tr key={swap.id}>\r\n                    <Td>\r\n                      {formatTimestamp(\r\n                        swap.timestamp * 1000,\r\n                        'MMM DD, YYYY, HH:mm A',\r\n                      )}\r\n                    </Td>\r\n                    <Td\r\n                      color={\r\n                        !!checkIsTokenBase(swap.tokenOut.address, swap.network)\r\n                          ? 'red.500'\r\n                          : 'green.500'\r\n                      }\r\n                    >\r\n                      {!!checkIsTokenBase(swap.tokenOut.address, swap.network)\r\n                        ? 'Sell'\r\n                        : 'Buy'}\r\n                    </Td>\r\n                    <Td>\r\n                      {formatNumber(swap.tokenAmountIn, 8)}{' '}\r\n                      {swap.tokenIn.symbol}\r\n                    </Td>\r\n                    <Td>\r\n                      {formatNumber(swap.tokenAmountOut, 8)}{' '}\r\n                      {swap.tokenOut.symbol}\r\n                    </Td>\r\n                    <Td>{getPrice(swap)}</Td>\r\n                    <Td>{formatShortAddress(swap.caller.address)}</Td>\r\n\r\n                    <Td>\r\n                      <a\r\n                        href={`${blockExplorerUrl}tx/${swap.txid}`}\r\n                        target=\"_blank\"\r\n                      >\r\n                        <Image w={4} src={iconExplorerUrl} alt=\"\" />\r\n                      </a>\r\n                    </Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n            );\r\n          }}\r\n        />\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        <Box mb={6}>{_renderDetailsTab()}</Box>\r\n        <Box mb={6}>{_renderHistoryTab()}</Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PartAuctionDetail;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Auctions\\part\\PartAuctionIntro.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\components\\AppCountDown.tsx",["981","982"],"import { useState, useEffect, FC, ReactNode } from 'react';\r\nimport 'src/styles/components/AppCountDown.scss';\r\nimport moment from 'moment';\r\n\r\ntype CountDownProps = {\r\n  endDate?: number;\r\n  render?: (duration: any) => ReactNode;\r\n  customClass?: string;\r\n};\r\n\r\nconst AppCountdown: FC<CountDownProps> = ({\r\n  endDate,\r\n  customClass = '',\r\n  render,\r\n}: CountDownProps) => {\r\n  const [duration, setDuration] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let countDownInterval = undefined as any;\r\n\r\n    if (endDate && endDate >= new Date().getTime()) {\r\n      countDownInterval = setInterval(function () {\r\n        const distance = endDate / 1000 - moment().unix();\r\n        setDuration(distance);\r\n        //do something later when date is reached\r\n        if (distance <= 0 && countDownInterval) {\r\n          clearInterval(countDownInterval);\r\n          window.location.reload();\r\n        }\r\n        //seconds\r\n      }, 1000);\r\n    } else {\r\n      setDuration(0);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(countDownInterval);\r\n    };\r\n  }, [endDate]);\r\n\r\n  if (!endDate) {\r\n    return <></>;\r\n  }\r\n\r\n  const _renderCountdownBox = () => {\r\n    return (\r\n      <div>\r\n        <ul className={`list-countdown ${customClass}`}>\r\n          {Math.floor(duration / (3600 * 24)) > 0 && (\r\n            <>\r\n              <li className=\"item\">\r\n                <div className=\"part\">\r\n                  <span>{Math.floor(duration / (3600 * 24))}</span>\r\n                  <span className=\"info\">Days</span>\r\n                </div>\r\n              </li>\r\n              <li className=\"colon\">:</li>\r\n            </>\r\n          )}\r\n\r\n          <li className=\"item\">\r\n            <div className=\"part\">\r\n              <span>{moment.utc(duration * 1000).format('HH')}</span>\r\n              <span className=\"info\">Hours</span>\r\n            </div>\r\n          </li>\r\n          <li className=\"colon\">:</li>\r\n          <li className=\"item\">\r\n            <div className=\"part\">\r\n              <span>{moment.utc(duration * 1000).format('mm')}</span>\r\n              <span className=\"info\">Minutes</span>\r\n            </div>\r\n          </li>\r\n          <li className=\"colon\">:</li>\r\n          <li className=\"item\">\r\n            <div className=\"part\">\r\n              <span>{moment.utc(duration * 1000).format('ss')}</span>\r\n              <span className=\"info\">Seconds</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return <>{render ? render(duration) : _renderCountdownBox()}</>;\r\n};\r\n\r\nexport default AppCountdown;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageDashboard.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PagePermissionList.tsx",["983","984","985","986"],"import { Box, Flex, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport AppSearch from 'src/components/AppSearch';\r\nimport Card from 'src/components/Card';\r\nimport BasePage from 'src/layouts/BasePage';\r\nimport rf from 'src/requests/RequestFactory';\r\n\r\ninterface ISearchPermission {\r\n  serviceName?: string;\r\n  permissionName?: string;\r\n}\r\n\r\nconst ListPermissions = () => {\r\n  const [search, setSearch] = useState({ permissionName: '' });\r\n\r\n  const _renderHeaderTable = () => {\r\n    return (\r\n      <Thead>\r\n        <Tr>\r\n          <Th>Permission Name</Th>\r\n          <Th>Service Name</Th>\r\n        </Tr>\r\n      </Thead>\r\n    );\r\n  };\r\n\r\n  const _renderBodyTable = (dataPermission: ISearchPermission[]) => {\r\n    return (\r\n      <Tbody>\r\n        {dataPermission.map((permission: ISearchPermission, index: number) => {\r\n          return (\r\n            <Tr key={index}>\r\n              <Td>{permission.permissionName}</Td>\r\n              <Td>{permission.serviceName}</Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    );\r\n  };\r\n\r\n  const fetchDataPermissions = async (payload: any) => {\r\n    try {\r\n      const dataResponse = await rf\r\n        .getRequest('AdminRequest')\r\n        .getPermissions(payload);\r\n      return { ...dataResponse, docs: dataResponse.docs };\r\n    } catch (error: any) {\r\n      console.log(error?.message);\r\n      return error;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <Card>\r\n        <Flex\r\n          my={'20px'}\r\n          justifyContent=\"space-between\"\r\n          flexDirection={isMobile ? 'column' : 'row'}\r\n        >\r\n          <Box>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                setSearch({ ...search, permissionName: e.target.value })\r\n              }\r\n            />\r\n          </Box>\r\n        </Flex>\r\n        <AppDataTable\r\n          requestParams={search as any}\r\n          limit={10}\r\n          renderHeader={_renderHeaderTable}\r\n          renderBody={_renderBodyTable}\r\n          fetchData={fetchDataPermissions}\r\n        />\r\n      </Card>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default ListPermissions;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageStaking.tsx",["987","988","989","990","991","992","993"],"import BasePage from 'src/layouts/BasePage';\r\nimport Card from 'src/components/Card';\r\nimport React, { useEffect, useState } from 'react';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport {\r\n  Text,\r\n  Heading,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Flex,\r\n  Box,\r\n  TagLabel,\r\n  Tag,\r\n  Avatar,\r\n  useColorModeValue,\r\n  SimpleGrid,\r\n} from '@chakra-ui/react';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport {\r\n  formatShortAddress,\r\n  formatTimestamp,\r\n  formatWeiNumber,\r\n} from 'src/utils/utils-formats';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { Link } from 'react-router-dom';\r\nimport AppButton from 'src/components/AppButton';\r\nimport AppLink from 'src/components/AppLink';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport {\r\n  BuniLogoIcon,\r\n  ProjectIcon,\r\n  StakingUserIcon,\r\n  UserIcon,\r\n} from 'src/assets/icons';\r\nimport config from 'src/config';\r\nimport { copyToClipboard } from 'src/utils/utils-helpers';\r\nimport { CopyIcon } from '@chakra-ui/icons';\r\nimport AppCardStatistic from 'src/components/AppCardStatistic';\r\nimport {\r\n  getStakedTokenSupply,\r\n  getStakeUnitPriceUsd,\r\n} from 'src/utils/utils-farm';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nexport const COMPETITION_STATUS = {\r\n  UPCOMING: 'Upcoming',\r\n  CREATED: 'Created',\r\n  CLOSED: 'Closed',\r\n  ENDED: 'Ended',\r\n  LIVE: 'Live',\r\n};\r\n\r\ninterface IPoolToken {\r\n  contractAddress: string;\r\n  color: string;\r\n  decimals: number;\r\n  denormWeight: number;\r\n  symbol: string;\r\n  weightPercent: number;\r\n}\r\n\r\ninterface IStakingPool {\r\n  id: string;\r\n  poolAddress: string;\r\n  networkAvailable: string;\r\n  title: string;\r\n  lpSymbol: string;\r\n  stakingTokenName: string;\r\n  stakingToken: string;\r\n  website: string;\r\n  logo: string;\r\n  isDisplay: string;\r\n  withdrawDelay: number;\r\n  rate: number;\r\n  poolTokens: IPoolToken[];\r\n  stakeType: string;\r\n  totalLiquidity: string;\r\n}\r\n\r\ninterface IStakingToken {\r\n  poolAddress: string;\r\n  stakingTokenAddress: string;\r\n  stakedAmount: string;\r\n  rate: number;\r\n  stakingTokenName: number;\r\n}\r\n\r\nexport interface IDiamondUser {\r\n  userAddress: string;\r\n  amountStaked: string;\r\n  stakingTokens: IStakingToken[];\r\n  rank: number;\r\n  competitionId: number;\r\n  lastTimeStaked: number;\r\n  finalizedTime: number;\r\n}\r\n\r\nexport interface ICompetition {\r\n  competitionId: number;\r\n  slotAuctioned: number;\r\n  slotDeranked: number;\r\n  startTime: number;\r\n  endTime: number;\r\n  status: string;\r\n  finalizedSnapshotId: number;\r\n  numCompetitors?: number;\r\n}\r\n\r\nexport const getColorStatus = (status: string) => {\r\n  switch (status) {\r\n    case COMPETITION_STATUS.CREATED:\r\n      return 'blue';\r\n    case COMPETITION_STATUS.CLOSED:\r\n      return 'red';\r\n    case COMPETITION_STATUS.ENDED:\r\n      return 'orange';\r\n    case COMPETITION_STATUS.UPCOMING:\r\n      return 'teal';\r\n    case COMPETITION_STATUS.LIVE:\r\n      return 'green';\r\n    default:\r\n      return 'black';\r\n  }\r\n};\r\n\r\nconst StakingPage = () => {\r\n  const [diamondUsers, setDiamondUsers] = useState<IDiamondUser[]>([]);\r\n  const [totalUserStaking, setTotalUserStaking] = useState<number>(0);\r\n  const [totalTokenStaked, setTotalTokenStaked] = useState<string>('0');\r\n  const [competitionLive, setCompetitionLive] = useState<ICompetition | any>(\r\n    {},\r\n  );\r\n  const { user } = useAuth();\r\n\r\n  const getTotalUserStaking = async () => {\r\n    const res = await rf.getRequest('UserRequest').getReport();\r\n    res && res.totalUserStaking && setTotalUserStaking(res.totalUserStaking);\r\n  };\r\n\r\n  const getCompetitionLive = async () => {\r\n    const res = await rf.getRequest('UserRequest').getCompetitionLive();\r\n    res && setCompetitionLive(res);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTotalUserStaking();\r\n    getCompetitionLive();\r\n  }, []);\r\n\r\n  const _renderPoolList = () => {\r\n    const getStakingPool = async (payload?: any) => {\r\n      const dataPools = [];\r\n      const data = await rf.getRequest('UserRequest').getStakingPool(payload);\r\n      if (data && data.docs) {\r\n        for (let index = 0; index < data.docs.length; index++) {\r\n          const pool = data.docs[index];\r\n          const stakedTokenSupply = await getStakedTokenSupply(\r\n            pool.poolAddress,\r\n          );\r\n          const priceToken = await getStakeUnitPriceUsd(pool);\r\n          dataPools.push({\r\n            ...pool,\r\n            totalLiquidity: new BigNumber(priceToken)\r\n              .times(stakedTokenSupply || 0)\r\n              .toString(),\r\n          });\r\n        }\r\n      }\r\n\r\n      const totalStaked = dataPools.reduce(\r\n        (total, pool: IStakingPool) => total + +pool.totalLiquidity,\r\n        0,\r\n      );\r\n      setTotalTokenStaked(totalStaked);\r\n      return { ...data, docs: dataPools };\r\n    };\r\n\r\n    const _renderBodyTable = (dataTable: IStakingPool[]) => {\r\n      return (\r\n        <Tbody>\r\n          {dataTable.map((pool: IStakingPool, index: number) => {\r\n            return (\r\n              <Tr key={index}>\r\n                <Td>\r\n                  <Flex alignItems={'center'}>\r\n                    <BuniLogoIcon />\r\n                    {pool.lpSymbol.includes('BNB') && (\r\n                      <Avatar src={'/images/BNB.png'} size=\"sm\" ml={1} />\r\n                    )}\r\n                    <Text ml={3}> {pool.lpSymbol}</Text>\r\n                  </Flex>\r\n                </Td>\r\n                <Td>\r\n                  <Flex alignItems={'center'}>\r\n                    {formatShortAddress(pool.poolAddress)}\r\n                    <CopyIcon\r\n                      ml={2}\r\n                      color={'green.500'}\r\n                      onClick={() => copyToClipboard(pool.poolAddress)}\r\n                      cursor={'pointer'}\r\n                    />\r\n                  </Flex>\r\n                </Td>\r\n                <Td>{pool.stakeType}</Td>\r\n                <Td>${formatWeiNumber(pool.totalLiquidity)}</Td>\r\n              </Tr>\r\n            );\r\n          })}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTable = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Pool Name</Th>\r\n            <Th>Pool Address</Th>\r\n            <Th>Stake Type</Th>\r\n            <Th>Liquidity</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <AppDataTable\r\n          limit={10}\r\n          renderHeader={_renderHeaderTable}\r\n          renderBody={_renderBodyTable}\r\n          fetchData={getStakingPool}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const _renderDiamondTierRanking = () => {\r\n    const getStakingPool = async (payload?: any) => {\r\n      const data = await rf\r\n        .getRequest('UserRequest')\r\n        .getDiamondTierRanking(payload);\r\n      setDiamondUsers(data.docs);\r\n      return { ...data, docs: data.docs };\r\n    };\r\n\r\n    const _renderBodyTable = (dataTable: IDiamondUser[]) => {\r\n      return (\r\n        <Tbody>\r\n          {dataTable.map((diamondUser: IDiamondUser, index: number) => {\r\n            const stakingTokenBuni = diamondUser.stakingTokens?.find(\r\n              (item: any) => item?.stakingTokenName?.toLowerCase() === 'buni',\r\n            );\r\n            const stakingTokenBPT = diamondUser.stakingTokens?.find(\r\n              (item: any) => item?.stakingTokenName?.toLowerCase() === 'wbnb',\r\n            );\r\n            const stakedBpt =\r\n              diamondUser.stakingTokens && stakingTokenBPT\r\n                ? stakingTokenBPT?.stakedAmount\r\n                : '0';\r\n            const stakedBuni =\r\n              diamondUser.stakingTokens && stakingTokenBuni\r\n                ? stakingTokenBuni?.stakedAmount\r\n                : '0';\r\n            return (\r\n              <Tr key={index}>\r\n                <Td>{diamondUser.rank}</Td>\r\n                <Td>{formatShortAddress(diamondUser.userAddress)}</Td>\r\n                <Td>{formatWeiNumber(diamondUser.amountStaked)} BUNI</Td>\r\n                <Td>{formatWeiNumber(stakedBpt)} BPT</Td>\r\n                <Td>{formatWeiNumber(stakedBuni)} BUNI</Td>\r\n                <Td>\r\n                  {formatTimestamp(\r\n                    diamondUser.lastTimeStaked,\r\n                    'HH:mm - YYYY/MM/DD',\r\n                  )}\r\n                </Td>\r\n              </Tr>\r\n            );\r\n          })}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTable = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Position</Th>\r\n            <Th>Wallet Address</Th>\r\n            <Th>Total Buni Value</Th>\r\n            <Th>BPT Staked</Th>\r\n            <Th>BUNI Staked</Th>\r\n            <Th>Last Updated</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <AppDataTable\r\n          limit={10}\r\n          renderHeader={_renderHeaderTable}\r\n          renderBody={_renderBodyTable}\r\n          fetchData={getStakingPool}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const _renderCompetitions = () => {\r\n    const getCompetitions = async (payload?: any) => {\r\n      const data = await rf.getRequest('UserRequest').getCompetitions(payload);\r\n      return { ...data, docs: data.docs };\r\n    };\r\n\r\n    const _renderBodyTable = (dataTable: ICompetition[]) => {\r\n      return (\r\n        <Tbody>\r\n          {dataTable.map((competition: ICompetition, index: number) => {\r\n            return (\r\n              <Tr key={index}>\r\n                <Td>{competition.competitionId}</Td>\r\n                <Td>\r\n                  {formatTimestamp(competition.startTime, 'HH:mm - YYYY/MM/DD')}\r\n                </Td>\r\n                <Td>\r\n                  {formatTimestamp(competition.endTime, 'HH:mm - YYYY/MM/DD')}\r\n                </Td>\r\n                <Td>{competition.slotAuctioned}</Td>\r\n                <Td>{competition.slotDeranked}</Td>\r\n                <Td>\r\n                  <Tag\r\n                    size=\"lg\"\r\n                    colorScheme={getColorStatus(competition.status)}\r\n                    borderRadius=\"full\"\r\n                  >\r\n                    <TagLabel>{competition.status}</TagLabel>\r\n                  </Tag>\r\n                </Td>\r\n                <Td>\r\n                  <AppLink to={`/competition/${competition.competitionId}`}>\r\n                    View detail\r\n                  </AppLink>\r\n                </Td>\r\n              </Tr>\r\n            );\r\n          })}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTable = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th>ID</Th>\r\n            <Th>Start time</Th>\r\n            <Th>End time</Th>\r\n            <Th>slots auctioned</Th>\r\n            <Th>slots deranked</Th>\r\n            <Th>Status</Th>\r\n            <Th>Action</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <AppDataTable\r\n          limit={10}\r\n          renderHeader={_renderHeaderTable}\r\n          renderBody={_renderBodyTable}\r\n          fetchData={getCompetitions}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <Box mb={5}>\r\n        <SimpleGrid\r\n          className=\"blockContent\"\r\n          columns={{ base: 1, sm: 2, lg: 3, '2xl': 4 }}\r\n          gap=\"20px\"\r\n        >\r\n          <AppCardStatistic\r\n            startContent={\r\n              <Box p={2} borderRadius={'full'}>\r\n                <UserIcon />\r\n              </Box>\r\n            }\r\n            name=\"Total Staking Users\"\r\n            value={totalUserStaking}\r\n          />\r\n          <AppCardStatistic\r\n            startContent={\r\n              <Box p={2} borderRadius={'full'}>\r\n                <StakingUserIcon />\r\n              </Box>\r\n            }\r\n            name=\"Total Diamond Users\"\r\n            value={diamondUsers.length}\r\n          />\r\n\r\n          <AppCardStatistic\r\n            startContent={\r\n              <Box p={2} borderRadius={'full'}>\r\n                <ProjectIcon />\r\n              </Box>\r\n            }\r\n            name=\"Total Token Staked\"\r\n            value={`$${formatWeiNumber(totalTokenStaked.toString())}`}\r\n          />\r\n        </SimpleGrid>\r\n      </Box>\r\n\r\n      {user?.havePermissions(config.permissions.staking.VIEW_STAKING_POOL) && (\r\n        <Card>\r\n          <Heading as=\"h4\" size=\"md\" mb={5} ml={5} mt={3} fontSize={'24px'}>\r\n            Staking Pools\r\n          </Heading>\r\n          {_renderPoolList()}\r\n        </Card>\r\n      )}\r\n\r\n      <Card mt={5}>\r\n        <Heading as=\"h4\" size=\"md\" mb={8} ml={5} mt={3} fontSize={'24px'}>\r\n          Diamond Tier Ranking\r\n        </Heading>\r\n        <Flex mb={5} ml={5}>\r\n          <Text mr={1}>Snapshot Time:</Text>\r\n          <Text fontWeight={600}>\r\n            {formatTimestamp(\r\n              diamondUsers[0]?.finalizedTime,\r\n              'HH:mm - YYYY/MM/DD',\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n\r\n        <Flex justifyContent={'flex-end'} mb={4}>\r\n          (Conversion Rate:{' '}\r\n          <Text ml={2} fontWeight={600}>\r\n            1BPT = 50,000 BUNI{' '}\r\n          </Text>\r\n          )\r\n        </Flex>\r\n\r\n        {_renderDiamondTierRanking()}\r\n      </Card>\r\n\r\n      <Card mt={5}>\r\n        <Heading as=\"h4\" size=\"md\" mb={8} ml={5} mt={3} fontSize={'24px'}>\r\n          Staking Competition Ranking\r\n        </Heading>\r\n\r\n        {competitionLive && !!Object.keys(competitionLive).length && (\r\n          <Card variant={'sub'} mb={8}>\r\n            <Flex justifyContent={'space-between'}>\r\n              <Heading as=\"h4\" size=\"md\" mb={4}>\r\n                Live Competition Ranking\r\n              </Heading>\r\n              <AppLink to={`/competition/${competitionLive.competitionId}`}>\r\n                View Detail\r\n              </AppLink>\r\n            </Flex>\r\n\r\n            <Text mb={5}>\r\n              The competition for{' '}\r\n              <span style={{ fontWeight: 600 }}>\r\n                {competitionLive.slotAuctioned}\r\n              </span>{' '}\r\n              slots is on going from{' '}\r\n              <span style={{ fontWeight: 600 }}>\r\n                {formatTimestamp(\r\n                  competitionLive.startTime,\r\n                  ' HH:mm, YYYY/MM/DD',\r\n                )}\r\n              </span>{' '}\r\n              to{' '}\r\n              <span style={{ fontWeight: 600 }}>\r\n                {formatTimestamp(competitionLive.endTime, ' HH:mm, YYYY/MM/DD')}\r\n              </span>\r\n            </Text>\r\n\r\n            <SimpleGrid\r\n              className=\"blockContent\"\r\n              columns={{ base: 1, sm: 2, lg: 3, '2xl': 4 }}\r\n              gap=\"20px\"\r\n            >\r\n              <Card borderRadius={'20px'} px={5} py={3}>\r\n                Number of Slots Auctioned\r\n                <Text fontWeight={600} fontSize={'24px'}>\r\n                  {' '}\r\n                  {competitionLive.slotAuctioned}\r\n                </Text>\r\n              </Card>\r\n\r\n              <Card borderRadius={'20px'} px={5} py={3}>\r\n                Number of Slots Deranked\r\n                <Text fontWeight={600} fontSize={'24px'}>\r\n                  {' '}\r\n                  {competitionLive.slotDeranked}\r\n                </Text>\r\n              </Card>\r\n\r\n              <Card borderRadius={'20px'} px={5} py={3}>\r\n                Number of Competitors\r\n                <Text fontWeight={600} fontSize={'24px'}>\r\n                  {' '}\r\n                  {competitionLive.numCompetitors}\r\n                </Text>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Card>\r\n        )}\r\n\r\n        {user?.havePermissions(\r\n          config.permissions.staking.CREATE_COMPETITION,\r\n        ) && (\r\n          <Flex justifyContent=\"flex-end\" mb={5}>\r\n            <Box width={isMobile ? '100%' : 'auto'}>\r\n              <Link to=\"/create-competition\">\r\n                <AppButton width={isMobile ? '100%' : 'auto'}>\r\n                  New Competition\r\n                </AppButton>\r\n              </Link>\r\n            </Box>\r\n          </Flex>\r\n        )}\r\n\r\n        {_renderCompetitions()}\r\n      </Card>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default StakingPage;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCompetitionDetail.tsx",["994","995","996","997","998","999"],"import BasePage from 'src/layouts/BasePage';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { useParams } from 'react-router';\r\nimport { isMobile } from 'react-device-detect';\r\nimport LoadingIcon from 'src/assets/icons/LoadingIcon';\r\nimport { toastError, toastSuccess } from 'src/utils/utils-notify';\r\nimport FormCompetition from './PageCreateCompetition/part/FormCompetition';\r\n\r\nconst PageCompetitionDetail = () => {\r\n  const [competition, setCompetition] = useState<any>({});\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [isLoadingEdit, setIsLoadingEdit] = useState<boolean>(false);\r\n\r\n  const { id: competitionId } = useParams() as any;\r\n\r\n  const getCompetitionInfo = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = (await rf\r\n        .getRequest('UserRequest')\r\n        .getCompetition(competitionId)) as any;\r\n      setCompetition(res);\r\n      setLoading(false);\r\n    } catch (error: any) {\r\n      setLoading(false);\r\n    }\r\n  }, [competitionId]);\r\n\r\n  useEffect(() => {\r\n    getCompetitionInfo().then();\r\n  }, []);\r\n\r\n  const handleSubmit = async (data: any) => {\r\n    try {\r\n      setIsLoadingEdit(true);\r\n      await rf.getRequest('UserRequest').updateCompetition(competitionId, data);\r\n      toastSuccess({ message: 'Edit successfully!' });\r\n      setIsLoadingEdit(false);\r\n      getCompetitionInfo();\r\n    } catch (e: any) {\r\n      toastError({ message: e.message });\r\n      setIsLoadingEdit(false);\r\n    }\r\n  };\r\n\r\n  const _renderLoading = () => {\r\n    const width = isMobile ? 100 : 150;\r\n    return (\r\n      <div>\r\n        <LoadingIcon width={width} height={width} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      {loading ? (\r\n        _renderLoading()\r\n      ) : (\r\n        <>\r\n          <FormCompetition\r\n            type=\"edit\"\r\n            onSubmitForm={handleSubmit}\r\n            competition={competition}\r\n            isLoading={isLoadingEdit}\r\n            fetchData={getCompetitionInfo}\r\n          />\r\n        </>\r\n      )}\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default PageCompetitionDetail;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageLogin.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageProjectList.tsx",["1000","1001","1002","1003","1004","1005","1006","1007"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PagePoolDetail.tsx",["1008","1009","1010"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport LoadingIcon from 'src/assets/icons/LoadingIcon';\r\nimport BasePage from 'src/layouts/BasePage';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { Pool } from 'src/utils/utils-pool';\r\nimport PartViewDetail from 'src/pages/PageCreatePoolINO/part/PartViewDetail';\r\nimport ViewDetailPoolIDO from 'src/pages/PageCreatePoolIDO/part/ViewDetailPoolIDO';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { TYPE_POOL_CREATED } from 'src/constants';\r\nimport { IDOPool, INOPool, PoolResponseType } from 'src/utils/pool';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport usePool from 'src/hooks/usePool';\r\nimport ModalPickWinners from 'src/modals/ModalPickWinners';\r\nimport Card from 'src/components/Card';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  useDisclosure,\r\n} from '@chakra-ui/react';\r\nimport { switchNetwork } from 'src/utils/utils-auth';\r\nimport { isMobile } from 'react-device-detect';\r\n\r\nconst PagePoolDetail = () => {\r\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n  const { id: poolId } = useParams() as any;\r\n  const { user } = useAuth();\r\n  const { deployPool } = usePool();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const [pool, setPool] = useState<PoolResponseType | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [isOpenModalPickWinners, setIsOpenModalPickWinners] =\r\n    useState<boolean>(false);\r\n\r\n  const cancelRef = useRef<any>(null);\r\n\r\n  const fetchPoolDetail = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const responsePool = await rf.getRequest('PoolRequest').getPool(poolId);\r\n      responsePool && setPool(responsePool);\r\n      setLoading(false);\r\n    } catch (error: any) {\r\n      setLoading(false);\r\n    }\r\n  }, [poolId]);\r\n\r\n  useEffect(() => {\r\n    fetchPoolDetail();\r\n  }, [poolId]);\r\n\r\n  const poolClass = pool\r\n    ? pool?.type === TYPE_POOL_CREATED.IDO\r\n      ? new IDOPool(pool)\r\n      : new INOPool(pool)\r\n    : null;\r\n\r\n  const onToggleModalPickWinners = () =>\r\n    setIsOpenModalPickWinners((prevState) => !prevState);\r\n\r\n  const onPickWinners = () => onToggleModalPickWinners();\r\n\r\n  const onDeploy = async (isDeploy: boolean) => {\r\n    if (!poolClass || !user) {\r\n      return;\r\n    }\r\n    await deployPool(poolClass, user, isDeploy);\r\n    await fetchPoolDetail();\r\n  };\r\n\r\n  const _renderPickWinnersButton = () => {\r\n    if (poolClass?.isPoolDeployed()) {\r\n      return null;\r\n    }\r\n    const timeline = poolClass?.getTimeline();\r\n    if (!timeline?.afterWhitelistPhase() || !timeline?.beforeSwapPhase()) {\r\n      return null;\r\n    }\r\n    return (\r\n      <>\r\n        <AppButton onClick={onPickWinners}>Pick Winners</AppButton>\r\n        <ModalPickWinners\r\n          pool={poolClass}\r\n          isOpen={isOpenModalPickWinners}\r\n          onClose={onToggleModalPickWinners}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const _renderDeployButton = () => {\r\n    if (poolClass?.isPoolDeployed()) {\r\n      return null;\r\n    }\r\n\r\n    if (pool && pool?.network !== user?.getNetwork()) {\r\n      return (\r\n        <AppButton\r\n          variant=\"action\"\r\n          onClick={() => switchNetwork(pool.network, user?.getProvider())}\r\n        >\r\n          Switch Network\r\n        </AppButton>\r\n      );\r\n    }\r\n\r\n    const onClickDeploy = () => {\r\n      onClose && onClose();\r\n      onDeploy && onDeploy(true);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <AppButton onClick={onOpen}>Deploy</AppButton>\r\n        <AlertDialog\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={onClose}\r\n          size={`${isMobile ? 'xs' : 'md'}`}\r\n        >\r\n          <AlertDialogOverlay>\r\n            <AlertDialogContent>\r\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                Deploy Pool\r\n              </AlertDialogHeader>\r\n\r\n              <AlertDialogBody>\r\n                <Text>The system will store the latest pool information.</Text>\r\n                <Text>Are you sure you want to deploy?</Text>\r\n              </AlertDialogBody>\r\n\r\n              <AlertDialogFooter>\r\n                <AppButton onClick={onClose} variant={'outline'}>\r\n                  Cancel\r\n                </AppButton>\r\n                <AppButton colorScheme=\"red\" onClick={onClickDeploy} ml={3}>\r\n                  Deploy\r\n                </AppButton>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialogOverlay>\r\n        </AlertDialog>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const _renderPoolDetail = (pool: PoolResponseType | null) => {\r\n    if (!pool || !Object.keys(pool).length) {\r\n      return null;\r\n    }\r\n    if (pool.type === 'INO') {\r\n      return (\r\n        <PartViewDetail viewDetail={new Pool(pool as any)} showIntro goBack />\r\n      );\r\n    }\r\n    return <ViewDetailPoolIDO viewDetail={pool} showIntro goBack />;\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <div className=\"projectDetail\">\r\n        {loading ? (\r\n          <div className=\"loadingPage\">\r\n            <LoadingIcon />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {_renderPoolDetail(pool)}\r\n            {_renderDeployButton() && (\r\n              <Box mx={'auto'} maxW={'850px'} my={6}>\r\n                <Card>\r\n                  <Heading as={'h4'} fontSize={'xl'}>\r\n                    Deploy Pool\r\n                  </Heading>\r\n                  <Flex ml={-2} justifyContent=\"flex-end\" alignItems={'center'}>\r\n                    <Box pl={2}>{_renderPickWinnersButton()}</Box>\r\n                    <Box pl={2}>{_renderDeployButton()}</Box>\r\n                  </Flex>\r\n                </Card>\r\n              </Box>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default PagePoolDetail;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PagePoolList.tsx",["1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageAuctionList.tsx",["1026","1027"],"import BasePage from 'src/layouts/BasePage';\r\nimport Card from 'src/components/Card';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Flex,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Tag,\r\n  TagLabel,\r\n  Text,\r\n} from '@chakra-ui/react';\r\nimport AppSearch from 'src/components/AppSearch';\r\nimport React, { useState, useMemo, FC } from 'react';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { Link } from 'react-router-dom';\r\nimport { isMobile } from 'react-device-detect';\r\nimport moment from 'moment';\r\nimport { IAuctionResponseType, Auction } from 'src/utils/auction';\r\nimport { formatNumber } from 'src/utils/utils-formats';\r\nimport {\r\n  getLogoNetwork,\r\n  getNetworkConfigs,\r\n  getSolanaNetworkId,\r\n  getNetworkConfig,\r\n} from 'src/utils/utils-network';\r\nimport { AUCTION_STATUS } from 'src/constants';\r\nimport { VerifiedIcon, UnverifiedIcon } from 'src/assets/icons';\r\nimport AppSelect from 'src/components/AppSelect';\r\nimport AppLink from 'src/components/AppLink';\r\n\r\ninterface IStatusLBP {\r\n  status: number;\r\n}\r\n\r\nconst STATUS_OPTIONS = [\r\n  {\r\n    value: '',\r\n    label: 'All Status',\r\n  },\r\n  {\r\n    value: AUCTION_STATUS.ACTIVE.toString(),\r\n    label: 'Active',\r\n  },\r\n  {\r\n    value: AUCTION_STATUS.PENDING.toString(),\r\n    label: 'Pending',\r\n  },\r\n  {\r\n    value: AUCTION_STATUS.INACTIVE.toString(),\r\n    label: 'Inactive',\r\n  },\r\n];\r\n\r\nconst STATUS_VERIFIED_OPTIONS = [\r\n  {\r\n    value: '',\r\n    label: 'All Verified Status',\r\n  },\r\n  {\r\n    value: 'true',\r\n    label: 'Verified',\r\n  },\r\n  {\r\n    value: 'false',\r\n    label: 'Unverified',\r\n  },\r\n];\r\n\r\nlet networks = getNetworkConfigs();\r\nnetworks = networks.filter((item) => item.id !== getSolanaNetworkId());\r\nexport const NETWORK_OPTIONS = networks.map((item) => {\r\n  return {\r\n    value: item.id,\r\n    label: item.name,\r\n    icon: item?.icon,\r\n  };\r\n});\r\n\r\nconst getDurations = (startTime: number, endTime: number) => {\r\n  return Math.round(\r\n    moment(endTime * 1000).diff(moment(startTime * 1000), 'hours') / 24,\r\n  );\r\n};\r\n\r\nexport const StatusLBP: FC<IStatusLBP> = ({ status }) => {\r\n  const isActive = status === AUCTION_STATUS.ACTIVE;\r\n  const isPending = status === AUCTION_STATUS.PENDING;\r\n  const isInactive = status === AUCTION_STATUS.INACTIVE;\r\n\r\n  const getStatus = () => {\r\n    switch (true) {\r\n      case isPending:\r\n        return 'Pending';\r\n      case isInactive:\r\n        return 'Inactive';\r\n      case isActive:\r\n        return 'Active';\r\n      default:\r\n        return 'Inactive';\r\n    }\r\n  };\r\n\r\n  const getColor = () => {\r\n    switch (true) {\r\n      case isPending:\r\n        return 'blue';\r\n      case isInactive:\r\n        return 'red';\r\n      case isActive:\r\n        return 'green';\r\n      default:\r\n        return 'red';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Tag size=\"lg\" colorScheme={getColor()} borderRadius=\"full\">\r\n      <TagLabel>{getStatus()}</TagLabel>\r\n    </Tag>\r\n  );\r\n};\r\n\r\nconst PageAuctionList = () => {\r\n  const [search, setSearch] = useState<string>('');\r\n  const [status, setStatus] = useState<string>('');\r\n  const [isVerified, setIsVerified] = useState<string>('');\r\n  const [network, setNetwork] = useState<string>('');\r\n\r\n  const getAuctions = async (payload?: any) => {\r\n    const data = await rf.getRequest('AuctionRequest').getAuctions(payload);\r\n    return { ...data, docs: data.docs };\r\n  };\r\n\r\n  const requestParams = useMemo(() => {\r\n    const params = {\r\n      searchKey: search,\r\n      isDraft: false,\r\n      status,\r\n      network,\r\n    };\r\n\r\n    if (isVerified === '') {\r\n      return params;\r\n    }\r\n\r\n    return {\r\n      ...params,\r\n      isVerified,\r\n    };\r\n  }, [search, status, network, isVerified]);\r\n\r\n  const _renderBodyTable = (dataTable: IAuctionResponseType[]) => {\r\n    return (\r\n      <Tbody>\r\n        {dataTable.map((auction: IAuctionResponseType, index: number) => {\r\n          const lbpAuction = new Auction(auction);\r\n\r\n          return (\r\n            <Tr key={index}>\r\n              <Td>\r\n                <Flex alignItems=\"center\">\r\n                  <Avatar src={lbpAuction.getLogoUrl()} size=\"sm\" mr={3} />\r\n                  <Text mr={2}>\r\n                    {lbpAuction.getTokenMain()?.symbol?.toUpperCase()} -{' '}\r\n                    {lbpAuction.getTokenBase()?.symbol?.toUpperCase()}\r\n                  </Text>\r\n                  {auction.isVerified ? <VerifiedIcon /> : <UnverifiedIcon />}\r\n                </Flex>\r\n              </Td>\r\n              <Td>\r\n                <Flex alignItems=\"center\">\r\n                  <Avatar\r\n                    src={getLogoNetwork(lbpAuction.getNetwork())}\r\n                    size=\"sm\"\r\n                    mr={3}\r\n                  />\r\n                  <span>{getNetworkConfig(lbpAuction.getNetwork())?.name}</span>\r\n                </Flex>\r\n              </Td>\r\n              <Td>\r\n                {getDurations(\r\n                  lbpAuction.getStartTime(),\r\n                  lbpAuction.getEndTime(),\r\n                )}\r\n              </Td>\r\n              <Td>\r\n                <StatusLBP status={lbpAuction.getStatus()} />\r\n              </Td>\r\n              <Td>\r\n                {formatNumber(lbpAuction.getPrice())}{' '}\r\n                {+lbpAuction.getPrice() > 0\r\n                  ? lbpAuction.getTokenBase()?.symbol\r\n                  : ''}\r\n              </Td>\r\n              <Td>\r\n                <AppLink to={`/auction/${auction.id}`}>View Detail</AppLink>\r\n              </Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    );\r\n  };\r\n\r\n  const _renderHeaderTable = () => {\r\n    return (\r\n      <Thead>\r\n        <Tr>\r\n          <Th>Token</Th>\r\n          <Th>Network</Th>\r\n          <Th>Duration</Th>\r\n          <Th>Status</Th>\r\n          <Th>Last Price</Th>\r\n          <Th>Action</Th>\r\n        </Tr>\r\n      </Thead>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <Card>\r\n        <Flex\r\n          my={'20px'}\r\n          justifyContent=\"space-between\"\r\n          flexDirection={isMobile ? 'column' : 'row'}\r\n        >\r\n          <Flex alignItems=\"center\" flexDirection={isMobile ? 'column' : 'row'}>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: any) => setSearch(e.target.value)}\r\n            />\r\n            <Box my={isMobile ? 4 : 0} width={'100%'} mx={5}>\r\n              <AppSelect\r\n                onChange={(e) => {\r\n                  setStatus(e.target.value);\r\n                }}\r\n              >\r\n                {STATUS_OPTIONS.map((option, id) => (\r\n                  <option value={option.value} key={id}>\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </AppSelect>\r\n            </Box>\r\n\r\n            <AppSelect\r\n              variant=\"main\"\r\n              onChange={(e) => {\r\n                setNetwork(e.target.value);\r\n              }}\r\n            >\r\n              <>\r\n                <option value={''}>All Networks</option>\r\n                {NETWORK_OPTIONS.map((network, id) => (\r\n                  <option key={id} value={network.value}>\r\n                    {network.label}\r\n                  </option>\r\n                ))}\r\n              </>\r\n            </AppSelect>\r\n\r\n            <Box my={isMobile ? 4 : 0} width={'100%'} mx={5}>\r\n              <AppSelect\r\n                onChange={(e) => {\r\n                  setIsVerified(e.target.value);\r\n                }}\r\n              >\r\n                {STATUS_VERIFIED_OPTIONS.map((option, id) => (\r\n                  <option value={option.value} key={id}>\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </AppSelect>\r\n            </Box>\r\n          </Flex>\r\n\r\n          <Box mt={isMobile ? '5' : 0}>\r\n            <Link to=\"/create-auction\">\r\n              <AppButton width={isMobile ? '100%' : 'auto'}>\r\n                New Auction\r\n              </AppButton>\r\n            </Link>\r\n          </Box>\r\n        </Flex>\r\n        <AppDataTable\r\n          requestParams={requestParams}\r\n          limit={10}\r\n          renderHeader={_renderHeaderTable}\r\n          renderBody={_renderBodyTable}\r\n          fetchData={getAuctions}\r\n        />\r\n      </Card>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default PageAuctionList;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\groups\\PageCreateGroup.tsx",["1028","1029"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\groups\\PageGroupDetail.tsx",["1030","1031","1032","1033","1034"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\admins\\PageAdminDetail.tsx",["1035","1036","1037","1038","1039","1040"],"import BasePage from 'src/layouts/BasePage';\r\nimport Card from 'src/components/Card';\r\nimport 'src/styles/pages/UserDetail.scss';\r\nimport { Avatar } from '@chakra-ui/react';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { useParams } from 'react-router';\r\nimport { isMobile } from 'react-device-detect';\r\nimport LoadingIcon from 'src/assets/icons/LoadingIcon';\r\nimport { toastError, toastSuccess } from 'src/utils/utils-notify';\r\nimport FormAdmin from './part/FormAdmin';\r\n\r\nconst PageAdminDetail = () => {\r\n  const [userInfo, setUserInfo] = useState<any>({});\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [isLoadingEdit, setIsLoadingEdit] = useState<boolean>(false);\r\n\r\n  const { address: userAddress } = useParams() as any;\r\n\r\n  const getUserInfo = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = (await rf\r\n        .getRequest('AdminRequest')\r\n        .getUserByUserAddress(userAddress)) as any;\r\n      setUserInfo(res);\r\n      setLoading(false);\r\n    } catch (error: any) {\r\n      setLoading(false);\r\n    }\r\n  }, [userAddress]);\r\n\r\n  useEffect(() => {\r\n    getUserInfo();\r\n  }, []);\r\n\r\n  const handleSubmit = async (data: any) => {\r\n    try {\r\n      setIsLoadingEdit(true);\r\n      await rf.getRequest('AdminRequest').updateUserInfo(userAddress, data);\r\n      toastSuccess({ message: 'Edit successfully!' });\r\n      setIsLoadingEdit(false);\r\n      // TODO: need to reload profile after editing the current user's account\r\n    } catch (e: any) {\r\n      toastError({ message: e.message });\r\n      setIsLoadingEdit(false);\r\n    }\r\n  };\r\n\r\n  const _renderLoading = () => {\r\n    const width = isMobile ? 100 : 150;\r\n    return (\r\n      <div>\r\n        <LoadingIcon width={width} height={width} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      {loading ? (\r\n        _renderLoading()\r\n      ) : (\r\n        <>\r\n          <Card>\r\n            <div className=\"user-header\">\r\n              <img\r\n                className=\"user-bg-cover\"\r\n                src=\"https://elpis.game/images/landing-page/banner-landing.jpg\"\r\n              />\r\n              <div className=\"user-avatar\">\r\n                <Avatar\r\n                  className=\"profileAvatar\"\r\n                  name={userInfo?.fullName}\r\n                  size=\"lg\"\r\n                />\r\n              </div>\r\n              <div className=\"user-name\">{userInfo.username}</div>\r\n              <div className=\"user-type\">\r\n                Account Type:<span> {userInfo?.userTypeStr}</span>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n          <FormAdmin\r\n            type=\"edit\"\r\n            onSubmitForm={handleSubmit}\r\n            userInfo={userInfo}\r\n            isLoading={isLoadingEdit}\r\n          />\r\n        </>\r\n      )}\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default PageAdminDetail;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\admins\\PageCreateAdmin.tsx",["1041","1042"],"import BasePage from 'src/layouts/BasePage';\r\nimport 'src/styles/pages/UserDetail.scss';\r\nimport React, { useState } from 'react';\r\nimport { toastError, toastSuccess } from 'src/utils/utils-notify';\r\nimport FormAdmin from 'src/pages/Settings/admins/part/FormAdmin';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst PageCreateAdmin = () => {\r\n  const [isLoadingCreate, setIsLoadingCreate] = useState<boolean>(false);\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = async (data: any) => {\r\n    try {\r\n      setIsLoadingCreate(true);\r\n      await rf.getRequest('AdminRequest').addUser(data);\r\n      toastSuccess({ message: 'Add successfully!' });\r\n      setIsLoadingCreate(false);\r\n      history.push('/admins');\r\n    } catch (e: any) {\r\n      toastError({ message: e.message });\r\n      setIsLoadingCreate(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <FormAdmin\r\n        type=\"create\"\r\n        onSubmitForm={handleSubmit}\r\n        isLoading={isLoadingCreate}\r\n      />\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default PageCreateAdmin;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\admins\\PageAdminList.tsx",["1043","1044","1045","1046"],"import BasePage from 'src/layouts/BasePage';\r\nimport Card from 'src/components/Card';\r\nimport { Avatar, Box, Flex, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport AppSearch from 'src/components/AppSearch';\r\nimport React, { useState, useMemo } from 'react';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport AppLink from 'src/components/AppLink';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport { formatShortAddress } from 'src/utils/utils-formats';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { Link } from 'react-router-dom';\r\nimport { isMobile } from 'react-device-detect';\r\n\r\nconst PageAdminList = () => {\r\n  const [search, setSearch] = useState<string>('');\r\n  const getUsers = async (payload?: any) => {\r\n    const data = await rf.getRequest('AdminRequest').getUsers(payload);\r\n    return { ...data, docs: data.docs };\r\n  };\r\n\r\n  const requestParams = useMemo(() => {\r\n    return {\r\n      search,\r\n    };\r\n  }, [search]);\r\n\r\n  const _renderBodyTable = (dataTable: any) => {\r\n    return (\r\n      <Tbody>\r\n        {dataTable.map((user: any, index: number) => {\r\n          return (\r\n            <Tr key={index}>\r\n              <Td>\r\n                <Flex alignItems=\"center\">\r\n                  <Avatar\r\n                    className=\"profileAvatar\"\r\n                    name={user.fullName}\r\n                    size=\"lg\"\r\n                    mr={3}\r\n                  />\r\n                  {user.fullName}\r\n                </Flex>\r\n              </Td>\r\n              <Td>{user.username}</Td>\r\n              <Td>{formatShortAddress(user.userAddress)}</Td>\r\n              <Td>{user.email}</Td>\r\n              <Td>{user.userTypeStr}</Td>\r\n              <Td>\r\n                <AppLink to={`/admin/${user.userAddress}`}>Edit user</AppLink>\r\n              </Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    );\r\n  };\r\n\r\n  const _renderHeaderTable = () => {\r\n    return (\r\n      <Thead>\r\n        <Tr>\r\n          <Th>Name</Th>\r\n          <Th>Username</Th>\r\n          <Th>User Address</Th>\r\n          <Th>Email</Th>\r\n          <Th>Group Type</Th>\r\n          <Th>Action</Th>\r\n        </Tr>\r\n      </Thead>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <Card>\r\n        <Flex\r\n          my={'20px'}\r\n          justifyContent=\"space-between\"\r\n          flexDirection={isMobile ? 'column' : 'row'}\r\n        >\r\n          <Box>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: any) => setSearch(e.target.value)}\r\n            />\r\n          </Box>\r\n\r\n          <Box mt={isMobile ? '5' : 0}>\r\n            <Link to=\"/create-admin\">\r\n              <AppButton width={isMobile ? '100%' : 'auto'}>\r\n                New Account\r\n              </AppButton>\r\n            </Link>\r\n          </Box>\r\n        </Flex>\r\n        <AppDataTable\r\n          requestParams={requestParams}\r\n          limit={10}\r\n          renderHeader={_renderHeaderTable}\r\n          renderBody={_renderBodyTable}\r\n          fetchData={getUsers}\r\n        />\r\n      </Card>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default PageAdminList;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\groups\\PageGroupList.tsx",["1047","1048","1049","1050","1051"],"import BasePage from 'src/layouts/BasePage';\r\nimport Card from 'src/components/Card';\r\nimport { Box, Flex, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport AppSearch from 'src/components/AppSearch';\r\nimport React, { useState, useMemo, useRef } from 'react';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport AppLink from 'src/components/AppLink';\r\nimport AppDataTable, {\r\n  Pagination,\r\n  RequestParams as DataTableRequestParams,\r\n} from 'src/components/AppDataTable';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { Link } from 'react-router-dom';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { toastError, toastSuccess } from '../../../utils/utils-notify';\r\nimport { _renderCell } from '../role/PageRoleList';\r\n\r\ntype GroupType = {\r\n  groupId: number;\r\n  name: string;\r\n  description: string;\r\n  roleCounter: number;\r\n};\r\n\r\ntype DataTableRef = {\r\n  tableData: GroupType[];\r\n  pagination: Pagination;\r\n  fetchTableData: (\r\n    params: DataTableRequestParams,\r\n    tablePagination: Pagination,\r\n  ) => void;\r\n};\r\n\r\nconst PageGroupList = () => {\r\n  const [search, setSearch] = useState<string>('');\r\n\r\n  const dataTableRef = useRef<DataTableRef>(null);\r\n\r\n  const getGroups = async (payload?: any) => {\r\n    return await rf.getRequest('AdminRequest').getGroups(payload);\r\n  };\r\n\r\n  const requestParams = useMemo(() => {\r\n    return {\r\n      name: search,\r\n    };\r\n  }, [search]);\r\n\r\n  const onDeleteGroup = async (groupId: string) => {\r\n    if (!dataTableRef.current) return;\r\n    try {\r\n      await rf.getRequest('AdminRequest').deleteGroup(groupId);\r\n      const { pagination, fetchTableData } = dataTableRef.current;\r\n      await fetchTableData(requestParams, pagination);\r\n      toastSuccess({ title: 'Delete group', message: 'Success' });\r\n    } catch (e: any) {\r\n      toastError({ title: 'Delete group', message: e.message });\r\n    }\r\n  };\r\n\r\n  const _renderBodyTable = (dataTable: any) => {\r\n    return (\r\n      <Tbody>\r\n        {dataTable.map((group: any, index: number) => {\r\n          return (\r\n            <Tr key={index}>\r\n              <Td>{_renderCell(group?.name)}</Td>\r\n              <Td>{group.roleCounter}</Td>\r\n              <Td>{_renderCell(group.description)}</Td>\r\n              <Td style={{ display: 'flex', justifyContent: 'center' }}>\r\n                <AppLink to={`/group/${group.groupId}`}>\r\n                  <AppButton>Edit group</AppButton>\r\n                </AppLink>\r\n                <AppButton ml={2} onClick={() => onDeleteGroup(group.groupId)}>\r\n                  Delete\r\n                </AppButton>\r\n              </Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    );\r\n  };\r\n\r\n  const _renderHeaderTable = () => {\r\n    return (\r\n      <Thead>\r\n        <Tr>\r\n          <Th>Name</Th>\r\n          <Th>Role No.</Th>\r\n          <Th>Description</Th>\r\n          <Th style={{ textAlign: 'center' }}>Action</Th>\r\n        </Tr>\r\n      </Thead>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <Card>\r\n        <Flex\r\n          my={'20px'}\r\n          justifyContent=\"space-between\"\r\n          flexDirection={isMobile ? 'column' : 'row'}\r\n        >\r\n          <Box>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: any) => setSearch(e.target.value)}\r\n            />\r\n          </Box>\r\n\r\n          <Box mt={isMobile ? '5' : 0}>\r\n            <Link to=\"/create-group\">\r\n              <AppButton width={isMobile ? '100%' : 'auto'}>\r\n                New Group\r\n              </AppButton>\r\n            </Link>\r\n          </Box>\r\n        </Flex>\r\n        <AppDataTable\r\n          ref={dataTableRef}\r\n          requestParams={requestParams}\r\n          limit={10}\r\n          renderHeader={_renderHeaderTable}\r\n          renderBody={_renderBodyTable}\r\n          fetchData={getGroups}\r\n        />\r\n      </Card>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default PageGroupList;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\role\\PageRoleDetail.tsx",["1052","1053","1054","1055","1056","1057","1058","1059","1060","1061"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\role\\PageCreateRole.tsx",["1062","1063"],"import BasePage from 'src/layouts/BasePage';\r\nimport 'src/styles/pages/UserDetail.scss';\r\nimport React, { useState } from 'react';\r\nimport { toastError, toastSuccess } from 'src/utils/utils-notify';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport FormRole from './part/FormRole';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst PageCreateRole = () => {\r\n  const [isLoadingCreate, setIsLoadingCreate] = useState<boolean>(false);\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = async (data: any) => {\r\n    try {\r\n      setIsLoadingCreate(true);\r\n      await rf.getRequest('AdminRequest').addRole(data);\r\n      toastSuccess({ message: 'Add successfully!' });\r\n      setIsLoadingCreate(false);\r\n      history.push('/roles');\r\n    } catch (e: any) {\r\n      toastError({ message: e.message });\r\n      setIsLoadingCreate(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <FormRole\r\n        type=\"create\"\r\n        onSubmitForm={handleSubmit}\r\n        isLoading={isLoadingCreate}\r\n      />\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default PageCreateRole;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\role\\PageRoleList.tsx",["1064","1065","1066","1067"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\index.tsx",["1068"],"import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport BasePage from 'src/layouts/BasePage';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport 'src/styles/pages/UserLaunchpad.scss';\r\nimport { IUserProfileResponse } from 'src/utils/common';\r\nimport AccountInfo from '../PageUserDetail/parts/AccountInfo';\r\nimport AuctionList from '../PageUserDetail/parts/AuctionList';\r\nimport PoolsOfAccount from '../PageUserDetail/parts/PoolsOfAccount';\r\nimport config from 'src/config';\r\n\r\nconst UserDetail = () => {\r\n  const { id: userId } = useParams() as any;\r\n  const [userInfo, setUserInfo] = useState<IUserProfileResponse | undefined>();\r\n  const { user } = useAuth();\r\n  const getUserDetail = async () => {\r\n    if (!userId) return;\r\n    try {\r\n      const res = await rf.getRequest('UserRequest').getUserDetail(userId);\r\n      setUserInfo({ ...res });\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getUserDetail();\r\n  }, [userId]);\r\n\r\n  return (\r\n    <BasePage>\r\n      {user?.havePermissions(config.permissions.users.VIEW_USER_DETAIL) && (\r\n        <div className=\"userLaunchpad\">\r\n          <AccountInfo userInfo={userInfo} />\r\n          {user?.havePermissions(\r\n            config.permissions.users.VIEW_POOLS_OF_USER,\r\n          ) && <PoolsOfAccount userInfo={userInfo} />}\r\n          {user?.havePermissions(\r\n            config.permissions.users.VIEW_AUCTIONS_OF_USER,\r\n          ) && <AuctionList />}\r\n        </div>\r\n      )}\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default UserDetail;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\index.tsx",["1069","1070","1071","1072"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateCompetition\\index.tsx",["1073","1074"],"import BasePage from 'src/layouts/BasePage';\r\nimport 'src/styles/pages/UserDetail.scss';\r\nimport React, { useState } from 'react';\r\nimport { toastError, toastSuccess } from 'src/utils/utils-notify';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { useHistory } from 'react-router';\r\nimport FormCompetition from 'src/pages/PageCreateCompetition/part/FormCompetition';\r\n\r\nconst CreateCompetition = () => {\r\n  const [isLoadingCreate, setIsLoadingCreate] = useState<boolean>(false);\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = async (data: any) => {\r\n    try {\r\n      setIsLoadingCreate(true);\r\n      await rf.getRequest('UserRequest').addCompetition(data);\r\n      toastSuccess({ message: 'Add successfully!' });\r\n      setIsLoadingCreate(false);\r\n      history.push('/staking');\r\n    } catch (e: any) {\r\n      toastError({ message: e.message });\r\n      setIsLoadingCreate(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <FormCompetition\r\n        type=\"create\"\r\n        onSubmitForm={handleSubmit}\r\n        isLoading={isLoadingCreate}\r\n      />\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default CreateCompetition;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageProjectDetail\\index.tsx",["1075","1076","1077","1078","1079"],"import { useCallback, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport LoadingIcon from 'src/assets/icons/LoadingIcon';\r\nimport BasePage from 'src/layouts/BasePage';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport 'src/styles/pages/ProjectDetail.scss';\r\nimport PartViewDetail from './part/PartViewDetail';\r\nimport { Project, ProjectInterface } from 'src/utils/utils-project';\r\n\r\nconst ProjectDetail = () => {\r\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n  const { id: projectId } = useParams() as any;\r\n  const [response, setResponse] = useState<any>(null);\r\n  const [project, setProject] = useState<ProjectInterface | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const fetchProjectDetail = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const responseProject = await rf\r\n        .getRequest('ProjectRequest')\r\n        .getProjectById(projectId);\r\n\r\n      responseProject && setProject(new Project(responseProject as any) as any);\r\n      responseProject && setResponse(responseProject);\r\n      setLoading(false);\r\n    } catch (error: any) {\r\n      setLoading(false);\r\n    }\r\n  }, [projectId]);\r\n\r\n  useEffect(() => {\r\n    fetchProjectDetail();\r\n  }, [projectId]);\r\n\r\n  return (\r\n    <BasePage>\r\n      <div className=\"projectDetail\">\r\n        {loading ? (\r\n          <div className=\"loadingPage\">\r\n            <LoadingIcon />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {project && !!Object.keys(project).length && (\r\n              <PartViewDetail viewDetail={project} showIntro />\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default ProjectDetail;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\index.tsx",["1080","1081"],"import React, { FC, useEffect, useRef, useState } from 'react';\r\nimport AppStepProgress, { STEPS } from 'src/components/AppStepProgress';\r\nimport Storage from 'src/utils/storage';\r\nimport 'src/styles/pages/ProjectCreate.scss';\r\nimport moment from 'moment';\r\nimport {\r\n  AuctionType,\r\n  DEFAULT_CURRENCY,\r\n  DEFAULT_SWAP_FEE,\r\n} from 'src/utils/utils-auction';\r\nimport BasePage from 'src/layouts/BasePage';\r\nimport StepOverview from 'src/pages/PageCreateAuction/steps/StepOverview';\r\nimport StepPoolSetup from 'src/pages/PageCreateAuction/steps/StepPoolSetup';\r\nimport StepPoolInfo from 'src/pages/PageCreateAuction/steps/StepPoolInfo';\r\nimport StepPreview from 'src/pages/PageCreateAuction/steps/StepPreview';\r\nimport StepCreateLbp from 'src/pages/PageCreateAuction/steps/StepCreateAuction';\r\nimport { Flex, Text } from '@chakra-ui/react';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { switchNetwork } from 'src/utils/utils-auth';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport Card from 'src/components/Card';\r\nimport { isMobile } from 'react-device-detect';\r\n\r\ninterface AuctionCreateProps {\r\n  onBack?: () => void;\r\n}\r\n\r\ninterface MessageNetworkNotIsCorrect {\r\n  network: string;\r\n}\r\n\r\nexport const MessageNetworkNotIsCorrect: FC<MessageNetworkNotIsCorrect> = ({\r\n  network,\r\n}) => {\r\n  const { user } = useAuth();\r\n  return (\r\n    <Card variant={'sub'} mb={5}>\r\n      <Flex\r\n        alignItems={'center'}\r\n        justifyContent={isMobile ? 'center' : 'space-between'}\r\n        flexWrap={'wrap'}\r\n      >\r\n        <Text textAlign={'center'} color={'#f07416'}>\r\n          Connected wallet does not match target network of Token Launch Auction\r\n        </Text>\r\n        <AppButton\r\n          variant=\"action\"\r\n          onClick={() => switchNetwork(network, user?.getProvider())}\r\n          mt={isMobile ? '4' : 0}\r\n        >\r\n          Switch Network\r\n        </AppButton>\r\n      </Flex>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst AuctionCreate: FC<AuctionCreateProps> = ({ onBack }) => {\r\n  const defaultNetwork = Storage.getNetwork();\r\n\r\n  const defaultStartDate = moment(\r\n    moment.utc().add(15, 'm').startOf('m').format('yyyy-MM-DD HH:mm:ss'),\r\n  );\r\n\r\n  const initialLbpState: AuctionType = {\r\n    network: defaultNetwork,\r\n    token: {\r\n      address: '',\r\n      name: '',\r\n      symbol: '',\r\n      decimals: 0,\r\n      totalSupply: '',\r\n      logo: '',\r\n    },\r\n    collateralToken: {\r\n      address: '',\r\n      name: '',\r\n      symbol: DEFAULT_CURRENCY,\r\n      decimals: 0,\r\n    },\r\n    depositToken: {\r\n      launch: '',\r\n      collateral: '',\r\n    },\r\n    duration: {\r\n      startDate: defaultStartDate.toDate(),\r\n      endDate: defaultStartDate.add(3, 'days').toDate(),\r\n    },\r\n    weights: {\r\n      startWeight: 0.9,\r\n      endWeight: 0.1,\r\n    },\r\n    description: '',\r\n    media: {\r\n      website: '',\r\n      telegram: '',\r\n      twitter: '',\r\n      discord: '',\r\n      medium: '',\r\n    },\r\n    countries: [],\r\n    swapFee: DEFAULT_SWAP_FEE,\r\n    permissions: {\r\n      pauseTrading: true,\r\n      pullLiquidity: true,\r\n    },\r\n    step: STEPS.STEP1,\r\n  };\r\n\r\n  const [auction, setAuction] = useState<AuctionType>(initialLbpState);\r\n  const [auctionNetwork, setAuctionNetwork] = useState<string>('');\r\n  const [isSuccess, setIsSuccess] = useState<boolean>(false);\r\n\r\n  const [activeStep, setActiveStep] = useState<\r\n    typeof STEPS[keyof typeof STEPS]\r\n  >(STEPS.STEP1);\r\n\r\n  const childRef = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [activeStep]);\r\n\r\n  const projectSteps = [\r\n    {\r\n      step: STEPS.STEP1,\r\n      label: 'Setup Main Token',\r\n      component: (\r\n        <StepOverview\r\n          ref={childRef}\r\n          auction={auction}\r\n          onClickNext={() => goToNextStep()}\r\n          onChangeNetworkAuction={(value) => setAuctionNetwork(value)}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      step: STEPS.STEP2,\r\n      label: 'Pool Setup',\r\n      component: (\r\n        <StepPoolSetup\r\n          ref={childRef}\r\n          auction={auction}\r\n          onClickNext={() => goToNextStep()}\r\n          onClickBack={() => goToPrevious()}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      step: STEPS.STEP3,\r\n      label: 'Pool Info',\r\n      component: (\r\n        <StepPoolInfo\r\n          ref={childRef}\r\n          onClickBack={() => goToPrevious()}\r\n          onClickNext={() => goToNextStep()}\r\n          auction={auction}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      step: STEPS.STEP4,\r\n      label: 'Auction Preview',\r\n      component: (\r\n        <StepPreview\r\n          ref={childRef}\r\n          auction={auction}\r\n          onClickBack={() => goToPrevious()}\r\n          onClickNext={() => goToNextStep()}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      step: STEPS.STEP5,\r\n      label: 'Create Auction',\r\n      component: (\r\n        <StepCreateLbp\r\n          ref={childRef}\r\n          auction={auction}\r\n          onClickBack={() => goToPrevious()}\r\n          onSuccess={() => setIsSuccess(true)}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const goToNextStep = () => {\r\n    setActiveStep(activeStep + 1);\r\n    if (childRef && childRef.current) {\r\n      childRef.current.validate();\r\n      if (childRef.current.auction) {\r\n        setAuction({ ...auction, ...childRef.current.auction });\r\n      } else {\r\n        setAuction({ ...auction });\r\n      }\r\n    }\r\n  };\r\n\r\n  const goToPrevious = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  return (\r\n    <BasePage>\r\n      <AppStepProgress\r\n        title=\"Create Auction\"\r\n        onBack={onBack}\r\n        steps={projectSteps}\r\n        stepActive={activeStep}\r\n        isSuccess={isSuccess}\r\n      />\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default AuctionCreate;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\index.tsx",["1082","1083","1084"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\role\\part\\FormRole.tsx",["1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096"],"import Card from 'src/components/Card';\r\nimport 'src/styles/pages/UserDetail.scss';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Stack,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Checkbox,\r\n} from '@chakra-ui/react';\r\nimport AppInput from 'src/components/AppInput';\r\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport AppTextarea from 'src/components/AppTextarea';\r\nimport AppButton from 'src/components/AppButton';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { Link } from 'react-router-dom';\r\nimport { isMobile } from 'react-device-detect';\r\nimport AppSearch from 'src/components/AppSearch';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport { createValidator } from 'src/utils/utils-validator';\r\n\r\ninterface IPermissions {\r\n  permissionName: string;\r\n  serviceName: string;\r\n}\r\n\r\ninterface IGroup {\r\n  groupId: string;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\ninterface IFormRole {\r\n  type: string;\r\n  roleInfo?: any;\r\n  onSubmitForm: (data: any) => void;\r\n  isLoading: boolean;\r\n  permissions?: string[];\r\n}\r\n\r\ninterface IDefaultRoleInfo {\r\n  name: string;\r\n  description: string;\r\n  permissionNames: string[];\r\n  groupIds: string[];\r\n}\r\n\r\nconst FormRole = ({\r\n  type,\r\n  roleInfo,\r\n  onSubmitForm,\r\n  isLoading,\r\n  permissions,\r\n}: IFormRole) => {\r\n  const initRoleInfoState: IDefaultRoleInfo = {\r\n    name: roleInfo?.name || '',\r\n    description: roleInfo?.description || '',\r\n    permissionNames: permissions || [],\r\n    groupIds: roleInfo?.groupIds || [],\r\n  };\r\n  const [dataForm, setDataForm] = useState(initRoleInfoState);\r\n  const [searchPermission, setSearchPermission] = useState<string>('');\r\n  const [permissionSelected, setPermissionSelected] = useState<string[]>([]);\r\n  const [searchGroup, setSearchGroup] = useState<string>('');\r\n  const [groupSelected, setGroupSelected] = useState<string[]>([]);\r\n  const [isDisableSubmit, setDisableSubmit] = useState<boolean>(true);\r\n\r\n  const onSubmit = async () => {\r\n    onSubmitForm(dataForm);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDataForm({\r\n      ...dataForm,\r\n      groupIds: groupSelected,\r\n      permissionNames: permissionSelected,\r\n    });\r\n  }, [groupSelected, permissionSelected, permissions]);\r\n\r\n  useEffect(() => {\r\n    permissions && setPermissionSelected(permissions);\r\n  }, [permissions]);\r\n\r\n  useEffect(() => {\r\n    roleInfo && roleInfo?.groupIds && setGroupSelected(roleInfo?.groupIds);\r\n  }, [roleInfo]);\r\n\r\n  const validator = useRef(\r\n    createValidator({\r\n      element: (message: string) => <Text color={'red.500'}>{message}</Text>,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    setDisableSubmit(!validator.current.allValid());\r\n  }, [dataForm.name, dataForm.description]);\r\n\r\n  const _renderGroupButtonSubmit = () => {\r\n    return (\r\n      <Flex justifyContent=\"space-between\" width=\"100%\">\r\n        <Link to=\"/roles\">\r\n          <AppButton variant=\"outline\">Back</AppButton>\r\n        </Link>\r\n\r\n        <AppButton\r\n          onClick={onSubmit}\r\n          isLoading={isLoading}\r\n          disabled={isDisableSubmit}\r\n        >\r\n          Save\r\n        </AppButton>\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const _renderDescriptionCreateRole = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"title\">Create Role</div>\r\n        <div className=\"description\">Here you can create a role.</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const _renderDescriptionEditRole = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"title\">Role Settings</div>\r\n        <div className=\"description\">Here you can change role information</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const _renderDescription = (value: string) => {\r\n    return value.length > 50 ? `${value.slice(0, 50)}...` : value;\r\n  };\r\n  const requestParamsPermission = useMemo(() => {\r\n    return {\r\n      permissionName: searchPermission,\r\n    };\r\n  }, [searchPermission]);\r\n\r\n  const _renderListPermission = () => {\r\n    const getPermission = async (payload?: any) => {\r\n      const data = await rf.getRequest('AdminRequest').getPermissions(payload);\r\n      return { ...data, docs: data.docs };\r\n    };\r\n\r\n    const _renderBodyTablePermission = (dataTable: any) => {\r\n      return (\r\n        <Tbody>\r\n          {dataTable.map((permission: any, index: number) => {\r\n            return (\r\n              <Tr key={index}>\r\n                <Td>\r\n                  <Checkbox\r\n                    isChecked={permissionSelected.some(\r\n                      (item: string) => item === permission.permissionName,\r\n                    )}\r\n                    value={permission.permissionName}\r\n                    onChange={(e) => {\r\n                      if (e.target.checked) {\r\n                        setPermissionSelected([\r\n                          ...permissionSelected,\r\n                          permission.permissionName,\r\n                        ]);\r\n                        return;\r\n                      }\r\n                      setPermissionSelected(\r\n                        permissionSelected.filter(\r\n                          (item: string) => item !== permission.permissionName,\r\n                        ),\r\n                      );\r\n                    }}\r\n                  />\r\n                </Td>\r\n                <Td>{permission.permissionName}</Td>\r\n                <Td>{permission.serviceName}</Td>\r\n              </Tr>\r\n            );\r\n          })}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTablePermission = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th />\r\n            <Th>Permission Name</Th>\r\n            <Th>Service Name</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Flex\r\n          my={'20px'}\r\n          justifyContent=\"space-between\"\r\n          flexDirection={isMobile ? 'column' : 'row'}\r\n        >\r\n          <Box width={isMobile ? '100%' : '300px'}>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: any) => setSearchPermission(e.target.value)}\r\n            />\r\n          </Box>\r\n\r\n          <Flex mt={isMobile ? '5' : 0}>\r\n            <Text fontWeight=\"700\" mr={1}>\r\n              {permissionSelected.length}\r\n            </Text>\r\n            permission selected\r\n          </Flex>\r\n        </Flex>\r\n        <AppDataTable\r\n          requestParams={requestParamsPermission}\r\n          limit={10}\r\n          renderHeader={_renderHeaderTablePermission}\r\n          renderBody={_renderBodyTablePermission}\r\n          fetchData={getPermission}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const requestParamsGroups = useMemo(() => {\r\n    return {\r\n      name: searchGroup,\r\n    };\r\n  }, [searchGroup]);\r\n\r\n  const _renderListGroup = () => {\r\n    const getGroup = async (payload?: any) => {\r\n      const data = await rf.getRequest('AdminRequest').getGroups(payload);\r\n      return { ...data, docs: data.docs };\r\n    };\r\n\r\n    const _renderBodyTableGroups = (dataTable: any) => {\r\n      return (\r\n        <Tbody>\r\n          {dataTable.map((group: any, index: number) => {\r\n            return (\r\n              <Tr key={index}>\r\n                <Td>\r\n                  <Checkbox\r\n                    isChecked={groupSelected.some(\r\n                      (item: string) => item === group.groupId,\r\n                    )}\r\n                    value={group.groupId}\r\n                    onChange={(e) => {\r\n                      if (e.target.checked) {\r\n                        setGroupSelected([...groupSelected, group.groupId]);\r\n                        return;\r\n                      }\r\n                      setGroupSelected(\r\n                        groupSelected.filter(\r\n                          (item: string) => item !== group.groupId,\r\n                        ),\r\n                      );\r\n                    }}\r\n                  />\r\n                </Td>\r\n                <Td>{group.name}</Td>\r\n                <Td>{_renderDescription(group.description)}</Td>\r\n              </Tr>\r\n            );\r\n          })}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTableGroups = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th />\r\n            <Th>Name</Th>\r\n            <Th>Description</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Flex\r\n          my={'20px'}\r\n          justifyContent=\"space-between\"\r\n          flexDirection={isMobile ? 'column' : 'row'}\r\n        >\r\n          <Box width={isMobile ? '100%' : '300px'}>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: any) => setSearchGroup(e.target.value)}\r\n            />\r\n          </Box>\r\n\r\n          <Flex mt={isMobile ? '5' : 0}>\r\n            <Text fontWeight=\"700\" mr={1}>\r\n              {groupSelected.length}\r\n            </Text>\r\n            groups selected\r\n          </Flex>\r\n        </Flex>\r\n        <AppDataTable\r\n          requestParams={requestParamsGroups}\r\n          limit={10}\r\n          renderHeader={_renderHeaderTableGroups}\r\n          renderBody={_renderBodyTableGroups}\r\n          fetchData={getGroup}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card className=\"user-detail\" padding=\"30px\">\r\n      {type === 'edit'\r\n        ? _renderDescriptionEditRole()\r\n        : _renderDescriptionCreateRole()}\r\n      <Flex flexWrap={'wrap'} marginX={-4} pb={4}>\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">\r\n              Name\r\n              <Text as={'span'} color={'red.500'}>\r\n                *\r\n              </Text>\r\n            </Text>\r\n            <AppInput\r\n              variant={'main'}\r\n              placeholder=\"John\"\r\n              value={dataForm.name}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  name: e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'nameRole',\r\n                validator: validator.current,\r\n                rule: ['required', `max:${100}`],\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\" mb={5}>\r\n              Select Groups\r\n            </Text>\r\n            {_renderListGroup()}\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\" mb={5}>\r\n              Select Permissions\r\n            </Text>\r\n            {_renderListPermission()}\r\n          </Stack>\r\n        </Box>\r\n\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">\r\n              Description\r\n              <Text as={'span'} color={'red.500'}>\r\n                *\r\n              </Text>\r\n            </Text>\r\n            <AppTextarea\r\n              placeholder=\"Write something about this role in 200 characters!\"\r\n              value={dataForm.description}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  description: e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'description',\r\n                validator: validator.current,\r\n                rule: ['required', `max:${200}`],\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <div className=\"btn-submit\">{_renderGroupButtonSubmit()}</div>\r\n      </Flex>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FormRole;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\steps\\StepPoolReview.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\steps\\StepPoolAllocationSetup.tsx",["1097","1098","1099","1100","1101","1102","1103","1104","1105"],"import {\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React, {\r\n  forwardRef,\r\n  Ref,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { AddMoreIcon } from 'src/assets/icons';\r\nimport { MinusMoreIcon } from 'src/assets/icons/MinusMoreIcon';\r\nimport AppButton from 'src/components/AppButton';\r\nimport AppInput from 'src/components/AppInput';\r\nimport Card from 'src/components/Card';\r\nimport { WarpBoxField } from 'src/pages/PageCreatePoolIDO/steps/StepPoolInfo';\r\nimport { getTierName } from 'src/utils/tier';\r\nimport {\r\n  PackageType,\r\n  PoolRequestType,\r\n  PoolType,\r\n  RefStepCreatePool,\r\n} from 'src/utils/utils-pool';\r\nimport { createValidator } from 'src/utils/utils-validator';\r\nimport { WarpBoxSteps } from 'src/pages/PageCreatePoolIDO';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\n\r\ninterface StepPoolAllocationSetupProps {\r\n  pool: PoolRequestType;\r\n  goToNext?: () => void;\r\n  goToPrev?: () => void;\r\n}\r\n\r\ninterface TitleHeadingProps {\r\n  title?: string;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst StepPoolAllocationSetup = forwardRef(\r\n  (props: StepPoolAllocationSetupProps, ref: Ref<RefStepCreatePool>) => {\r\n    const { pool, goToNext, goToPrev } = props;\r\n    const [internalPool, setInternalPool] = useState<PoolType>(pool);\r\n    const { user } = useAuth();\r\n\r\n    const {\r\n      inoDetails: {\r\n        packages,\r\n        ticketAllocation: { boxPerTicket, winingTickets },\r\n        maxCap,\r\n      },\r\n      network\r\n    } = internalPool;\r\n\r\n    const initPackage: PackageType = {\r\n      name: '',\r\n      price: '',\r\n      quantity: 0,\r\n      logoUrl: '',\r\n    };\r\n\r\n    useEffect(() => {\r\n      setInternalPool(pool);\r\n    }, []);\r\n\r\n    const validator = useRef(\r\n      createValidator({\r\n        element: (message: string) => <Text color={'red.500'}>{message}</Text>,\r\n      }),\r\n    );\r\n\r\n    const isCorrectNetwork = useMemo(\r\n      () => user?.getNetwork() === network,\r\n      [network, user],\r\n    );\r\n\r\n    const isInvalidWiningTickets = useMemo(() => {\r\n      return winingTickets.some((item: any) => +item.allocationSize > +maxCap) ||\r\n        winingTickets.some((item: any) => +item.individualMinTicket >= +item.individualMaxTicket);\r\n    }, [winingTickets]);\r\n\r\n    const [isDisableNextStep, setIsDisableNextStep] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n      const isDisable =\r\n        !validator.current.allValid()\r\n        || !isCorrectNetwork\r\n        || isInvalidWiningTickets;\r\n\r\n      setIsDisableNextStep(isDisable);\r\n    }, [internalPool, isCorrectNetwork]);\r\n\r\n    const validate = () => {\r\n      if (isDisableNextStep) throw new Error('Invalid validation');\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      validate,\r\n      pool: internalPool,\r\n    }));\r\n\r\n    const _renderTitle = ({ title, onClick }: TitleHeadingProps) => {\r\n      return (\r\n        <Flex alignItems={'center'} marginBottom={4}>\r\n          {title && (\r\n            <Heading as={'h4'} fontSize={'xl'} px={1}>\r\n              {title}\r\n            </Heading>\r\n          )}\r\n          {onClick && (\r\n            <AppButton\r\n              variant=\"no-effects\"\r\n              padding={'2px'}\r\n              marginLeft={2}\r\n              onClick={onClick}\r\n            >\r\n              <AddMoreIcon />\r\n            </AppButton>\r\n          )}\r\n        </Flex>\r\n      );\r\n    };\r\n\r\n    const _renderButtonMinus = (onClick?: () => void) => {\r\n      return (\r\n        <AppButton\r\n          variant=\"no-effects\"\r\n          onClick={onClick}\r\n          position={'absolute'}\r\n          right={'-20px'}\r\n          top={'-10px'}\r\n        >\r\n          <MinusMoreIcon />\r\n        </AppButton>\r\n      );\r\n    };\r\n\r\n    const _renderMessageValidateForPackageQuantity = () => {\r\n      if (\r\n        internalPool.inoDetails.packages\r\n          .map((item) => item.quantity)\r\n          .reduce((prev, curr) => prev + curr) > maxCap\r\n      ) {\r\n        return (\r\n          <Text as={'span'} color={'red.500'}>\r\n            The total package quantity size must be less than Max cap.\r\n          </Text>\r\n        );\r\n      }\r\n      return <></>;\r\n    };\r\n\r\n    const _renderPackage = () => {\r\n      const bg = useColorModeValue('secondaryGray.300', 'navy.900');\r\n\r\n      return packages.map((item, index) => (\r\n        <Box\r\n          key={index}\r\n          w={'full'}\r\n          my={4}\r\n          p={4}\r\n          bg={bg}\r\n          rounded={'xl'}\r\n          overflow={'visible'}\r\n          pos={'relative'}\r\n        >\r\n          {internalPool.inoDetails.packages.length > 1 &&\r\n            _renderButtonMinus(() =>\r\n              setInternalPool({\r\n                ...internalPool,\r\n                inoDetails: {\r\n                  ...internalPool.inoDetails,\r\n                  packages: [\r\n                    ...internalPool.inoDetails.packages.filter(\r\n                      (f, i) => i !== index,\r\n                    ),\r\n                  ],\r\n                },\r\n              }),\r\n            )}\r\n          <Flex flexWrap={'wrap'} marginX={-2}>\r\n            <Box px={2} mb={4} w={['full', '50%']}>\r\n              <Stack spacing={'1'} w={'full'}>\r\n                <Text px={'1'}>\r\n                  Package name{' '}\r\n                  <Text as={'span'} color={'red.500'}>\r\n                    *\r\n                  </Text>\r\n                </Text>\r\n                <AppInput\r\n                  value={item.name}\r\n                  onChange={(e) => {\r\n                    const newPackage = packages.map((value, id) =>\r\n                      index === id\r\n                        ? {\r\n                            ...value,\r\n                            name: e.target.value,\r\n                            packageId: index + 1,\r\n                          }\r\n                        : value,\r\n                    );\r\n                    setInternalPool({\r\n                      ...internalPool,\r\n                      inoDetails: {\r\n                        ...internalPool.inoDetails,\r\n                        packages: newPackage,\r\n                      },\r\n                    });\r\n                  }}\r\n                  validate={{\r\n                    name: `packageName ${index}`,\r\n                    validator: validator.current,\r\n                    rule: ['required'],\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Box>\r\n            <Box px={2} mb={4} w={['full', '50%']}>\r\n              <Stack spacing={'1'} w={'full'}>\r\n                <Text px={'1'}>\r\n                  Package logo Url{' '}\r\n                  <Text as={'span'} color={'red.500'}>\r\n                    *\r\n                  </Text>\r\n                </Text>\r\n                <AppInput\r\n                  value={item.logoUrl}\r\n                  onChange={(e) => {\r\n                    const newPackage = packages.map((value, id) =>\r\n                      index === id\r\n                        ? { ...value, logoUrl: e.target.value }\r\n                        : value,\r\n                    );\r\n                    setInternalPool({\r\n                      ...internalPool,\r\n                      inoDetails: {\r\n                        ...internalPool.inoDetails,\r\n                        packages: newPackage,\r\n                      },\r\n                    });\r\n                  }}\r\n                  validate={{\r\n                    name: 'PackageLogoUrl',\r\n                    validator: validator.current,\r\n                    rule: 'required|url|logoUrl',\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Box>\r\n            <Box px={2} mb={4} w={['full', '50%']}>\r\n              <Stack spacing={'1'} w={'full'}>\r\n                <Text px={'1'}>\r\n                  Package price{' '}\r\n                  <Text as={'span'} color={'red.500'}>\r\n                    *\r\n                  </Text>\r\n                </Text>\r\n                <AppInput\r\n                  type={'number'}\r\n                  value={item.price}\r\n                  onChange={(e) => {\r\n                    const newPackage = packages.map((value, id) =>\r\n                      index === id\r\n                        ? { ...value, price: e.target.value }\r\n                        : value,\r\n                    );\r\n                    setInternalPool({\r\n                      ...internalPool,\r\n                      inoDetails: {\r\n                        ...internalPool.inoDetails,\r\n                        packages: newPackage,\r\n                      },\r\n                    });\r\n                  }}\r\n                  validate={{\r\n                    name: `packagePrice${index}`,\r\n                    validator: validator.current,\r\n                    rule: [\r\n                      'required',\r\n                      'numeric',\r\n                      'integer',\r\n                      'isPositive',\r\n                      `minValue:${0}`,\r\n                    ],\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Box>\r\n            <Box px={2} mb={4} w={['full', '50%']}>\r\n              <Stack spacing={'1'} w={'full'}>\r\n                <Text px={'1'}>\r\n                  Package quantity{' '}\r\n                  <Text as={'span'} color={'red.500'}>\r\n                    *\r\n                  </Text>\r\n                </Text>\r\n                <AppInput\r\n                  type={'number'}\r\n                  value={item.quantity}\r\n                  onChange={(e) => {\r\n                    const newPackage = packages.map((value, id) =>\r\n                      index === id\r\n                        ? { ...value, quantity: +e.target.value }\r\n                        : value,\r\n                    );\r\n                    setInternalPool({\r\n                      ...internalPool,\r\n                      inoDetails: {\r\n                        ...internalPool.inoDetails,\r\n                        packages: newPackage,\r\n                      },\r\n                    });\r\n                  }}\r\n                  validate={{\r\n                    name: `packageQuantity ${index}`,\r\n                    validator: validator.current,\r\n                    rule: [\r\n                      'required',\r\n                      'numeric',\r\n                      'integer',\r\n                      'isPositive',\r\n                      `minValue:${0}`,\r\n                    ],\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Box>\r\n          </Flex>\r\n        </Box>\r\n      ));\r\n    };\r\n\r\n    const _renderMessageValidateForAllocationSize = (ticket: any) => {\r\n      if (+ticket.allocationSize && +ticket.allocationSize > +maxCap) {\r\n        return (\r\n          <Text as={'span'} color={'red.500'}>\r\n            The allocation size must be less than swap amount.\r\n          </Text>\r\n        );\r\n      }\r\n      return <></>;\r\n    };\r\n\r\n    const _renderMessageValidateForIndividualMinTicket = (ticket: any) => {\r\n      if (\r\n        ticket.individualMinTicket &&\r\n        ticket.individualMaxTicket &&\r\n        +ticket.individualMinTicket >= +ticket.individualMaxTicket\r\n      ) {\r\n        return (\r\n          <Text as={'span'} color={'red.500'}>\r\n            The individual min ticket must be less than individual max ticket.\r\n          </Text>\r\n        );\r\n      }\r\n      return <></>;\r\n    };\r\n\r\n    const _renderMessageValidateForIndividualMaxTicket = (ticket: any) => {\r\n      if (\r\n        ticket.individualMinTicket &&\r\n        ticket.individualMaxTicket &&\r\n        +ticket.individualMinTicket >= +ticket.individualMaxTicket\r\n      ) {\r\n        return (\r\n          <Text as={'span'} color={'red.500'}>\r\n            The individual min ticket must be greater than individual max\r\n            ticket.\r\n          </Text>\r\n        );\r\n      }\r\n      return <></>;\r\n    };\r\n\r\n    const _renderWiningTicket = () => {\r\n      const bg = useColorModeValue('secondaryGray.300', 'navy.900');\r\n      return winingTickets.map((ticket: any, index: number) => (\r\n        <Box\r\n          key={index}\r\n          w={'full'}\r\n          my={4}\r\n          p={4}\r\n          bg={bg}\r\n          rounded={'xl'}\r\n          overflow={'visible'}\r\n          pos={'relative'}\r\n        >\r\n          <Flex flexWrap={'wrap'} marginX={-2}>\r\n            <WarpBoxField label={'Tier'}>\r\n              <AppInput value={getTierName(ticket.tier)} isReadOnly />\r\n            </WarpBoxField>\r\n\r\n            <WarpBoxField label={'Allocation Size'} isRequired>\r\n              <AppInput\r\n                value={ticket.allocationSize}\r\n                onChange={(e) => {\r\n                  const newTicket = winingTickets.map(\r\n                    (value: any, id: number) =>\r\n                      index === id\r\n                        ? {\r\n                            ...value,\r\n                            allocationSize: +e.target.value,\r\n                          }\r\n                        : value,\r\n                  );\r\n                  setInternalPool({\r\n                    ...internalPool,\r\n                    inoDetails: {\r\n                      ...internalPool.inoDetails,\r\n                      ticketAllocation: {\r\n                        ...internalPool.inoDetails.ticketAllocation,\r\n                        winingTickets: newTicket,\r\n                      },\r\n                    },\r\n                  });\r\n                }}\r\n                validate={{\r\n                  name: 'allocationSize',\r\n                  validator: validator.current,\r\n                  rule: ['required', 'numeric', 'isPositive', `minValue:${0}`],\r\n                }}\r\n              />\r\n              {_renderMessageValidateForAllocationSize(ticket)}\r\n            </WarpBoxField>\r\n\r\n            <WarpBoxField label={'Individual Min Ticket'} isRequired>\r\n              <AppInput\r\n                value={ticket.individualMinTicket}\r\n                onChange={(e) => {\r\n                  const newTicket = winingTickets.map(\r\n                    (value: any, id: number) =>\r\n                      index === id\r\n                        ? { ...value, individualMinTicket: +e.target.value }\r\n                        : value,\r\n                  );\r\n                  setInternalPool({\r\n                    ...internalPool,\r\n                    inoDetails: {\r\n                      ...internalPool.inoDetails,\r\n                      ticketAllocation: {\r\n                        ...internalPool.inoDetails.ticketAllocation,\r\n                        winingTickets: newTicket,\r\n                      },\r\n                    },\r\n                  });\r\n                }}\r\n                validate={{\r\n                  name: 'individualMinTicket',\r\n                  validator: validator.current,\r\n                  rule: ['required', 'numeric', 'isPositive'],\r\n                }}\r\n              />\r\n\r\n              {_renderMessageValidateForIndividualMinTicket(ticket)}\r\n            </WarpBoxField>\r\n\r\n            <WarpBoxField label={'Individual Max Ticket'} isRequired>\r\n              <AppInput\r\n                value={ticket.individualMaxTicket}\r\n                onChange={(e) => {\r\n                  const newTicket = winingTickets.map(\r\n                    (value: any, id: number) =>\r\n                      index === id\r\n                        ? { ...value, individualMaxTicket: +e.target.value }\r\n                        : value,\r\n                  );\r\n                  setInternalPool({\r\n                    ...internalPool,\r\n                    inoDetails: {\r\n                      ...internalPool.inoDetails,\r\n                      ticketAllocation: {\r\n                        ...internalPool.inoDetails.ticketAllocation,\r\n                        winingTickets: newTicket,\r\n                      },\r\n                    },\r\n                  });\r\n                }}\r\n                validate={{\r\n                  name: 'individualMaxTicket',\r\n                  validator: validator.current,\r\n                  rule: ['required', 'numeric', 'isPositive'],\r\n                }}\r\n              />\r\n\r\n              {_renderMessageValidateForIndividualMaxTicket(ticket)}\r\n            </WarpBoxField>\r\n          </Flex>\r\n        </Box>\r\n      ));\r\n    };\r\n\r\n    return (\r\n      <WarpBoxSteps network={network}>\r\n        <Card pt={6} mb={6} variant={'sub'}>\r\n          {_renderTitle({\r\n            title: 'Packages',\r\n            onClick: () => {\r\n              setInternalPool({\r\n                ...internalPool,\r\n                inoDetails: {\r\n                  ...internalPool.inoDetails,\r\n                  packages: [...internalPool.inoDetails.packages, initPackage],\r\n                },\r\n              });\r\n            },\r\n          })}\r\n          {_renderPackage()}\r\n          {_renderMessageValidateForPackageQuantity()}\r\n        </Card>\r\n\r\n        <Card pt={6} mb={6} variant={'sub'}>\r\n          {_renderTitle({\r\n            title: 'Ticket allocation',\r\n          })}\r\n          <Flex flexWrap={'wrap'} marginX={-2}>\r\n            <Box px={2} mb={4} w={'full'}>\r\n              <Stack spacing={'1'} w={'full'}>\r\n                <Text px={'1'}>\r\n                  Box per ticket{' '}\r\n                  <Text as={'span'} color={'red.500'}>\r\n                    *\r\n                  </Text>\r\n                </Text>\r\n                <AppInput\r\n                  value={boxPerTicket}\r\n                  onChange={(e) =>\r\n                    setInternalPool({\r\n                      ...internalPool,\r\n                      inoDetails: {\r\n                        ...internalPool.inoDetails,\r\n                        ticketAllocation: {\r\n                          ...internalPool.inoDetails.ticketAllocation,\r\n                          boxPerTicket: +e.target.value,\r\n                        },\r\n                      },\r\n                    })\r\n                  }\r\n                  validate={{\r\n                    name: 'boxPerTicket',\r\n                    validator: validator.current,\r\n                    rule: [\r\n                      'required',\r\n                      'numeric',\r\n                      'isPositive',\r\n                      `minValue:${0}`,\r\n                    ],\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Box>\r\n          </Flex>\r\n          {_renderWiningTicket()}\r\n        </Card>\r\n        <Flex justifyContent={'space-between'}>\r\n          <AppButton onClick={goToPrev} minW={'24'} variant={'lightBrand'}>\r\n            Previous\r\n          </AppButton>\r\n          <AppButton\r\n            variant={'brand'}\r\n            onClick={goToNext}\r\n            disabled={isDisableNextStep}\r\n            minW={'24'}\r\n          >\r\n            Next\r\n          </AppButton>\r\n        </Flex>\r\n      </WarpBoxSteps>\r\n    );\r\n  },\r\n);\r\n\r\nexport default StepPoolAllocationSetup;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\steps\\StepPoolTokenSetup.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\steps\\StepPoolInfo.tsx",["1106","1107","1108","1109","1110","1111"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepCreateAuction.tsx",["1112","1113","1114","1115","1116","1117"],"import React, {\r\n  forwardRef,\r\n  Ref,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useState,\r\n  FC,\r\n} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport _ from 'lodash';\r\nimport { defaultAbiCoder, Interface } from '@ethersproject/abi';\r\nimport BigNumber from 'bignumber.js';\r\nimport { AuctionType, RefStep } from 'src/utils/utils-auction';\r\nimport {\r\n  formatShortAddress,\r\n  formatTimestamp,\r\n  formatToPercent,\r\n  convertDecToWei,\r\n  formatNumber,\r\n} from 'src/utils/utils-formats';\r\nimport abi from 'src/abi';\r\nimport { processTransaction } from 'src/store/transactions';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport config from 'src/config';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport AppButton from 'src/components/AppButton';\r\nimport {\r\n  getAllowance,\r\n  areTokensApproved,\r\n  makeApproveParams,\r\n} from 'src/utils/utils-token';\r\nimport moment from 'moment';\r\nimport { toastError } from 'src/utils/utils-notify';\r\nimport Card from 'src/components/Card';\r\nimport { Box, Heading, Text, Flex, Spinner } from '@chakra-ui/react';\r\nimport { CheckCircleIcon, CopyIcon } from '@chakra-ui/icons';\r\nimport { copyToClipboard } from 'src/utils/utils-helpers';\r\nimport { TIME_FORMAT } from 'src/utils/utils-auction';\r\nimport { CreatedTransactionIcon, NoTransactionIcon } from 'src/assets/icons';\r\nimport { isMobile } from 'react-device-detect';\r\nimport ModalStuck from 'src/modals/ModalStuck';\r\nimport { MessageNetworkNotIsCorrect } from '../index';\r\n\r\ninterface CreateLbpProps {\r\n  auction: AuctionType;\r\n  onClickBack: () => void;\r\n  onSuccess: () => void;\r\n}\r\n\r\ninterface IButtonApprove {\r\n  token: any;\r\n  network: string;\r\n  fetchAllowance: () => void;\r\n}\r\n\r\ninterface DataCompare {\r\n  address: string;\r\n  amount: string;\r\n  startWeight: string;\r\n  endWeight: string;\r\n}\r\n\r\nexport const ButtonApprove: FC<IButtonApprove> = ({\r\n  token,\r\n  network,\r\n  fetchAllowance,\r\n}) => {\r\n  const [isTokenApproved, setIsTokenApproved] = useState<boolean>(false);\r\n  const [isTokenApproving, setIsTokenApproving] = useState<boolean>(false);\r\n\r\n  const dispatch = useDispatch<any>();\r\n  const { user } = useAuth();\r\n  const onClickApproveToken = async () => {\r\n    if (!token?.address) {\r\n      return;\r\n    }\r\n    const params = makeApproveParams(\r\n      token?.address,\r\n      config.networks[network].addresses.auctionProxy,\r\n    );\r\n    setIsTokenApproving(true);\r\n    await dispatch(\r\n      processTransaction({ provider: user?.getProvider(), params }),\r\n    );\r\n    checkTokenAllowance().then();\r\n    fetchAllowance();\r\n  };\r\n\r\n  const checkTokenAllowance = async () => {\r\n    if (!network || !token.address || !user) return false;\r\n    try {\r\n      setIsTokenApproving(true);\r\n      const tokenAllowance = await getAllowance(\r\n        network,\r\n        token.address,\r\n        user?.getAddress(),\r\n        config.networks[network].addresses.auctionProxy,\r\n      );\r\n      setIsTokenApproving(false);\r\n      return setIsTokenApproved(new BigNumber(tokenAllowance).gt(0));\r\n    } catch (error) {\r\n      setIsTokenApproving(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkTokenAllowance();\r\n  }, [token, user?.getAddress()]);\r\n\r\n  return (\r\n    <>\r\n      <AppButton\r\n        onClick={onClickApproveToken}\r\n        isDisabled={isTokenApproved || network !== user?.getNetwork()}\r\n        isLoading={isTokenApproving}\r\n        mr={isMobile ? 0 : 3}\r\n        mt={2}\r\n        width={isMobile ? '100%' : 'auto'}\r\n      >\r\n        Approve {token.symbol.toUpperCase()}\r\n      </AppButton>\r\n    </>\r\n  );\r\n};\r\n\r\nconst StepCreateLbp = forwardRef((props: CreateLbpProps, ref: Ref<RefStep>) => {\r\n  const { auction, onClickBack, onSuccess } = props;\r\n  const [isLbpCreated, setIsLbpCreated] = useState<boolean>(false);\r\n  const [isLbpCreating, setIsLbpCreating] = useState<boolean>(false);\r\n  const [createdAuctionId, setCreatedAuctionId] = useState('');\r\n  const [LBPNetworkAddress, setLBPNetworkAddress] = useState('');\r\n  const [areAllTokensApproved, setAreAllTokensApproved] =\r\n    useState<boolean>(false);\r\n  const [isOpenModalStuck, setIsOpenModalStuck] = useState<boolean>(false);\r\n  const [txHash, setTxHash] = useState<string>('');\r\n  const [isError, setIsError] = useState<boolean>(false);\r\n  const [isSuccess, setIsSuccess] = useState<boolean>(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const {\r\n    network,\r\n    token,\r\n    collateralToken,\r\n    depositToken,\r\n    weights,\r\n    swapFee,\r\n    duration,\r\n    media,\r\n    description,\r\n  } = auction;\r\n\r\n  const dispatch = useDispatch<any>();\r\n  const { user } = useAuth();\r\n\r\n  const isNetworkCorrect = network === user?.getNetwork();\r\n\r\n  const validate = () => {\r\n    return;\r\n  };\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    validate,\r\n  }));\r\n\r\n  const _renderButtonTitle = () => {\r\n    if (isLbpCreated) {\r\n      return 'View Auction';\r\n    }\r\n\r\n    return `Schedule ${token.symbol.toUpperCase()} Auction`;\r\n  };\r\n\r\n  const createTransaction = async () => {\r\n    const nowDate = moment(moment.utc().format('yyyy-MM-DD HH:mm:ss')).toDate();\r\n\r\n    if (nowDate > duration.endDate) {\r\n      toastError({ message: 'The start time must be after the current time.' });\r\n      return;\r\n    }\r\n\r\n    if (nowDate > duration.endDate) {\r\n      toastError({ message: 'The end time must be after the current time.' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = [\r\n        {\r\n          address: token.address,\r\n          amount: convertDecToWei(depositToken.launch.toString(), token.decimals),\r\n          startWeight: convertDecToWei(weights.startWeight.toString()),\r\n          endWeight: convertDecToWei(weights.endWeight.toString()),\r\n        },\r\n        {\r\n          address: collateralToken.address,\r\n          amount: convertDecToWei(\r\n            depositToken.collateral.toString(),\r\n            collateralToken.decimals,\r\n          ),\r\n          startWeight: convertDecToWei(\r\n            new BigNumber(1).minus(weights.startWeight).toString(),\r\n          ),\r\n          endWeight: convertDecToWei(\r\n            new BigNumber(1).minus(weights.endWeight).toString(),\r\n          ),\r\n        },\r\n      ];\r\n      data.sort((a: DataCompare, b: DataCompare) => {\r\n        if (a.address.toLowerCase() < b.address.toLowerCase()) {\r\n          return -1;\r\n        }\r\n        return 1;\r\n      });\r\n      const [token1, token2] = data;\r\n      const amounts = [token1.amount, token2.amount];\r\n      const userData = defaultAbiCoder.encode(\r\n        ['uint256', 'uint256[]'],\r\n        [0, amounts],\r\n      );\r\n      const isCorrectOrder =\r\n        token1.address.toLowerCase() === collateralToken.address.toLowerCase();\r\n      const paramsSend = [\r\n        `${token.symbol} Token Launch Auction`,\r\n        `${token.symbol}_TLA`,\r\n        [token1.address, token2.address],\r\n        [token1.amount, token2.amount],\r\n        [token1.startWeight, token2.startWeight],\r\n        [token1.endWeight, token2.endWeight],\r\n        isCorrectOrder,\r\n        Math.floor(+convertDecToWei(swapFee.toString())).toString(),\r\n        userData,\r\n        Math.floor(\r\n          moment\r\n            .utc(moment(duration.startDate).format('yyyy-MM-DD HH:mm:ss'))\r\n            .valueOf() / 1000,\r\n        ),\r\n        Math.floor(\r\n          moment\r\n            .utc(moment(duration.endDate).format('yyyy-MM-DD HH:mm:ss'))\r\n            .valueOf() / 1000,\r\n        ),\r\n      ];\r\n\r\n      const params = [\r\n        abi['LBPProxy'],\r\n        config.networks[network].addresses.auctionProxy,\r\n        'createAuction',\r\n        [paramsSend],\r\n        {},\r\n      ];\r\n\r\n      const transaction: any = await dispatch(\r\n        processTransaction({provider: user?.getProvider(), params}),\r\n      );\r\n      const provider = user?.getProvider();\r\n      if (provider && transaction) {\r\n        const transactionHash = transaction.payload.hash;\r\n        const receipt = await provider.getTransactionReceipt(transactionHash);\r\n        const itf = new Interface(abi['LBPProxy']);\r\n        receipt.logs.forEach((log) => {\r\n          try {\r\n            const decodeLog = itf.parseLog(log);\r\n            if (decodeLog && decodeLog.name === 'PoolCreated') {\r\n              setLBPNetworkAddress(decodeLog.args[0]);\r\n            }\r\n          } catch (e) {\r\n          }\r\n        });\r\n        return transaction;\r\n      }\r\n      return transaction;\r\n    } catch {\r\n      setIsLbpCreating(false);\r\n    }\r\n  };\r\n\r\n  const createAuction = async (txHash: string) => {\r\n    const socialLinks = _.pickBy(\r\n      {\r\n        website: media.website,\r\n        telegram: media.telegram,\r\n        twitter: media.twitter,\r\n        discord: media.discord,\r\n        medium: media.medium,\r\n      },\r\n      (item) => !!item,\r\n    );\r\n    const createAuctionParams = {\r\n      network,\r\n      creationTx: txHash,\r\n      logoUrl: token.logo,\r\n      description,\r\n      draftInfo: {\r\n        tokens: [\r\n          {\r\n            address: token.address,\r\n            name: token.name,\r\n            symbol: token.symbol,\r\n            decimals: token.decimals,\r\n          },\r\n          {\r\n            address: collateralToken.address,\r\n            name: collateralToken.name,\r\n            symbol: collateralToken.symbol,\r\n            decimals: collateralToken.decimals,\r\n          },\r\n        ],\r\n        amounts: [\r\n          convertDecToWei(depositToken.launch.toString(), token.decimals),\r\n          convertDecToWei(\r\n            depositToken.collateral.toString(),\r\n            collateralToken.decimals,\r\n          ),\r\n        ],\r\n        startTime: Math.floor(\r\n          moment\r\n            .utc(moment(duration.startDate).format('yyyy-MM-DD HH:mm:ss'))\r\n            .valueOf() / 1000,\r\n        ),\r\n        endTime: Math.floor(\r\n          moment\r\n            .utc(moment(duration.endDate).format('yyyy-MM-DD HH:mm:ss'))\r\n            .valueOf() / 1000,\r\n        ),\r\n        startWeights: [\r\n          convertDecToWei(weights.startWeight.toString()),\r\n          convertDecToWei(\r\n            new BigNumber(1).minus(weights.startWeight).toString(),\r\n          ),\r\n        ],\r\n        endWeights: [\r\n          convertDecToWei(weights.endWeight.toString()),\r\n          convertDecToWei(new BigNumber(1).minus(weights.endWeight).toString()),\r\n        ],\r\n        swapFee: swapFee,\r\n      },\r\n      socialLinks,\r\n    };\r\n    try {\r\n      const res = await rf\r\n        .getRequest('AuctionRequest')\r\n        .createAuction(_.pickBy(createAuctionParams, (item) => !!item));\r\n      setCreatedAuctionId(res.id);\r\n      setIsLbpCreating(false);\r\n      setIsLbpCreated(true);\r\n      onSuccess();\r\n      setIsSuccess(true);\r\n      setTxHash('');\r\n    } catch (error: any) {\r\n      setIsLbpCreating(false);\r\n      setIsError(true);\r\n      toastError(error);\r\n    }\r\n  };\r\n\r\n  const onClickCreateLbp = async () => {\r\n    setIsLbpCreating(true);\r\n    const transaction = await createTransaction();\r\n    const txHash = transaction?.payload?.hash;\r\n    if (!txHash) {\r\n      setIsLbpCreating(false);\r\n      return;\r\n    } else {\r\n      await createAuction(txHash);\r\n    }\r\n  };\r\n\r\n  const onClickViewLbp = () => {\r\n    history.push(`/auction/${createdAuctionId}`);\r\n  };\r\n\r\n  const onHandleCreateLbp = () => {\r\n    if (isLbpCreated) {\r\n      onClickViewLbp();\r\n    } else {\r\n      onClickCreateLbp();\r\n    }\r\n  };\r\n\r\n  const checkAllTokenApproved = async () => {\r\n    const isAllTokenApproved = await areTokensApproved(\r\n      auction.network,\r\n      auction.token.address,\r\n      auction.collateralToken.address,\r\n      user?.getAddress(),\r\n    );\r\n    setAreAllTokensApproved(isAllTokenApproved);\r\n  };\r\n\r\n  const handleCloseModalStuck = () => {\r\n    setIsOpenModalStuck(false);\r\n    setIsSuccess(false);\r\n    setIsError(false);\r\n    setTxHash('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkAllTokenApproved();\r\n  }, [auction, user]);\r\n\r\n  const isDisabledBackStep = isLbpCreated || isLbpCreating;\r\n\r\n  const _renderButtonsApprove = () => {\r\n    return (\r\n      <Flex flexWrap={'wrap'}>\r\n        <ButtonApprove\r\n          token={collateralToken}\r\n          network={network}\r\n          fetchAllowance={checkAllTokenApproved}\r\n        />\r\n        <ButtonApprove\r\n          token={token}\r\n          network={network}\r\n          fetchAllowance={checkAllTokenApproved}\r\n        />\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const _renderButtonsCreateLBP = () => {\r\n    return (\r\n      <Flex>\r\n        {!isLbpCreated && !isMobile && (\r\n          <Box>\r\n            <AppButton\r\n              onClick={() => setIsOpenModalStuck(true)}\r\n              isDisabled={!areAllTokensApproved || !isNetworkCorrect}\r\n              mr={3}\r\n            >\r\n              Stuck?\r\n            </AppButton>\r\n          </Box>\r\n        )}\r\n        <Box width={'100%'}>\r\n          <AppButton\r\n            onClick={onHandleCreateLbp}\r\n            isDisabled={\r\n              isLbpCreating || !areAllTokensApproved || !isNetworkCorrect\r\n            }\r\n            width={'100%'}\r\n            isLoading={isLbpCreating}\r\n          >\r\n            {_renderButtonTitle()}\r\n          </AppButton>\r\n        </Box>\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const _renderAuctionInfo = () => {\r\n    return (\r\n      <Box>\r\n        <Text fontWeight={'700'} mb={4}>\r\n          Schedule Auction\r\n        </Text>\r\n        <Flex mb={2}>\r\n          <Text>Auction network address:</Text>\r\n          <Text fontWeight={'700'} ml={2}>\r\n            {LBPNetworkAddress ? (\r\n              <>\r\n                {formatShortAddress(LBPNetworkAddress)}\r\n                <CopyIcon\r\n                  ml={2}\r\n                  color={'green.500'}\r\n                  onClick={() => copyToClipboard(LBPNetworkAddress)}\r\n                  cursor={'pointer'}\r\n                />\r\n              </>\r\n            ) : (\r\n              'Not yet created'\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb={2}>\r\n          <Text>Main token amount:</Text>\r\n          <Text fontWeight={'700'} ml={2}>\r\n            {formatNumber(depositToken.launch)} {token.symbol.toUpperCase()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb={2}>\r\n          <Text>Base token amount:</Text>\r\n          <Text fontWeight={'700'} ml={2}>\r\n            {formatNumber(depositToken.collateral)}{' '}\r\n            {collateralToken.symbol.toUpperCase()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb={2}>\r\n          <Text>Swap fee:</Text>\r\n          <Text fontWeight={'700'} ml={2}>\r\n            {formatToPercent(swapFee)}\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb={2}>\r\n          <Text>Platform access fee:</Text>\r\n          <Text fontWeight={'700'} ml={2}>\r\n            2%\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb={2}>\r\n          <Text>Start time:</Text>\r\n          <Text fontWeight={'700'} ml={2}>\r\n            {formatTimestamp(duration.startDate.getTime(), TIME_FORMAT)}\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb={2}>\r\n          <Text>End time:</Text>\r\n          <Text fontWeight={'700'} ml={2}>\r\n            {formatTimestamp(duration.endDate.getTime(), TIME_FORMAT)}\r\n          </Text>\r\n        </Flex>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        {!isNetworkCorrect && <MessageNetworkNotIsCorrect network={network} />}\r\n        <Box>\r\n          <Heading as=\"h3\" size=\"lg\">\r\n            Sign Creation Transactions\r\n          </Heading>\r\n          <Text mb={5} mt={3}>\r\n            Now that your auction configuration is ready you need to deploy it\r\n            to the blockchain network. To do so you must sign 3 transactions\r\n            using your wallet\r\n          </Text>\r\n          <Heading as=\"h5\" size=\"md\">\r\n            Approve interactions with main and base tokens{' '}\r\n            {areAllTokensApproved && (\r\n              <CheckCircleIcon ml={2} color={'green.400'} />\r\n            )}\r\n          </Heading>\r\n          <Flex flexWrap={'wrap'} justifyContent={'space-between'}>\r\n            <Box width={['100%', '63%']} mt={5}>\r\n              <Card variant={'sub'}>\r\n                {_renderAuctionInfo()}\r\n                <Box mt={5}>{_renderButtonsApprove()}</Box>\r\n                {!areAllTokensApproved && (\r\n                  <Box color={'orange.400'} mt={3}>\r\n                    You must approve interactions with main and base tokens to\r\n                    complete the last step of Auction creation.\r\n                  </Box>\r\n                )}\r\n              </Card>\r\n            </Box>\r\n            <Box width={['100%', '35%']} mt={5}>\r\n              <Card\r\n                variant={'sub'}\r\n                height={'100%'}\r\n                display={'flex'}\r\n                justifyContent={'center'}\r\n              >\r\n                <Flex\r\n                  flexDirection={'column'}\r\n                  justifyContent={'center'}\r\n                  alignItems={'center'}\r\n                >\r\n                  {LBPNetworkAddress ? (\r\n                    <CreatedTransactionIcon />\r\n                  ) : (\r\n                    <NoTransactionIcon />\r\n                  )}\r\n                  <Box mt={4}>\r\n                    {LBPNetworkAddress ? (\r\n                      <>\r\n                        <>{collateralToken.symbol.toUpperCase()}</> -{' '}\r\n                        <>{token.symbol.toUpperCase()}</> Auction Created\r\n                      </>\r\n                    ) : (\r\n                      'No transactions in progress'\r\n                    )}\r\n                  </Box>\r\n                </Flex>\r\n              </Card>\r\n            </Box>\r\n          </Flex>\r\n          <Flex\r\n            alignContent={'center'}\r\n            justifyContent={'space-between'}\r\n            mt={10}\r\n            flexDirection={isMobile ? 'column' : 'row'}\r\n          >\r\n            <Flex mb={4} justifyContent={'space-between'}>\r\n              <AppButton\r\n                onClick={onClickBack}\r\n                minW={'24'}\r\n                variant=\"outline\"\r\n                width={'24'}\r\n                isDisabled={isDisabledBackStep}\r\n              >\r\n                Back\r\n              </AppButton>\r\n\r\n              {!isLbpCreated && isMobile && (\r\n                <Box>\r\n                  <AppButton\r\n                    onClick={() => setIsOpenModalStuck(true)}\r\n                    isDisabled={!areAllTokensApproved || !isNetworkCorrect}\r\n                    ml={3}\r\n                    minW={'24'}\r\n                    width={'24'}\r\n                  >\r\n                    Stuck?\r\n                  </AppButton>\r\n                </Box>\r\n              )}\r\n            </Flex>\r\n            {_renderButtonsCreateLBP()}\r\n          </Flex>\r\n        </Box>\r\n      </Card>\r\n\r\n      <ModalStuck\r\n        open={isOpenModalStuck}\r\n        onClose={handleCloseModalStuck}\r\n        onSubmit={(txHash: string) => createAuction(txHash)}\r\n        isSuccess={isSuccess}\r\n        txHash={txHash}\r\n        setTxHash={setTxHash}\r\n        isError={isError}\r\n      />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default StepCreateLbp;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepPreview.tsx",["1118"],"import React, { forwardRef, Ref } from 'react';\r\nimport moment from 'moment';\r\nimport { isMobile } from 'react-device-detect';\r\nimport {\r\n  formatShortAddress,\r\n  formatTimestamp,\r\n  formatToPercent,\r\n} from 'src/utils/utils-formats';\r\nimport { AuctionType, RefStep } from 'src/utils/utils-auction';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport { Avatar, Box, Flex, Heading, Text, Link } from '@chakra-ui/react';\r\nimport Card from 'src/components/Card';\r\nimport BigNumber from 'bignumber.js';\r\nimport { CheckIcon } from '@chakra-ui/icons';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { TIME_FORMAT } from 'src/utils/utils-auction';\r\nimport { MessageNetworkNotIsCorrect } from '../index';\r\n\r\ninterface AuctionPreviewProps {\r\n  auction: AuctionType;\r\n  onClickBack: () => void;\r\n  onClickNext: () => void;\r\n}\r\n\r\nconst StepPreview = forwardRef(\r\n  (props: AuctionPreviewProps, ref: Ref<RefStep>) => {\r\n    const { auction, onClickBack, onClickNext } = props;\r\n    const { user } = useAuth();\r\n\r\n    const {\r\n      token,\r\n      depositToken,\r\n      collateralToken,\r\n      media,\r\n      duration,\r\n      weights,\r\n      swapFee,\r\n      network,\r\n    } = auction;\r\n\r\n    const isNetworkCorrect = network === user?.getNetwork();\r\n\r\n    const durationByHours = moment(duration.endDate).diff(\r\n      moment(duration.startDate),\r\n      'hours',\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <Card>\r\n          {!isNetworkCorrect && (\r\n            <MessageNetworkNotIsCorrect network={network} />\r\n          )}\r\n          <Box>\r\n            <Heading as=\"h3\" size=\"lg\">\r\n              Detail Configuration\r\n            </Heading>\r\n\r\n            <Text mb={5} mt={3}>\r\n              Please double check everything before creating the Token Launch\r\n              Auction.\r\n            </Text>\r\n\r\n            <Box>\r\n              <Heading as=\"h5\" size=\"md\">\r\n                Auction Preview\r\n              </Heading>\r\n            </Box>\r\n\r\n            <Card variant={'sub'} mt={4}>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Main token</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {isMobile ? formatShortAddress(token.address) : token.address}\r\n                </Text>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Token logo URL</Text>\r\n                <Flex fontWeight=\"700\" fontSize={'16px'}>\r\n                  <Link\r\n                    href={token.logo}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    color={'brand.500'}\r\n                    whiteSpace={'nowrap'}\r\n                    overflow={'hidden'}\r\n                    textOverflow={'ellipsis'}\r\n                    textAlign={'right'}\r\n                    width={isMobile ? '130px' : '300px'}\r\n                  >\r\n                    {token.logo}\r\n                  </Link>\r\n                  <Avatar src={token.logo} size=\"xs\" ml={2} />\r\n                </Flex>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Token name</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {token.name}\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignContent={'center'} justifyContent={'space-between'}>\r\n                <Text>Token symbol</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {token.symbol}\r\n                </Text>\r\n              </Flex>\r\n            </Card>\r\n\r\n            <Card variant={'sub'} mt={4}>\r\n              <Heading as=\"h6\" size=\"sm\" pb={3}>\r\n                Deposit Token\r\n              </Heading>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Main token</Text>\r\n                <Text\r\n                  fontWeight=\"700\"\r\n                  fontSize={'16px'}\r\n                  textTransform={'uppercase'}\r\n                >\r\n                  {depositToken.launch} {token.symbol}\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignContent={'center'} justifyContent={'space-between'}>\r\n                <Text>Base token</Text>\r\n                <Text\r\n                  fontWeight=\"700\"\r\n                  fontSize={'16px'}\r\n                  textTransform={'uppercase'}\r\n                >\r\n                  {depositToken.collateral} {collateralToken.symbol}\r\n                </Text>\r\n              </Flex>\r\n            </Card>\r\n\r\n            <Card variant={'sub'} mt={4}>\r\n              <Heading as=\"h6\" size=\"sm\" pb={3}>\r\n                Time\r\n              </Heading>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Start time</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {formatTimestamp(duration.startDate.getTime(), TIME_FORMAT)}\r\n                </Text>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>End time</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {formatTimestamp(duration.endDate.getTime(), TIME_FORMAT)}\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignContent={'center'} justifyContent={'space-between'}>\r\n                <Text>Duration</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {durationByHours} hours({Math.round(durationByHours / 24)}{' '}\r\n                  days)\r\n                </Text>\r\n              </Flex>\r\n            </Card>\r\n\r\n            <Card variant={'sub'} mt={4}>\r\n              <Heading as=\"h6\" size=\"sm\" pb={3}>\r\n                Weights\r\n              </Heading>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Starting Weight</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {formatToPercent(weights.startWeight)}&nbsp;\r\n                  {token.symbol}&nbsp;\r\n                  {formatToPercent(new BigNumber(1).minus(weights.startWeight))}\r\n                  &nbsp;\r\n                  {collateralToken.symbol.toUpperCase()}\r\n                </Text>\r\n              </Flex>\r\n              <Flex alignContent={'center'} justifyContent={'space-between'}>\r\n                <Text>End weight</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {formatToPercent(weights.endWeight)}&nbsp;\r\n                  {token.symbol}&nbsp;\r\n                  {formatToPercent(new BigNumber(1).minus(weights.endWeight))}\r\n                  &nbsp;\r\n                  {collateralToken.symbol.toUpperCase()}\r\n                </Text>\r\n              </Flex>\r\n            </Card>\r\n\r\n            <Card variant={'sub'} mt={4}>\r\n              <Heading as=\"h6\" size=\"sm\" pb={3}>\r\n                Description\r\n              </Heading>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Swap Fee</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {formatToPercent(swapFee)}\r\n                </Text>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Website</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {media.website ? (\r\n                    <Link\r\n                      href={media.website}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      color={'brand.500'}\r\n                      whiteSpace={'nowrap'}\r\n                      overflow={'hidden'}\r\n                      textOverflow={'ellipsis'}\r\n                      width={isMobile ? '130px' : '300px'}\r\n                      display={'inline-block'}\r\n                      textAlign={'right'}\r\n                    >\r\n                      {media.website}\r\n                    </Link>\r\n                  ) : (\r\n                    <Text>No website</Text>\r\n                  )}\r\n                </Text>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Telegram</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {media.telegram ? (\r\n                    <Link\r\n                      href={media.telegram}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      color={'brand.500'}\r\n                      whiteSpace={'nowrap'}\r\n                      overflow={'hidden'}\r\n                      textOverflow={'ellipsis'}\r\n                      width={isMobile ? '130px' : '300px'}\r\n                      display={'inline-block'}\r\n                      textAlign={'right'}\r\n                    >\r\n                      {media.telegram}\r\n                    </Link>\r\n                  ) : (\r\n                    <Text>No telegram</Text>\r\n                  )}\r\n                </Text>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Twitter</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {media.twitter ? (\r\n                    <Link\r\n                      href={media.twitter}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      color={'brand.500'}\r\n                      whiteSpace={'nowrap'}\r\n                      overflow={'hidden'}\r\n                      textOverflow={'ellipsis'}\r\n                      width={isMobile ? '130px' : '300px'}\r\n                      textAlign={'right'}\r\n                      display={'inline-block'}\r\n                    >\r\n                      {media.twitter}\r\n                    </Link>\r\n                  ) : (\r\n                    <Text>No twitter</Text>\r\n                  )}\r\n                </Text>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Discord</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {media.discord ? (\r\n                    <Link\r\n                      href={media.discord}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      color={'brand.500'}\r\n                      whiteSpace={'nowrap'}\r\n                      overflow={'hidden'}\r\n                      textOverflow={'ellipsis'}\r\n                      width={isMobile ? '130px' : '300px'}\r\n                      textAlign={'right'}\r\n                      display={'inline-block'}\r\n                    >\r\n                      {media.discord}\r\n                    </Link>\r\n                  ) : (\r\n                    <Text>No discord</Text>\r\n                  )}\r\n                </Text>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Medium</Text>\r\n                <Text fontWeight=\"700\" fontSize={'16px'}>\r\n                  {media.medium ? (\r\n                    <Link\r\n                      href={media.medium}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      color={'brand.500'}\r\n                      whiteSpace={'nowrap'}\r\n                      overflow={'hidden'}\r\n                      textOverflow={'ellipsis'}\r\n                      width={isMobile ? '130px' : '300px'}\r\n                      textAlign={'right'}\r\n                      display={'inline-block'}\r\n                    >\r\n                      {media.medium}\r\n                    </Link>\r\n                  ) : (\r\n                    <Text>No medium</Text>\r\n                  )}\r\n                </Text>\r\n              </Flex>\r\n              <Flex\r\n                alignContent={'center'}\r\n                justifyContent={'space-between'}\r\n                pb={3}\r\n              >\r\n                <Text>Pause trading</Text>\r\n                <CheckIcon color={'green.400'} />\r\n              </Flex>\r\n              <Flex alignContent={'center'} justifyContent={'space-between'}>\r\n                <Text>Pull liquidity</Text>\r\n                <CheckIcon color={'green.400'} />\r\n              </Flex>\r\n            </Card>\r\n          </Box>\r\n          <Flex\r\n            alignContent={'center'}\r\n            justifyContent={'space-between'}\r\n            mt={10}\r\n          >\r\n            <AppButton onClick={onClickBack} minW={'24'} variant=\"outline\">\r\n              Back\r\n            </AppButton>\r\n            <AppButton\r\n              onClick={onClickNext}\r\n              minW={'24'}\r\n              isDisabled={!isNetworkCorrect}\r\n            >\r\n              Next\r\n            </AppButton>\r\n          </Flex>\r\n        </Card>\r\n      </>\r\n    );\r\n  },\r\n);\r\n\r\nexport default StepPreview;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepPoolInfo.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepPoolSetup.tsx",["1119","1120","1121"],"import React, {\r\n  useState,\r\n  useEffect,\r\n  forwardRef,\r\n  Ref,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useMemo,\r\n  ChangeEvent,\r\n} from 'react';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport moment from 'moment';\r\nimport BigNumber from 'bignumber.js';\r\nimport AppButton from 'src/components/AppButton';\r\nimport {\r\n  AuctionType,\r\n  RefStep,\r\n  DEFAULT_CURRENCY,\r\n  CollateralToken,\r\n  calcAuctionChartData,\r\n  AuctionPriceChartData,\r\n} from 'src/utils/utils-auction';\r\nimport { getTokenBalance, getTokenDecimals } from 'src/utils/utils-token';\r\nimport config from 'src/config';\r\nimport { useForceRender } from 'src/hooks/useForceRender';\r\nimport { createValidator } from 'src/utils/utils-validator';\r\nimport { getNetworkProvider } from 'src/utils/utils-network';\r\nimport { roundNumber } from 'src/utils/utils-helpers';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  Text,\r\n  InputRightElement,\r\n  Tag,\r\n  TagLabel,\r\n  Avatar,\r\n  Menu,\r\n  MenuList,\r\n  MenuItem,\r\n  Portal,\r\n  MenuButton,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\nimport Card from 'src/components/Card';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport AppInput from 'src/components/AppInput';\r\nimport AppDatePicker from 'src/components/AppDatePicker';\r\nimport { formatToPercent, convertWeiToDec } from 'src/utils/utils-formats';\r\nimport { formatWeiNumber } from 'src/utils/utils-formats';\r\nimport AppSlider from 'src/components/AppSilder';\r\nimport { AddIcon, MinusIcon, ChevronDownIcon } from '@chakra-ui/icons';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport AuctionPriceChart from '../part/AuctionPriceChart';\r\nimport { MessageNetworkNotIsCorrect } from '../index';\r\n\r\ninterface PoolSetupProps {\r\n  auction: AuctionType;\r\n  onClickNext: () => void;\r\n  onClickBack: () => void;\r\n}\r\n\r\nconst ADDRESS_TOKEN_NATIVE = '0x00';\r\nconst TOTAL_MINUTES_IN_7_DAYS = 10080;\r\nconst MIN_VALUE_COLLATERAL_TOKEN = 1;\r\n\r\nconst StepPoolSetup = forwardRef((props: PoolSetupProps, ref: Ref<RefStep>) => {\r\n  const { auction, onClickNext, onClickBack } = props;\r\n  const { user } = useAuth();\r\n\r\n  const [internalAuction, setInternalAuction] = useState(auction);\r\n  const [launchTokenBalance, setLaunchTokenBalance] = useState<number>(0);\r\n  const [collateralTokenBalance, setCollateralTokenBalance] =\r\n    useState<number>(0);\r\n  const [isLoadingCollateralTokenBalance, setIsLoadingCollateralTokenBalance] =\r\n    useState(false);\r\n  const [isDisableNextStep, setIsDisableNextStep] = useState(true);\r\n  const [listCollateralToken, setListCollateralToken] = useState<\r\n    CollateralToken[]\r\n  >([]);\r\n\r\n  const [chartData, setChartData] = useState<AuctionPriceChartData[]>([]);\r\n\r\n  const [priceTokenBase, setPriceTokenBase] = useState<string>('');\r\n\r\n  const { network, token, depositToken, collateralToken, duration, weights } =\r\n    internalAuction;\r\n\r\n  const isNetworkCorrect = network === user?.getNetwork();\r\n\r\n  const coingeckoIdBaseToken = useMemo(() => {\r\n    const baseToken = listCollateralToken.find(\r\n      (item) =>\r\n        item.currency.toLowerCase() === collateralToken.symbol.toLowerCase(),\r\n    );\r\n    return baseToken?.coingeckoId;\r\n  }, [listCollateralToken, collateralToken]);\r\n\r\n  const getPriceBaseToken = async () => {\r\n    try {\r\n      const params = {\r\n        vs_currency: 'usd',\r\n        ids: coingeckoIdBaseToken,\r\n      };\r\n      const price = await rf\r\n        .getRequest('CoingeckoRequest')\r\n        .getTokenPrice(params);\r\n      price && price.length && setPriceTokenBase(price[0].current_price);\r\n    } catch (e) {\r\n      setPriceTokenBase('');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPriceBaseToken();\r\n  }, [listCollateralToken, collateralToken]);\r\n\r\n  const forceRender = useForceRender();\r\n\r\n  const validator = useRef(\r\n    createValidator({\r\n      element: (message: string) => (\r\n        <Text color={'red.500'} fontSize={'14px'}>\r\n          {message}\r\n        </Text>\r\n      ),\r\n    }),\r\n  );\r\n\r\n  const validate = async () => {\r\n    if (isDisableNextStep) throw new Error('Invalid validation');\r\n  };\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    validate,\r\n    auction: internalAuction,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    setInternalAuction(auction);\r\n  }, [auction]);\r\n\r\n  useEffect(() => {\r\n    const isDisabled =\r\n      isLoadingCollateralTokenBalance ||\r\n      !validator.current.allValid() ||\r\n      duration.startDate >= duration.endDate ||\r\n      duration.startDate < nowDate ||\r\n      durationTime > TOTAL_MINUTES_IN_7_DAYS ||\r\n      !isNetworkCorrect;\r\n    setIsDisableNextStep(isDisabled);\r\n  }, [\r\n    depositToken,\r\n    duration,\r\n    launchTokenBalance,\r\n    collateralTokenBalance,\r\n    isLoadingCollateralTokenBalance,\r\n    isNetworkCorrect,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const currencies = config.networks[auction.network].currencies;\r\n    const data = Object.keys(currencies)\r\n      .map((currency) => ({\r\n        ...currencies[currency],\r\n        currency,\r\n      }))\r\n      .filter((currency) => {\r\n        return currency.address !== '0x00';\r\n      });\r\n    setListCollateralToken(data);\r\n  }, [network]);\r\n\r\n  const iconCollateralTokenSelected = useMemo(() => {\r\n    const baseToken = listCollateralToken.find(\r\n      (item) =>\r\n        item.currency.toLowerCase() === collateralToken.symbol.toLowerCase(),\r\n    );\r\n    return baseToken?.icon;\r\n  }, [listCollateralToken, collateralToken]);\r\n\r\n  const fetchLaunchTokenBalance = (\r\n    tokenAddress: string,\r\n    userAddress: string | undefined,\r\n  ) => {\r\n    if (!tokenAddress || !userAddress) {\r\n      return;\r\n    }\r\n    getTokenBalance(network, tokenAddress, userAddress)\r\n      .then((balance) => setLaunchTokenBalance(balance))\r\n      .catch(() => setLaunchTokenBalance(0));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLaunchTokenBalance(token.address, user?.getAddress());\r\n  }, [token.address, user?.getAddress()]);\r\n\r\n  const fetchCollateralTokenBalance = async (\r\n    collateralSymbol: string,\r\n    auctionNetwork: string,\r\n    userAddress: string | undefined,\r\n  ) => {\r\n    if (!collateralSymbol || !auctionNetwork || !userAddress) return;\r\n    setIsLoadingCollateralTokenBalance(true);\r\n\r\n    const tokenByCurrency = listCollateralToken.find(\r\n      (item) => item.name.toLowerCase() === collateralSymbol.toLowerCase(),\r\n    );\r\n\r\n    if (!tokenByCurrency) {\r\n      setIsLoadingCollateralTokenBalance(false);\r\n      return;\r\n    }\r\n\r\n    if (tokenByCurrency.address === ADDRESS_TOKEN_NATIVE) {\r\n      const provider = getNetworkProvider(network);\r\n      const balance = await provider.getBalance(userAddress);\r\n      setCollateralTokenBalance(+balance.toString());\r\n      setIsLoadingCollateralTokenBalance(false);\r\n      return;\r\n    }\r\n\r\n    getTokenBalance(auctionNetwork, tokenByCurrency.address, userAddress)\r\n      .then((balance) => {\r\n        setCollateralTokenBalance(balance);\r\n        setIsLoadingCollateralTokenBalance(false);\r\n        setInternalAuction((prevState) => ({\r\n          ...prevState,\r\n          collateralToken: {\r\n            ...prevState.collateralToken,\r\n            address: tokenByCurrency.address,\r\n            name: tokenByCurrency.name,\r\n            decimals: tokenByCurrency.decimals,\r\n          },\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setIsLoadingCollateralTokenBalance(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCollateralTokenBalance(\r\n      collateralToken.symbol,\r\n      network,\r\n      user?.getAddress(),\r\n    );\r\n  }, [\r\n    collateralToken.symbol,\r\n    network,\r\n    user?.getAddress(),\r\n    listCollateralToken,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      Number(depositToken.collateral) <= 0 ||\r\n      Number(depositToken.launch) <= 0\r\n    ) {\r\n      setChartData([]);\r\n      return;\r\n    }\r\n\r\n    const newChartData = calcAuctionChartData(\r\n      depositToken.collateral || 0,\r\n      depositToken.launch || 0,\r\n      weights.startWeight,\r\n      weights.endWeight,\r\n      duration.startDate,\r\n      duration.endDate,\r\n    );\r\n    setChartData(newChartData);\r\n  }, [depositToken, duration, weights]);\r\n\r\n  const onClickMaxLaunchToken = () => {\r\n    const balance = convertWeiToDec(\r\n      launchTokenBalance.toString(),\r\n      token.decimals,\r\n    );\r\n    onChangeDepositToken({\r\n      ...depositToken,\r\n      launch: +new BigNumber(balance.toString()).toFixed(\r\n        token.decimals > 8 ? 8 : token.decimals,\r\n      ),\r\n    });\r\n  };\r\n\r\n  const onClickMaxCollateralToken = () => {\r\n    const balance = convertWeiToDec(\r\n      collateralTokenBalance.toString(),\r\n      collateralToken.decimals,\r\n    );\r\n    onChangeDepositToken({\r\n      ...depositToken,\r\n      collateral: +new BigNumber(balance.toString()).toFixed(\r\n        decimalCollateralToken > 8 ? 8 : decimalCollateralToken,\r\n      ),\r\n    });\r\n  };\r\n\r\n  const onHandleNext = async () => {\r\n    if (isDisableNextStep) return;\r\n    onClickNext();\r\n  };\r\n\r\n  const onBlurInput = (inputName: string) => {\r\n    if (!validator.current.fieldValid(inputName)) {\r\n      validator.current.showMessageFor(inputName);\r\n    }\r\n    forceRender();\r\n  };\r\n\r\n  const onChangeDepositToken = (newDepositToken: {\r\n    launch: number | string;\r\n    collateral: number | string;\r\n  }) => {\r\n    setInternalAuction((prevState) => ({\r\n      ...prevState,\r\n      depositToken: newDepositToken,\r\n    }));\r\n  };\r\n\r\n  const onChangeCollateralTokenSymbol = (symbol: string) => {\r\n    setInternalAuction((prevState) => ({\r\n      ...prevState,\r\n      collateralToken: { ...prevState.collateralToken, symbol },\r\n    }));\r\n  };\r\n\r\n  const getDecimalPlaces = (decimals: number) => {\r\n    return decimals > 8 ? 8 : decimals;\r\n  };\r\n\r\n  const minCollateralToken = useMemo(() => {\r\n    const value = MIN_VALUE_COLLATERAL_TOKEN / +priceTokenBase;\r\n    return roundNumber(value, BigNumber.ROUND_DOWN, 6);\r\n  }, [priceTokenBase, collateralToken]);\r\n\r\n  const decimalCollateralToken = useMemo(\r\n    () => getTokenDecimals(network, collateralToken.symbol, DEFAULT_CURRENCY),\r\n    [network, collateralToken],\r\n  );\r\n\r\n  const onChangeDuration = (newDuration: {\r\n    startDate: Date;\r\n    endDate: Date;\r\n  }) => {\r\n    setInternalAuction((prevState) => ({\r\n      ...prevState,\r\n      duration: newDuration,\r\n    }));\r\n  };\r\n\r\n  const onChangeWeights = (newWeights: {\r\n    startWeight: number;\r\n    endWeight: number;\r\n  }) => {\r\n    setInternalAuction((prevState) => ({\r\n      ...prevState,\r\n      weights: newWeights,\r\n    }));\r\n  };\r\n\r\n  validator.current.purgeFields();\r\n\r\n  useEffect(() => {\r\n    if (weights.startWeight < weights.endWeight) {\r\n      onChangeWeights({\r\n        ...weights,\r\n        endWeight: weights.startWeight,\r\n      });\r\n    }\r\n  }, [weights.startWeight]);\r\n\r\n  useEffect(() => {\r\n    if (weights.startWeight < weights.endWeight) {\r\n      onChangeWeights({\r\n        ...weights,\r\n        startWeight: weights.endWeight,\r\n      });\r\n    }\r\n  }, [weights.endWeight]);\r\n\r\n  const handleChangeWeight = (\r\n    weightAttribute: 'startWeight' | 'endWeight',\r\n    type: 'minus' | 'plus',\r\n    value: number,\r\n  ) => {\r\n    if (!isNetworkCorrect) return;\r\n    const valueAfterMinus =\r\n      Number(new BigNumber(value).minus(0.01)) < 0.01\r\n        ? 0.01\r\n        : Number(new BigNumber(value).minus(0.01));\r\n    const valueAfterPlus =\r\n      Number(new BigNumber(value).plus(0.01)) > 0.99\r\n        ? 0.99\r\n        : Number(new BigNumber(value).plus(0.01));\r\n\r\n    if (weightAttribute === 'startWeight') {\r\n      onChangeWeights({\r\n        ...weights,\r\n        startWeight: type === 'minus' ? valueAfterMinus : valueAfterPlus,\r\n      });\r\n    }\r\n\r\n    if (weightAttribute === 'endWeight') {\r\n      onChangeWeights({\r\n        ...weights,\r\n        endWeight: type === 'minus' ? valueAfterMinus : valueAfterPlus,\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const getMaxValueLaunchToken = () => {\r\n    return +convertWeiToDec(launchTokenBalance.toString(), token.decimals);\r\n  };\r\n\r\n  const getMaxValueCollateralToken = () => {\r\n    return +convertWeiToDec(\r\n      collateralTokenBalance.toString(),\r\n      decimalCollateralToken,\r\n    );\r\n  };\r\n\r\n  const durationTime = useMemo(\r\n    () => moment(duration.endDate).diff(moment(duration.startDate), 'minutes'),\r\n    [duration],\r\n  );\r\n\r\n  const nowDate = moment(moment.utc().format('yyyy-MM-DD HH:mm:ss')).toDate();\r\n\r\n  const _renderMessageErrorEndDate = () => {\r\n    if (duration.startDate >= duration.endDate) {\r\n      return (\r\n        <Text color={'red.500'} fontSize={'14px'}>\r\n          The end time must be after the start time.\r\n        </Text>\r\n      );\r\n    }\r\n\r\n    if (durationTime > TOTAL_MINUTES_IN_7_DAYS) {\r\n      return (\r\n        <Text color={'red.500'} fontSize={'14px'}>\r\n          Auction must be less than 7-day duration. Please choose another time.\r\n        </Text>\r\n      );\r\n    }\r\n\r\n    return <> </>;\r\n  };\r\n\r\n  const _renderWeightSlider = (\r\n    weightAttribute: 'startWeight' | 'endWeight',\r\n  ) => {\r\n    return (\r\n      <AppSlider\r\n        min={1}\r\n        max={99}\r\n        handleChange={(value: any) => {\r\n          onChangeWeights({\r\n            ...weights,\r\n            [weightAttribute]: new BigNumber(+value).dividedBy(100).toString(),\r\n          });\r\n        }}\r\n        value={new BigNumber(weights[weightAttribute])\r\n          .multipliedBy(100)\r\n          .toNumber()}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        {!isNetworkCorrect && <MessageNetworkNotIsCorrect network={network} />}\r\n        <Box>\r\n          <Heading as=\"h3\" size=\"lg\">\r\n            Detail Configuration\r\n          </Heading>\r\n\r\n          <Text mb={5} mt={3}>\r\n            Fill out Configuration details.\r\n          </Text>\r\n\r\n          <Box>\r\n            <Heading as=\"h5\" size=\"md\">\r\n              Pool Setup\r\n            </Heading>\r\n\r\n            <Card variant={'sub'} mt={5}>\r\n              <Text mb={2} mt={3}>\r\n                1. Deposit Token\r\n              </Text>\r\n              <Flex flexWrap={'wrap'} marginX={-4}>\r\n                <Box width={['100%', '50%']} px={4} mb={3}>\r\n                  <Stack spacing={'1'} w={'full'}>\r\n                    <Text fontWeight=\"600\">\r\n                      Main token{' '}\r\n                      <Text as={'span'} color={'red.500'}>\r\n                        *\r\n                      </Text>\r\n                    </Text>\r\n                    <AppInput\r\n                      type=\"number\"\r\n                      value={depositToken.launch}\r\n                      validate={{\r\n                        name: 'depositMainToken',\r\n                        validator: validator.current,\r\n                        rule: [\r\n                          'required',\r\n                          'numeric',\r\n                          'isPositive',\r\n                          `maxDigits:${getDecimalPlaces(token.decimals)}`,\r\n                          {\r\n                            maxValue: roundNumber(\r\n                              getMaxValueLaunchToken(),\r\n                              BigNumber.ROUND_DOWN,\r\n                              token.decimals,\r\n                            ),\r\n                          },\r\n                        ],\r\n                      }}\r\n                      readOnly={!isNetworkCorrect}\r\n                      onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n                        onChangeDepositToken({\r\n                          ...depositToken,\r\n                          launch: +e.target.value,\r\n                        })\r\n                      }\r\n                      endAdornment={\r\n                        <InputRightElement width=\"10rem\">\r\n                          <Tag\r\n                            size=\"lg\"\r\n                            colorScheme=\"gray\"\r\n                            borderRadius=\"full\"\r\n                            mr={'5px'}\r\n                          >\r\n                            {token.logo && (\r\n                              <Avatar\r\n                                src={token.logo}\r\n                                size=\"xs\"\r\n                                ml={-1}\r\n                                mr={2}\r\n                              />\r\n                            )}\r\n                            <TagLabel>{token.symbol}</TagLabel>\r\n                          </Tag>\r\n                          <AppButton\r\n                            onClick={onClickMaxLaunchToken}\r\n                            width={'50px'}\r\n                            height={'30px'}\r\n                            marginRight={'5px'}\r\n                            fontSize={'12px'}\r\n                            isDisabled={!isNetworkCorrect}\r\n                          >\r\n                            MAX\r\n                          </AppButton>\r\n                        </InputRightElement>\r\n                      }\r\n                    />\r\n                    <Text>\r\n                      Balance:{' '}\r\n                      {formatWeiNumber(\r\n                        launchTokenBalance.toString(),\r\n                        token.decimals,\r\n                      )}{' '}\r\n                      {token.symbol.toUpperCase()}\r\n                    </Text>\r\n                  </Stack>\r\n                </Box>\r\n                <Box width={['100%', '50%']} px={4} mb={3}>\r\n                  <Stack spacing={'1'} w={'full'}>\r\n                    <Text fontWeight=\"600\">\r\n                      Base Token{' '}\r\n                      <Text as={'span'} color={'red.500'}>\r\n                        *\r\n                      </Text>\r\n                    </Text>\r\n                    <AppInput\r\n                      type=\"number\"\r\n                      value={depositToken.collateral}\r\n                      validate={{\r\n                        name: 'depositBaseToken',\r\n                        validator: validator.current,\r\n                        rule: [\r\n                          'required',\r\n                          'numeric',\r\n                          'isPositive',\r\n                          // `minValue:${minCollateralToken}`,\r\n                          `maxDigits:${getDecimalPlaces(\r\n                            decimalCollateralToken,\r\n                          )}`,\r\n                          {\r\n                            maxValue: roundNumber(\r\n                              getMaxValueCollateralToken(),\r\n                              BigNumber.ROUND_DOWN,\r\n                              decimalCollateralToken,\r\n                            ),\r\n                          },\r\n                        ],\r\n                      }}\r\n                      readOnly={!isNetworkCorrect}\r\n                      onChange={(e) =>\r\n                        onChangeDepositToken({\r\n                          ...depositToken,\r\n                          collateral: +e.target.value,\r\n                        })\r\n                      }\r\n                      endAdornment={\r\n                        <InputRightElement width=\"10.5rem\">\r\n                          <Menu>\r\n                            <MenuButton>\r\n                              <Tag\r\n                                size=\"lg\"\r\n                                colorScheme=\"gray\"\r\n                                borderRadius=\"full\"\r\n                                mr={'5px'}\r\n                              >\r\n                                <TagLabel textTransform={'uppercase'}>\r\n                                  <Flex alignItems={'center'}>\r\n                                    <Avatar\r\n                                      src={iconCollateralTokenSelected}\r\n                                      size=\"xs\"\r\n                                      mr={1}\r\n                                    />\r\n                                    {collateralToken.symbol}\r\n                                    <ChevronDownIcon />\r\n                                  </Flex>\r\n                                </TagLabel>\r\n                              </Tag>\r\n                            </MenuButton>\r\n                            <Portal>\r\n                              <MenuList zIndex={9999}>\r\n                                {listCollateralToken.map(\r\n                                  (item: CollateralToken) => (\r\n                                    <MenuItem\r\n                                      onClick={() =>\r\n                                        onChangeCollateralTokenSymbol(\r\n                                          String(item.currency),\r\n                                        )\r\n                                      }\r\n                                      key={item.currency}\r\n                                      icon={\r\n                                        <Avatar\r\n                                          src={item?.icon}\r\n                                          size=\"xs\"\r\n                                          ml={-1}\r\n                                          mr={2}\r\n                                        />\r\n                                      }\r\n                                    >\r\n                                      <span>{item.name}</span>\r\n                                    </MenuItem>\r\n                                  ),\r\n                                )}\r\n                              </MenuList>\r\n                            </Portal>\r\n                          </Menu>\r\n                          <AppButton\r\n                            onClick={onClickMaxCollateralToken}\r\n                            width={'50px'}\r\n                            height={'30px'}\r\n                            marginRight={'5px'}\r\n                            fontSize={'12px'}\r\n                            isDisabled={!isNetworkCorrect}\r\n                          >\r\n                            MAX\r\n                          </AppButton>\r\n                        </InputRightElement>\r\n                      }\r\n                    />\r\n                    <Text>\r\n                      Balance:{' '}\r\n                      {isLoadingCollateralTokenBalance ? (\r\n                        <span style={{ paddingTop: '15px' }}>\r\n                          <Spinner size=\"xs\" />\r\n                        </span>\r\n                      ) : (\r\n                        `${formatWeiNumber(\r\n                          collateralTokenBalance.toString(),\r\n                          collateralToken.decimals,\r\n                        )} ${collateralToken.symbol.toUpperCase()}`\r\n                      )}\r\n                    </Text>\r\n                  </Stack>\r\n                </Box>\r\n              </Flex>\r\n\r\n              <Text mb={2} mt={3}>\r\n                2. Duration\r\n              </Text>\r\n              <Flex flexWrap={'wrap'} marginX={-4}>\r\n                <Box width={['100%', '50%']} px={4} mt={2}>\r\n                  <Stack spacing={'1'} w={'full'}>\r\n                    <Text fontWeight=\"600\">\r\n                      Start Date (UTC Time){' '}\r\n                      <Text as={'span'} color={'red.500'}>\r\n                        *\r\n                      </Text>\r\n                    </Text>\r\n                    <AppDatePicker\r\n                      onChange={(value: Date) => {\r\n                        onChangeDuration({\r\n                          ...duration,\r\n                          startDate: value,\r\n                        });\r\n                        onBlurInput('startDate');\r\n                      }}\r\n                      selected={duration.startDate}\r\n                      showTimeSelect\r\n                      minDate={nowDate}\r\n                      timeIntervals={5}\r\n                      timeFormat=\"HH:mm\"\r\n                      dateFormat=\"dd/MM/yyyy hh:mm:ss aa\"\r\n                      placeholder=\"dd/MM/yyyy\"\r\n                      onKeyDown={(e: React.KeyboardEvent<HTMLDivElement>) => {\r\n                        e.preventDefault();\r\n                      }}\r\n                      readOnly={!isNetworkCorrect}\r\n                    />\r\n                    {duration.startDate < nowDate && (\r\n                      <Text color={'red.500'} fontSize={'14px'}>\r\n                        The start time must be after current time.\r\n                      </Text>\r\n                    )}\r\n                  </Stack>\r\n                </Box>\r\n                <Box width={['100%', '50%']} px={4} mt={2}>\r\n                  <Stack spacing={'1'} w={'full'}>\r\n                    <Text fontWeight=\"600\">\r\n                      End Date (UTC Time){' '}\r\n                      <Text as={'span'} color={'red.500'}>\r\n                        *\r\n                      </Text>\r\n                    </Text>\r\n                    <AppDatePicker\r\n                      onChange={(value: Date) => {\r\n                        onChangeDuration({ ...duration, endDate: value });\r\n                        onBlurInput('endDate');\r\n                      }}\r\n                      selected={duration.endDate}\r\n                      showTimeSelect\r\n                      minDate={duration.startDate}\r\n                      maxDate={moment(duration.startDate)\r\n                        .add(7, 'days')\r\n                        .toDate()}\r\n                      timeIntervals={5}\r\n                      timeFormat=\"HH:mm\"\r\n                      dateFormat=\"dd/MM/yyyy hh:mm:ss aa\"\r\n                      onKeyDown={(e: React.KeyboardEvent<HTMLDivElement>) => {\r\n                        e.preventDefault();\r\n                      }}\r\n                      readOnly={!isNetworkCorrect}\r\n                    />\r\n                    <div>{_renderMessageErrorEndDate()}</div>\r\n                  </Stack>\r\n                </Box>\r\n              </Flex>\r\n\r\n              <Text mb={2} mt={3}>\r\n                3. Weights\r\n              </Text>\r\n              <Flex flexWrap={'wrap'} marginX={-4}>\r\n                <Box width={['100%', '50%']} px={4} mt={2}>\r\n                  <Stack spacing={'1'} w={'full'}>\r\n                    <Text fontWeight=\"600\">\r\n                      Start weight{' '}\r\n                      <Text as={'span'} color={'red.500'}>\r\n                        *\r\n                      </Text>\r\n                    </Text>\r\n                    <Flex justifyContent={'space-between'}>\r\n                      <MinusIcon\r\n                        color=\"pink.600\"\r\n                        mr={5}\r\n                        cursor={'pointer'}\r\n                        onClick={() =>\r\n                          handleChangeWeight(\r\n                            'startWeight',\r\n                            'minus',\r\n                            weights.startWeight,\r\n                          )\r\n                        }\r\n                      />\r\n                      {_renderWeightSlider('startWeight')}\r\n                      <AddIcon\r\n                        color=\"pink.600\"\r\n                        ml={5}\r\n                        cursor={'pointer'}\r\n                        onClick={() =>\r\n                          handleChangeWeight(\r\n                            'startWeight',\r\n                            'plus',\r\n                            weights.startWeight,\r\n                          )\r\n                        }\r\n                      />\r\n                    </Flex>\r\n\r\n                    <Flex justifyContent={'space-between'}>\r\n                      <Flex textTransform=\"uppercase\">\r\n                        {token.symbol}\r\n                        <Text ml={2} color=\"pink.600\" fontWeight=\"700\">\r\n                          {formatToPercent(weights.startWeight)}\r\n                        </Text>\r\n                      </Flex>\r\n                      <Flex textTransform=\"uppercase\">\r\n                        {collateralToken.symbol}\r\n                        <Text ml={2} color=\"pink.600\" fontWeight=\"700\">\r\n                          {formatToPercent(\r\n                            new BigNumber(1).minus(weights.startWeight),\r\n                          )}\r\n                        </Text>\r\n                      </Flex>\r\n                    </Flex>\r\n                  </Stack>\r\n                </Box>\r\n                <Box width={['100%', '50%']} px={4} mt={2}>\r\n                  <Stack spacing={'1'} w={'full'}>\r\n                    <Text fontWeight=\"600\">\r\n                      End weight{' '}\r\n                      <Text as={'span'} color={'red.500'}>\r\n                        *\r\n                      </Text>\r\n                    </Text>\r\n\r\n                    <Flex justifyContent={'space-between'}>\r\n                      <MinusIcon\r\n                        color=\"pink.600\"\r\n                        mr={5}\r\n                        cursor={'pointer'}\r\n                        onClick={() =>\r\n                          handleChangeWeight(\r\n                            'endWeight',\r\n                            'minus',\r\n                            weights.endWeight,\r\n                          )\r\n                        }\r\n                      />\r\n                      {_renderWeightSlider('endWeight')}\r\n                      <AddIcon\r\n                        color=\"pink.600\"\r\n                        ml={5}\r\n                        cursor={'pointer'}\r\n                        onClick={() =>\r\n                          handleChangeWeight(\r\n                            'endWeight',\r\n                            'plus',\r\n                            weights.endWeight,\r\n                          )\r\n                        }\r\n                      />\r\n                    </Flex>\r\n\r\n                    <Flex justifyContent={'space-between'}>\r\n                      <Flex textTransform=\"uppercase\">\r\n                        {token.symbol}\r\n                        <Text ml={2} color=\"pink.600\" fontWeight=\"700\">\r\n                          {formatToPercent(weights.endWeight)}\r\n                        </Text>\r\n                      </Flex>\r\n                      <Flex textTransform=\"uppercase\">\r\n                        {collateralToken.symbol}\r\n                        <Text ml={2} color=\"pink.600\" fontWeight=\"700\">\r\n                          {formatToPercent(\r\n                            new BigNumber(1).minus(weights.endWeight),\r\n                          )}\r\n                        </Text>\r\n                      </Flex>\r\n                    </Flex>\r\n                  </Stack>\r\n                </Box>\r\n              </Flex>\r\n            </Card>\r\n\r\n            <Heading as=\"h5\" size=\"md\" mt={5}>\r\n              Auction Preview\r\n              <Card variant=\"sub\" mt={5}>\r\n                <AuctionPriceChart\r\n                  id=\"lbp-auction-chart\"\r\n                  priceData={chartData}\r\n                  isPreview\r\n                  startTime={duration.startDate}\r\n                  endTime={duration.endDate}\r\n                  symbol={{\r\n                    base: collateralToken.symbol,\r\n                  }}\r\n                />\r\n              </Card>\r\n            </Heading>\r\n          </Box>\r\n          <Flex\r\n            alignContent={'center'}\r\n            justifyContent={'space-between'}\r\n            mt={10}\r\n          >\r\n            <AppButton onClick={onClickBack} minW={'24'} variant=\"outline\">\r\n              Back\r\n            </AppButton>\r\n            <AppButton\r\n              onClick={onClickNext}\r\n              disabled={isDisableNextStep}\r\n              minW={'24'}\r\n            >\r\n              Next\r\n            </AppButton>\r\n          </Flex>\r\n        </Box>\r\n      </Card>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default StepPoolSetup;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\steps\\StepOverview.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageProjectDetail\\part\\PartViewDetail.tsx",["1122"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateAuction\\part\\AuctionPriceChart.tsx",["1123","1124"],"import React, { useEffect, useState } from 'react';\r\nimport { Chart, registerables, ScriptableLineSegmentContext } from 'chart.js';\r\nimport moment from 'moment';\r\nimport {\r\n  AuctionPriceChartData,\r\n  getCurrentAuctionTime,\r\n} from 'src/utils/utils-auction';\r\nimport { Box, Flex, Stack, Text } from '@chakra-ui/react';\r\nimport AppButton from 'src/components/AppButton';\r\n\r\nconst TAB_CHART = {\r\n  STANDARD: 0,\r\n  LOGARITHMIC: 1,\r\n};\r\n\r\nChart.register(...registerables);\r\n\r\ninterface AuctionDrawData {\r\n  labels: string[];\r\n  data: number[];\r\n}\r\n\r\ninterface AuctionPriceChartProps {\r\n  id: string;\r\n  priceData: AuctionPriceChartData[];\r\n  isPreview?: boolean;\r\n  symbol?: {\r\n    main?: string;\r\n    base?: string;\r\n  };\r\n  startTime?: Date;\r\n  endTime?: Date;\r\n}\r\n\r\nconst AuctionPriceChart: React.FC<AuctionPriceChartProps> = (\r\n  props: AuctionPriceChartProps,\r\n) => {\r\n  const {\r\n    id,\r\n    priceData,\r\n    isPreview = false,\r\n    symbol,\r\n    startTime = moment().toDate(),\r\n    endTime = moment().add(3, 'days').toDate(),\r\n  } = props;\r\n\r\n  const CHART_TYPE = 'line';\r\n  const TIME_FORMAT = 'DD MMM';\r\n  const DATASET_COLORS = ['rgba(181, 62, 250, 1)', 'rgba(255, 152, 229, 1)'];\r\n  const POINT_RADIUS = 4;\r\n\r\n  const [activeTab, setActiveTab] = useState<number>(TAB_CHART.STANDARD);\r\n\r\n  const current = getCurrentAuctionTime();\r\n\r\n  useEffect(() => {\r\n    const data = getAuctionDrawData(priceData);\r\n    onDrawChart(data);\r\n  }, [priceData, activeTab]);\r\n\r\n  const getAuctionDrawData = (\r\n    data: AuctionPriceChartData[],\r\n  ): AuctionDrawData => {\r\n    let day = 0;\r\n    return {\r\n      labels: data.map((item) => {\r\n        if (!item.time) {\r\n          return '';\r\n        }\r\n        if (moment(item.time).date() !== day) {\r\n          day = moment(item.time).date();\r\n          return moment(item.time).format(TIME_FORMAT);\r\n        }\r\n        return '';\r\n      }),\r\n      data: data.map((item) => +item.value),\r\n    };\r\n  };\r\n\r\n  const getChartOptions = () => ({\r\n    fill: false,\r\n    lineTension: 0.4, // make curve for line\r\n    borderJoinStyle: 'round',\r\n    borderWidth: 2,\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          color: 'transparent',\r\n        },\r\n        offset: true,\r\n        ticks: {\r\n          autoSkip: false, // show all labels\r\n          // maxRotation: 0,\r\n        },\r\n      },\r\n      y: {\r\n        grid: {\r\n          color: 'rgba(31, 38, 70, 1)',\r\n        },\r\n        ticks: {\r\n          callback: (label: string) => `${(+label).toFixed(6)}`,\r\n          maxTicksLimit: 11,\r\n        },\r\n        type: activeTab === TAB_CHART.LOGARITHMIC ? 'logarithmic' : undefined,\r\n      },\r\n    },\r\n    interaction: {\r\n      intersect: false,\r\n      axis: 'x',\r\n      mode: 'nearest',\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        caretPadding: 10,\r\n        callbacks: {\r\n          title: (tooltipItem: any[]) => {\r\n            return priceData[tooltipItem[0].dataIndex]\r\n              ? moment(priceData[tooltipItem[0].dataIndex].time).format(\r\n                  'MMM DD, YYYY, HH:mm a',\r\n                )\r\n              : '';\r\n          },\r\n          label: function (tooltipItem: any) {\r\n            return priceData[tooltipItem.dataIndex]\r\n              ? `${Number(priceData[tooltipItem.dataIndex].value).toFixed(8)}${\r\n                  symbol?.base ? ` ${symbol.base.toUpperCase()}` : ''\r\n                }`\r\n              : '';\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const isPredictedPrice = (time: number | string, isPreviewMode: boolean) => {\r\n    if (isPreviewMode) {\r\n      return false;\r\n    }\r\n    return moment(time).isSameOrAfter(current);\r\n  };\r\n\r\n  const getChartData = (\r\n    drawData: AuctionDrawData,\r\n    priceDataProps: AuctionPriceChartData[],\r\n    isPreviewMode: boolean,\r\n  ) => {\r\n    let findFirstPredictedPrice = false;\r\n    const pointRadius = priceDataProps.map((item) => {\r\n      if (isPredictedPrice(item.time, isPreviewMode)) {\r\n        const radius = findFirstPredictedPrice ? 0 : POINT_RADIUS;\r\n        findFirstPredictedPrice = true;\r\n        return radius;\r\n      }\r\n      return 0;\r\n    });\r\n\r\n    const pointBackgroundColor = priceDataProps.map((item) => {\r\n      if (!isPredictedPrice(item.time, isPreviewMode)) {\r\n        return DATASET_COLORS[0];\r\n      }\r\n      return '#D9D9D9';\r\n    });\r\n    return {\r\n      labels: drawData.labels,\r\n      datasets: [\r\n        {\r\n          data: drawData.data,\r\n          borderColor: DATASET_COLORS[0],\r\n          pointRadius: pointRadius,\r\n          pointHoverRadius: 4,\r\n          pointBackgroundColor: pointBackgroundColor,\r\n          pointHoverBackgroundColor: pointBackgroundColor,\r\n          segment: {\r\n            borderColor: (ctx: ScriptableLineSegmentContext) => {\r\n              return isPredictedPrice(\r\n                priceDataProps[ctx.p0DataIndex].time,\r\n                isPreviewMode,\r\n              )\r\n                ? DATASET_COLORS[1]\r\n                : DATASET_COLORS[0];\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const onDrawChart = (drawData: AuctionDrawData) => {\r\n    const areaChart = document.getElementById(id);\r\n    let chart = Chart.getChart(id);\r\n    if (chart) chart.destroy();\r\n    const options = getChartOptions();\r\n    const data = getChartData(drawData, priceData, isPreview);\r\n    // @ts-ignore\r\n    chart = new Chart(areaChart, {\r\n      type: CHART_TYPE,\r\n      data,\r\n      options,\r\n    });\r\n  };\r\n\r\n  const _renderTabChart = () => {\r\n    if (isPreview) return null;\r\n\r\n    return (\r\n      <Box>\r\n        <Flex ml={-2}>\r\n          <Box pl={2}>\r\n            <AppButton\r\n              variant={\r\n                activeTab === TAB_CHART.STANDARD ? 'lightBrand' : 'no-effects'\r\n              }\r\n              borderRadius={'full'}\r\n              onClick={() => setActiveTab(TAB_CHART.STANDARD)}\r\n            >\r\n              Standard\r\n            </AppButton>\r\n          </Box>\r\n          <Box pl={2}>\r\n            <AppButton\r\n              variant={\r\n                activeTab === TAB_CHART.LOGARITHMIC\r\n                  ? 'lightBrand'\r\n                  : 'no-effects'\r\n              }\r\n              borderRadius={'full'}\r\n              onClick={() => setActiveTab(TAB_CHART.LOGARITHMIC)}\r\n            >\r\n              Logarithmic\r\n            </AppButton>\r\n          </Box>\r\n        </Flex>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const _renderLegends = () => {\r\n    if (isPreview) return null;\r\n    return (\r\n      <Box>\r\n        <Flex ml={-4} alignItems={'center'} flexWrap={'wrap'}>\r\n          <Flex pl={4} alignItems={'center'}>\r\n            <Box\r\n              px={4}\r\n              py={2}\r\n              bg={'rgba(181 62 250 / 100%)'}\r\n              borderRadius={4}\r\n              mr={2}\r\n            />\r\n            <Text>{symbol?.main?.toUpperCase()} price</Text>\r\n          </Flex>\r\n          <Flex pl={4} alignItems={'center'}>\r\n            <Box\r\n              px={4}\r\n              py={2}\r\n              bg={'rgba(255 152 229 / 100%)'}\r\n              borderRadius={4}\r\n              mr={2}\r\n            />\r\n            <Text>{symbol?.main?.toUpperCase()} predicted price</Text>\r\n          </Flex>\r\n        </Flex>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const _renderChartInfo = () => {\r\n    if (!isPreview) return null;\r\n    const firstData = !priceData.length\r\n      ? { time: 0, value: 1 / 0 } // 1/0 => show Infinity\r\n      : priceData[0];\r\n    const lastData = !priceData.length // 1/0 => show Infinity\r\n      ? { time: 0, value: 1 / 0 }\r\n      : priceData[priceData.length - 1];\r\n    const durationOfTime = !priceData.length\r\n      ? moment(endTime).diff(moment(startTime))\r\n      : moment(lastData.time).diff(moment(firstData.time));\r\n    const dayDuration = moment.duration(durationOfTime).days();\r\n    const hourDuration = moment.duration(durationOfTime).hours();\r\n\r\n    return (\r\n      <Flex\r\n        fontSize={'14px'}\r\n        justifyContent={'center'}\r\n        alignItems={'center'}\r\n        flexDirection={'column'}\r\n        height={'100%'}\r\n      >\r\n        <Flex>\r\n          <Text fontWeight={400}>Duration: </Text>\r\n          <Text\r\n            fontWeight={700}\r\n            ml={1}\r\n          >{`${dayDuration} days ${hourDuration} hours`}</Text>\r\n        </Flex>\r\n        <Flex flexWrap={'wrap'} mt={2}>\r\n          <Text fontWeight={400}>Price range: </Text>\r\n          <Text fontWeight={700} ml={1}>\r\n            {`$${firstData.value} - $${lastData.value}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  if (isPreview) {\r\n    return (\r\n      <Flex flexWrap={'wrap'} justifyContent={'space-between'}>\r\n        <Box width={['100%', '60%']}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <canvas id={id} />\r\n          </Stack>\r\n        </Box>\r\n\r\n        <Box width={['100%', '35%']} mt={3}>\r\n          <Stack spacing={'1'} w={'full'} height={'100%'}>\r\n            {_renderChartInfo()}\r\n          </Stack>\r\n        </Box>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex\r\n        alignItems={'center'}\r\n        justifyContent={'space-between'}\r\n        ml={-4}\r\n        mb={4}\r\n      >\r\n        <Box pl={4}>{_renderTabChart()}</Box>\r\n        <Box display={{ base: 'none', md: 'block' }} pl={4}>\r\n          {_renderLegends()}\r\n        </Box>\r\n      </Flex>\r\n      <div>\r\n        <canvas id={id} />\r\n      </div>\r\n      <Box display={{ base: 'block', md: 'none' }} pt={4}>\r\n        {_renderLegends()}\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuctionPriceChart;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolINO\\part\\PartViewDetail.tsx",["1125","1126","1127"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\steps\\StepTokenSetup.tsx",["1128","1129","1130"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\steps\\StepReview.tsx",["1131","1132"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateCompetition\\part\\FormCompetition.tsx",["1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146"],"import Card from 'src/components/Card';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Stack,\r\n  Table,\r\n  TableContainer,\r\n  Tag,\r\n  TagLabel,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n} from '@chakra-ui/react';\r\nimport AppInput from 'src/components/AppInput';\r\nimport React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { createValidator } from 'src/utils/utils-validator';\r\nimport AppDatePicker from 'src/components/AppDatePicker';\r\nimport moment from 'moment';\r\nimport AppButton from 'src/components/AppButton';\r\nimport { ICompetition, IDiamondUser } from '../../PageStaking';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { toastError, toastSuccess } from 'src/utils/utils-notify';\r\nimport ModalFinalizeCompetition from 'src/modals/ModalFinalizeCompetition';\r\nimport { COMPETITION_STATUS, getColorStatus } from 'src/pages/PageStaking';\r\nimport {\r\n  formatShortAddress,\r\n  formatTimestamp,\r\n  formatWeiNumber,\r\n} from 'src/utils/utils-formats';\r\nimport config from 'src/config';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport { BackIcon } from 'src/assets/icons';\r\nimport { useHistory } from 'react-router';\r\nimport AppSelect from 'src/components/AppSelect';\r\n\r\ninterface IFormCompetition {\r\n  type: string;\r\n  onSubmitForm: (data: any) => void;\r\n  isLoading: boolean;\r\n  competition?: ICompetition;\r\n  fetchData?: () => void;\r\n}\r\n\r\ninterface IDataForm {\r\n  startTime: any;\r\n  endTime: any;\r\n  slotAuctioned: any;\r\n  slotDeranked: any;\r\n}\r\n\r\nconst FormCompetition = ({\r\n  type,\r\n  onSubmitForm,\r\n  isLoading,\r\n  competition,\r\n  fetchData,\r\n}: IFormCompetition) => {\r\n  const initCompetitionInfoState = {\r\n    startTime: null,\r\n    endTime: null,\r\n    slotAuctioned: '',\r\n    slotDeranked: '',\r\n  };\r\n  const [dataForm, setDataForm] = useState<IDataForm>(initCompetitionInfoState);\r\n  const [isLoadingStart, setIsLoadingStart] = useState<boolean>(false);\r\n  const [isOpenModalFinalizeCompetition, setIsOpenModalFinalizeCompetition] =\r\n    useState<boolean>(false);\r\n  const [snapshotFinalize, setSnapshotFinalize] = useState<any>({});\r\n  const [snapshots, setSnapshots] = useState<any>([]);\r\n  const [snapshotId, setSnapshotId] = useState<string>('');\r\n  const [isDisableSubmit, setIsDisableSubmit] = useState<boolean>(true);\r\n  const { user } = useAuth();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (type === 'edit') {\r\n      setDataForm({\r\n        ...dataForm,\r\n        startTime: moment(competition?.startTime).unix(),\r\n        endTime: moment(competition?.endTime).unix(),\r\n        slotAuctioned: competition?.slotAuctioned,\r\n        slotDeranked: competition?.slotDeranked,\r\n      });\r\n    }\r\n  }, [competition]);\r\n\r\n  const validator = useRef(\r\n    createValidator({\r\n      element: (message: string) => <Text color={'red.500'}>{message}</Text>,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    const isDisable = !validator.current.allValid();\r\n    setIsDisableSubmit(isDisable);\r\n  }, [dataForm]);\r\n\r\n  const isReadOnly = useMemo(() => {\r\n    if (competition) {\r\n      return (\r\n        competition.status === COMPETITION_STATUS.ENDED ||\r\n        competition.status === COMPETITION_STATUS.CLOSED ||\r\n        competition.status === COMPETITION_STATUS.LIVE ||\r\n        !user?.havePermissions(config.permissions.staking.UPDATE_COMPETITION)\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }, [competition]);\r\n\r\n  const onSubmit = async () => {\r\n    onSubmitForm &&\r\n      onSubmitForm({\r\n        ...dataForm,\r\n        startTime: new Date(dataForm.startTime * 1000),\r\n        endTime: new Date(dataForm.endTime * 1000),\r\n      });\r\n  };\r\n\r\n  const getSnapshotFinalized = async () => {\r\n    try {\r\n      const data = await rf\r\n        .getRequest('UserRequest')\r\n        .getSnapshotById(competition?.finalizedSnapshotId);\r\n      setSnapshotFinalize(data);\r\n    } catch (e) {\r\n      setSnapshotFinalize({});\r\n    }\r\n  };\r\n\r\n  const getSnapshots = useCallback(async () => {\r\n    try {\r\n      const res = (await rf.getRequest('UserRequest').getSnapshots({\r\n        competitionId: competition?.competitionId,\r\n        limit: 100,\r\n      })) as any;\r\n\r\n      if (res && res.docs) {\r\n        setSnapshots(res.docs);\r\n        setSnapshotId(res.docs[0].snapshotId);\r\n      }\r\n    } catch (error: any) {}\r\n  }, [competition]);\r\n\r\n  useEffect(() => {\r\n    if (!competition) return;\r\n\r\n    if (competition.finalizedSnapshotId) {\r\n      getSnapshotFinalized().then();\r\n      return;\r\n    }\r\n\r\n    if (\r\n      competition.status === COMPETITION_STATUS.LIVE ||\r\n      competition?.status === COMPETITION_STATUS.ENDED\r\n    ) {\r\n      getSnapshots();\r\n      return;\r\n    }\r\n  }, [competition]);\r\n\r\n  useEffect(() => {\r\n    if (!competition) return;\r\n\r\n    if (\r\n      snapshots &&\r\n      !!snapshots.length &&\r\n      (competition?.status === COMPETITION_STATUS.ENDED ||\r\n        competition?.status === COMPETITION_STATUS.LIVE)\r\n    ) {\r\n      const listUser = snapshots.find(\r\n        (item: any) => +item.snapshotId === +snapshotId,\r\n      );\r\n      setSnapshotFinalize(listUser);\r\n    }\r\n  }, [snapshots, snapshotId, competition]);\r\n\r\n  const _renderButtonStartCompetition = () => {\r\n    const updateStageCompetition = async () => {\r\n      try {\r\n        setIsLoadingStart(true);\r\n        await rf\r\n          .getRequest('UserRequest')\r\n          .updateStageCompetition(competition?.competitionId, {\r\n            stage: 'Active',\r\n          });\r\n        toastSuccess({ message: 'Start competition successfully!' });\r\n        setIsLoadingStart(false);\r\n        fetchData && fetchData();\r\n      } catch (e: any) {\r\n        toastError({ message: e.message });\r\n        setIsLoadingStart(false);\r\n      }\r\n    };\r\n\r\n    if (\r\n      user?.havePermissions(\r\n        config.permissions.staking.UPDATE_STAGE_COMPETITION,\r\n      ) &&\r\n      type === 'edit' &&\r\n      competition?.status === COMPETITION_STATUS.CREATED\r\n    ) {\r\n      return (\r\n        <AppButton\r\n          width={['100%', 'auto']}\r\n          onClick={updateStageCompetition}\r\n          isLoading={isLoadingStart}\r\n          ml={[0, 5]}\r\n        >\r\n          Start Competition\r\n        </AppButton>\r\n      );\r\n    }\r\n  };\r\n\r\n  const _renderButtonFinalizeCompetition = () => {\r\n    if (\r\n      (competition?.status === COMPETITION_STATUS.ENDED ||\r\n        competition?.status === COMPETITION_STATUS.LIVE) &&\r\n      user?.havePermissions(config.permissions.staking.FINALIZE_COMPETITION)\r\n    ) {\r\n      return (\r\n        <AppButton\r\n          onClick={() => setIsOpenModalFinalizeCompetition(true)}\r\n          ml={5}\r\n          isDisabled={competition?.status === COMPETITION_STATUS.LIVE}\r\n        >\r\n          Finalize Competition\r\n        </AppButton>\r\n      );\r\n    }\r\n  };\r\n\r\n  const _renderDiamondTierRanking = () => {\r\n    const _renderBodyTable = () => {\r\n      return (\r\n        <Tbody>\r\n          {snapshotFinalize?.rankedUsers &&\r\n            !!snapshotFinalize?.rankedUsers.length &&\r\n            snapshotFinalize?.rankedUsers?.map(\r\n              (user: IDiamondUser, index: number) => {\r\n                const stakingTokenBuni = user.stakingTokens.find(\r\n                  (item: any) =>\r\n                    item?.stakingTokenName?.toLowerCase() === 'buni',\r\n                );\r\n                const stakingTokenBPT = user.stakingTokens.find(\r\n                  (item: any) =>\r\n                    item?.stakingTokenName?.toLowerCase() === 'wbnb',\r\n                );\r\n                const stakedBpt =\r\n                  user.stakingTokens && stakingTokenBPT\r\n                    ? stakingTokenBPT?.stakedAmount\r\n                    : '0';\r\n                const stakedBuni =\r\n                  user.stakingTokens && stakingTokenBuni\r\n                    ? stakingTokenBuni?.stakedAmount\r\n                    : '0';\r\n                return (\r\n                  <Tr key={index}>\r\n                    <Td>{user.rank}</Td>\r\n                    <Td>{formatShortAddress(user.userAddress)}</Td>\r\n                    <Td>{formatWeiNumber(user.amountStaked)} BUNI</Td>\r\n                    <Td>{formatWeiNumber(stakedBpt)} BPT</Td>\r\n                    <Td>{formatWeiNumber(stakedBuni)} BUNI</Td>\r\n                  </Tr>\r\n                );\r\n              },\r\n            )}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTable = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Position</Th>\r\n            <Th>Wallet Address</Th>\r\n            <Th>Total Buni Value</Th>\r\n            <Th>BPT Staked</Th>\r\n            <Th>BUNI Staked</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    const _renderNoData = () => {\r\n      return (\r\n        <Flex justifyContent={'center'} mt={3}>\r\n          No data...\r\n        </Flex>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <Box mt={3}>\r\n        <Text my={3} fontWeight={500}>\r\n          Diamond Tier List\r\n        </Text>\r\n\r\n        <Flex justifyContent={['flex-start', 'flex-end']}>\r\n          (Conversion Rate:{' '}\r\n          <Text ml={2} fontWeight={600}>\r\n            1BPT = 50,000 BUNI{' '}\r\n          </Text>\r\n          )\r\n        </Flex>\r\n        <TableContainer>\r\n          <Table colorScheme=\"gray\">\r\n            {_renderHeaderTable()}\r\n            {_renderBodyTable()}\r\n          </Table>\r\n        </TableContainer>\r\n        {!snapshotFinalize?.rankedUsers ||\r\n          (snapshotFinalize?.rankedUsers &&\r\n            !snapshotFinalize?.rankedUsers.length &&\r\n            _renderNoData())}\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const _renderActionButton = () => {\r\n    if (type === 'create') {\r\n      return (\r\n        <AppButton\r\n          width={['100%', 'auto']}\r\n          disabled={isDisableSubmit}\r\n          onClick={onSubmit}\r\n          isLoading={isLoading}\r\n        >\r\n          Create Competition\r\n        </AppButton>\r\n      );\r\n    }\r\n\r\n    if (\r\n      competition?.status !== COMPETITION_STATUS.ENDED &&\r\n      competition?.status !== COMPETITION_STATUS.CLOSED &&\r\n      competition?.status !== COMPETITION_STATUS.LIVE &&\r\n      user?.havePermissions(config.permissions.staking.UPDATE_COMPETITION)\r\n    ) {\r\n      return (\r\n        <AppButton\r\n          width={['100%', 'auto']}\r\n          disabled={isDisableSubmit}\r\n          onClick={onSubmit}\r\n          isLoading={isLoading}\r\n          mb={[3, 0]}\r\n        >\r\n          Update Competition\r\n        </AppButton>\r\n      );\r\n    }\r\n  };\r\n\r\n  const _renderSnapshotWhenCompetitionClose = () => {\r\n    if (\r\n      competition?.status === COMPETITION_STATUS.CLOSED &&\r\n      snapshotFinalize &&\r\n      !!Object.values(snapshotFinalize).length\r\n    ) {\r\n      return (\r\n        <Box>\r\n          <Text mr={1}>\r\n            Snapshot Time:\r\n            <Text fontWeight={'600'} as={'span'} ml={1}>\r\n              {formatTimestamp(\r\n                snapshotFinalize.snapshotTime,\r\n                'HH:mm - YYYY/MM/DD',\r\n              )}\r\n            </Text>\r\n          </Text>\r\n          {_renderDiamondTierRanking()}\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    return <> </>;\r\n  };\r\n\r\n  const _renderSnapshotWhenCompetitionLive = () => {\r\n    if (\r\n      snapshots &&\r\n      !!snapshots.length &&\r\n      (competition?.status === COMPETITION_STATUS.LIVE ||\r\n        competition?.status === COMPETITION_STATUS.ENDED)\r\n    ) {\r\n      return (\r\n        <>\r\n          <Text>Snapshot time</Text>\r\n          <AppSelect\r\n            value={snapshotId}\r\n            placeholder={'Select snapshot'}\r\n            onChange={(e) => {\r\n              setSnapshotId(e.target.value);\r\n            }}\r\n            width={'300px'}\r\n          >\r\n            {snapshots &&\r\n              !!snapshots.length &&\r\n              snapshots?.map((option: any, index: number) => (\r\n                <option value={option.snapshotId} key={index}>\r\n                  {formatTimestamp(option.snapshotTime, 'HH:mm - YYYY/MM/DD')}\r\n                </option>\r\n              ))}\r\n          </AppSelect>\r\n\r\n          {_renderDiamondTierRanking()}\r\n        </>\r\n      );\r\n    }\r\n    return <> </>;\r\n  };\r\n\r\n  const _renderModalFinalize = () => {\r\n    if (\r\n      type === 'edit' &&\r\n      competition?.status === COMPETITION_STATUS.ENDED &&\r\n      user?.havePermissions(config.permissions.staking.FINALIZE_COMPETITION)\r\n    ) {\r\n      return (\r\n        <ModalFinalizeCompetition\r\n          open={isOpenModalFinalizeCompetition}\r\n          onClose={() => setIsOpenModalFinalizeCompetition(false)}\r\n          competitionId={competition?.competitionId}\r\n          fetchData={fetchData}\r\n          snapshots={snapshots}\r\n        />\r\n      );\r\n    }\r\n\r\n    return <> </>;\r\n  };\r\n\r\n  return (\r\n    <Card variant=\"sub\">\r\n      <Box mb={5}>\r\n        <AppButton\r\n          variant={'no-effects'}\r\n          onClick={() => history.push('/staking')}\r\n          p={0}\r\n        >\r\n          <BackIcon />\r\n          <Text fontWeight={'normal'} ml={2}>\r\n            Competition List\r\n          </Text>\r\n        </AppButton>\r\n      </Box>\r\n\r\n      {type === 'edit' && (\r\n        <Box>\r\n          <Flex alignItems={'center'} justifyContent={'space-between'}>\r\n            <Flex alignItems={'center'}>\r\n              <Text mr={3}>Status</Text>\r\n              <Tag\r\n                size=\"lg\"\r\n                colorScheme={getColorStatus(competition?.status || ' ')}\r\n                borderRadius=\"full\"\r\n              >\r\n                <TagLabel>{competition?.status}</TagLabel>\r\n              </Tag>\r\n            </Flex>\r\n            {_renderButtonFinalizeCompetition()}\r\n          </Flex>\r\n\r\n          <Flex alignItems={'center'} my={5}>\r\n            <Text mr={2}>Number of Competitors:</Text>\r\n            <Text fontWeight={'600'}>{competition?.numCompetitors}</Text>\r\n          </Flex>\r\n        </Box>\r\n      )}\r\n\r\n      <Flex flexWrap={'wrap'} marginX={-4} pb={4}>\r\n        <Box width={['100%', '50%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text whiteSpace={'nowrap'} mr={2}>\r\n              Start time{' '}\r\n              <Text as={'span'} color={'red.500'}>\r\n                *\r\n              </Text>\r\n            </Text>\r\n            <AppDatePicker\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  startTime: moment(e).unix(),\r\n                })\r\n              }\r\n              selected={\r\n                dataForm.startTime\r\n                  ? moment(dataForm.startTime * 1000).toDate()\r\n                  : null\r\n              }\r\n              minDate={moment().toDate()}\r\n              showTimeSelect\r\n              timeFormat=\"HH:mm\"\r\n              dateFormat=\"dd/MM/yyyy HH:mm:ss\"\r\n              readOnly={isReadOnly}\r\n              validate={{\r\n                name: `startTimeCompetition`,\r\n                validator: validator.current,\r\n                rule: ['required', `minDate:current time`],\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '50%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text whiteSpace={'nowrap'} mr={2}>\r\n              End time{' '}\r\n              <Text as={'span'} color={'red.500'}>\r\n                *\r\n              </Text>\r\n            </Text>\r\n            <AppDatePicker\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  endTime: moment(e).unix(),\r\n                })\r\n              }\r\n              selected={\r\n                dataForm.endTime\r\n                  ? moment(dataForm.endTime * 1000).toDate()\r\n                  : null\r\n              }\r\n              minDate={moment().toDate()}\r\n              showTimeSelect\r\n              timeFormat=\"HH:mm\"\r\n              dateFormat=\"dd/MM/yyyy HH:mm:ss\"\r\n              readOnly={isReadOnly}\r\n              validate={{\r\n                name: `endTimeCompetition`,\r\n                validator: validator.current,\r\n                rule: [\r\n                  'required',\r\n                  `minDate:current time`,\r\n                  `minDateWithTime:${dataForm.startTime},start time`,\r\n                ],\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '50%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text>\r\n              Number of slots auctioned\r\n              <Text as={'span'} color={'red.500'}>\r\n                {' '}\r\n                *\r\n              </Text>\r\n            </Text>\r\n            <AppInput\r\n              type={'number'}\r\n              value={dataForm.slotAuctioned || ''}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  slotAuctioned: +e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'slotAuctioned',\r\n                validator: validator.current,\r\n                rule: ['required', 'numeric', 'isPositive', `minValue:${0}`],\r\n              }}\r\n              readOnly={isReadOnly}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '50%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text>\r\n              Number of slots deranked\r\n              <Text as={'span'} color={'red.500'}>\r\n                {' '}\r\n                *\r\n              </Text>\r\n            </Text>\r\n            <AppInput\r\n              type={'number'}\r\n              value={dataForm.slotDeranked || ''}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  slotDeranked: +e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'slotDeranked',\r\n                validator: validator.current,\r\n                rule: ['required', 'numeric', 'isPositive', `minValue:${0}`],\r\n              }}\r\n              readOnly={isReadOnly}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n      </Flex>\r\n\r\n      {_renderSnapshotWhenCompetitionClose()}\r\n      {_renderSnapshotWhenCompetitionLive()}\r\n\r\n      <Flex\r\n        justifyContent={['center', 'flex-end']}\r\n        mt={3}\r\n        wrap={['wrap', 'nowrap']}\r\n      >\r\n        {_renderActionButton()}\r\n        {_renderButtonStartCompetition()}\r\n      </Flex>\r\n\r\n      {_renderModalFinalize()}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FormCompetition;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\steps\\StepAllocationSetup.tsx",["1147","1148","1149","1150","1151","1152","1153","1154","1155"],"import {\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React, {\r\n  forwardRef,\r\n  Ref,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport AppButton from 'src/components/AppButton';\r\nimport AppInput from 'src/components/AppInput';\r\nimport Card from 'src/components/Card';\r\nimport { PoolRequestType, RefStepCreatePool } from 'src/utils/utils-pool';\r\nimport { createValidator } from 'src/utils/utils-validator';\r\nimport { getTierName } from 'src/utils/tier';\r\nimport { WarpBoxField } from './StepPoolInfo';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport { WarpBoxSteps } from '../index';\r\nimport { toastError } from 'src/utils/utils-notify';\r\n\r\ninterface StepPoolTokenSetupProps {\r\n  pool: PoolRequestType;\r\n  goToNext?: () => void;\r\n  goToPrev?: () => void;\r\n}\r\n\r\nconst StepAllocationSetup = forwardRef(\r\n  (props: StepPoolTokenSetupProps, ref: Ref<RefStepCreatePool>) => {\r\n    const { pool, goToNext, goToPrev } = props;\r\n    const { user } = useAuth();\r\n\r\n    const [internalPool, setInternalPool] = useState<any>(pool);\r\n\r\n    const {\r\n      idoDetails: {\r\n        ticketAllocation: { tokenPerTicket, winingTickets },\r\n        maxCap,\r\n      },\r\n      network,\r\n    } = internalPool;\r\n\r\n    useEffect(() => {\r\n      setInternalPool(pool);\r\n    }, []);\r\n\r\n    const validator = useRef(\r\n      createValidator({\r\n        element: (message: string) => <Text color={'red.500'}>{message}</Text>,\r\n      }),\r\n    );\r\n\r\n    const isCorrectNetwork = useMemo(\r\n      () => user?.getNetwork() === network,\r\n      [network, user],\r\n    );\r\n\r\n    const [isDisableNextStep, setIsDisableNextStep] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n      const isDisable =\r\n        !validator.current.allValid() ||\r\n        winingTickets.some((item: any) => +item.allocationSize > +maxCap) ||\r\n        !isCorrectNetwork;\r\n      setIsDisableNextStep(isDisable);\r\n    }, [internalPool, isCorrectNetwork]);\r\n\r\n    const validate = () => {\r\n      if (isDisableNextStep) throw new Error('Invalid validation');\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      validate,\r\n      pool: internalPool,\r\n    }));\r\n\r\n    const _renderMessageValidateForAllocationSize = (ticket: any) => {\r\n      if (+ticket.allocationSize && +ticket.allocationSize > +maxCap) {\r\n        return (\r\n          <Text as={'span'} color={'red.500'}>\r\n            The allocation size must be less than swap amount.\r\n          </Text>\r\n        );\r\n      }\r\n      return <></>;\r\n    };\r\n\r\n    const totalAllocationSize = useMemo(() => {\r\n      return winingTickets.reduce(\r\n        (total: number, ticket: any) => total + Number(ticket.allocationSize),\r\n        0,\r\n      );\r\n    }, [winingTickets]);\r\n\r\n    const onNextStep = () => {\r\n      if (+totalAllocationSize > +maxCap) {\r\n        toastError({\r\n          message:\r\n            'The number you entered exceed the maximum number of available tokens.',\r\n        });\r\n        return;\r\n      }\r\n\r\n      goToNext && goToNext();\r\n    };\r\n\r\n    const _renderWiningTicket = () => {\r\n      const bg = useColorModeValue('secondaryGray.300', 'navy.900');\r\n      return winingTickets.map((ticket: any, index: number) => (\r\n        <Box\r\n          key={index}\r\n          w={'full'}\r\n          my={4}\r\n          p={4}\r\n          bg={bg}\r\n          rounded={'xl'}\r\n          overflow={'visible'}\r\n          pos={'relative'}\r\n        >\r\n          <Flex flexWrap={'wrap'} marginX={-2}>\r\n            <WarpBoxField label={'Tier'}>\r\n              <AppInput value={getTierName(ticket.tier)} isReadOnly />\r\n            </WarpBoxField>\r\n\r\n            <WarpBoxField label={'Allocation Size'} isRequired>\r\n              <AppInput\r\n                value={ticket.allocationSize}\r\n                onChange={(e) => {\r\n                  const newTicket = winingTickets.map(\r\n                    (value: any, id: number) =>\r\n                      index === id\r\n                        ? {\r\n                            ...value,\r\n                            allocationSize: e.target.value.toString(),\r\n                          }\r\n                        : value,\r\n                  );\r\n                  setInternalPool({\r\n                    ...internalPool,\r\n                    idoDetails: {\r\n                      ...internalPool.idoDetails,\r\n                      ticketAllocation: {\r\n                        ...internalPool.idoDetails.ticketAllocation,\r\n                        winingTickets: newTicket,\r\n                      },\r\n                    },\r\n                  });\r\n                }}\r\n                validate={{\r\n                  name: `allocationSizeForTier${getTierName(ticket.tier)}`,\r\n                  validator: validator.current,\r\n                  rule: ['required', 'numeric', 'isPositive', `minValue:${0}`],\r\n                }}\r\n              />\r\n              {_renderMessageValidateForAllocationSize(ticket)}\r\n            </WarpBoxField>\r\n\r\n            <WarpBoxField label={'Individual Min Ticket'} isRequired>\r\n              <AppInput\r\n                value={ticket.individualMinTicket}\r\n                onChange={(e) => {\r\n                  const newTicket = winingTickets.map(\r\n                    (value: any, id: number) =>\r\n                      index === id\r\n                        ? { ...value, individualMinTicket: +e.target.value }\r\n                        : value,\r\n                  );\r\n                  setInternalPool({\r\n                    ...internalPool,\r\n                    idoDetails: {\r\n                      ...internalPool.idoDetails,\r\n                      ticketAllocation: {\r\n                        ...internalPool.idoDetails.ticketAllocation,\r\n                        winingTickets: newTicket,\r\n                      },\r\n                    },\r\n                  });\r\n                }}\r\n                validate={{\r\n                  name: 'individualMinTicket',\r\n                  validator: validator.current,\r\n                  rule: ['required', 'numeric', 'isPositive'],\r\n                }}\r\n              />\r\n            </WarpBoxField>\r\n\r\n            <WarpBoxField label={'Individual Max Ticket'} isRequired>\r\n              <AppInput\r\n                value={ticket.individualMaxTicket}\r\n                onChange={(e) => {\r\n                  const newTicket = winingTickets.map(\r\n                    (value: any, id: number) =>\r\n                      index === id\r\n                        ? { ...value, individualMaxTicket: +e.target.value }\r\n                        : value,\r\n                  );\r\n                  setInternalPool({\r\n                    ...internalPool,\r\n                    idoDetails: {\r\n                      ...internalPool.idoDetails,\r\n                      ticketAllocation: {\r\n                        ...internalPool.idoDetails.ticketAllocation,\r\n                        winingTickets: newTicket,\r\n                      },\r\n                    },\r\n                  });\r\n                }}\r\n                validate={{\r\n                  name: 'individualMaxTicket',\r\n                  validator: validator.current,\r\n                  rule: [\r\n                    'required',\r\n                    'numeric',\r\n                    'isPositive',\r\n                    `minValueWithNumber:${ticket.individualMinTicket},individual min ticket`,\r\n                  ],\r\n                }}\r\n              />\r\n            </WarpBoxField>\r\n          </Flex>\r\n        </Box>\r\n      ));\r\n    };\r\n\r\n    return (\r\n      <WarpBoxSteps network={network}>\r\n        <Card pt={6} mb={6} variant=\"sub\">\r\n          <Heading as={'h4'} fontSize={'xl'} px={1} mb={5}>\r\n            Ticket allocation\r\n          </Heading>\r\n          <Flex flexWrap={'wrap'} marginX={-2}>\r\n            <WarpBoxField\r\n              label={'Token Per Ticket'}\r\n              isRequired\r\n              customWidth={'100%'}\r\n            >\r\n              <AppInput\r\n                variant={'main'}\r\n                type={'number'}\r\n                value={tokenPerTicket}\r\n                onChange={(e) =>\r\n                  setInternalPool({\r\n                    ...internalPool,\r\n                    idoDetails: {\r\n                      ...internalPool.idoDetails,\r\n                      ticketAllocation: {\r\n                        ...internalPool.idoDetails.ticketAllocation,\r\n                        tokenPerTicket: e.target.value,\r\n                      },\r\n                    },\r\n                  })\r\n                }\r\n                validate={{\r\n                  name: 'tokenPerTicket',\r\n                  validator: validator.current,\r\n                  rule: ['required', 'numeric', 'isPositive', `minValue:${0}`],\r\n                }}\r\n              />\r\n            </WarpBoxField>\r\n          </Flex>\r\n          {_renderWiningTicket()}\r\n        </Card>\r\n        <Flex justifyContent={'space-between'}>\r\n          <AppButton onClick={goToPrev} minW={'24'} variant={'lightBrand'}>\r\n            Previous\r\n          </AppButton>\r\n          <AppButton\r\n            variant={'brand'}\r\n            onClick={onNextStep}\r\n            disabled={isDisableNextStep}\r\n            minW={'24'}\r\n          >\r\n            Next\r\n          </AppButton>\r\n        </Flex>\r\n      </WarpBoxSteps>\r\n    );\r\n  },\r\n);\r\n\r\nexport default StepAllocationSetup;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\steps\\StepPoolInfo.tsx",["1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\AuctionList.tsx",["1170","1171","1172","1173"],"import { Flex, Tbody, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport { useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport Card from 'src/components/Card';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport AuctionItem from './AuctionItem';\r\n\r\ninterface ISearch {\r\n  searchKey?: string;\r\n  isDraft?: boolean;\r\n}\r\n\r\nconst AuctionList = () => {\r\n  const { id: userId } = useParams() as any;\r\n  const [search, setSearch] = useState<ISearch>({\r\n    searchKey: '',\r\n    isDraft: false,\r\n  });\r\n\r\n  const getListAuctions = async (params: ISearch) => {\r\n    try {\r\n      const dataRes = await rf\r\n        .getRequest('AuctionRequest')\r\n        .getListAuctions(userId, params);\r\n      return dataRes;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n  //   useEffect(() => {\r\n  //     getListAuctions(search);\r\n  //   }, [userId]);\r\n  const _renderHeaderTableAuction = () => {\r\n    return (\r\n      <Thead>\r\n        <Tr>\r\n          <Th>Token</Th>\r\n          <Th>Network</Th>\r\n          <Th>Price</Th>\r\n          <Th>Main Token</Th>\r\n          <Th>Base Token</Th>\r\n        </Tr>\r\n      </Thead>\r\n    );\r\n  };\r\n\r\n  const _renderBodyTableAuction = (dataTable: any) => {\r\n    return (\r\n      <Tbody>\r\n        {dataTable?.map((auction: any, index: number) => (\r\n          <AuctionItem auction={auction} key={index} />\r\n        ))}\r\n      </Tbody>\r\n    );\r\n  };\r\n  return (\r\n    <Card mt=\"20px\">\r\n      <Flex fontSize={'30px'} fontWeight={700} py={'30px'}>\r\n        User LBP\r\n      </Flex>\r\n      <AppDataTable\r\n        requestParams={search}\r\n        renderHeader={_renderHeaderTableAuction}\r\n        renderBody={_renderBodyTableAuction}\r\n        fetchData={getListAuctions}\r\n        limit={10}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AuctionList;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\PoolsOfAccount.tsx",["1174","1175","1176","1177","1178"],"import {\r\n  Box,\r\n  Flex,\r\n  Tbody,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport AppSearch from 'src/components/AppSearch';\r\nimport Card from 'src/components/Card';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { IUserProfileResponse } from 'src/utils/common';\r\nimport IDOPoolItem from './IDOPoolItem';\r\nimport INOPoolItem from './INOPoolItem';\r\n\r\nconst POOL_TYPE = [\r\n  { label: 'IDO', value: 'IDO' },\r\n  { label: 'INO', value: 'INO' },\r\n];\r\n\r\ninterface ISearchPool {\r\n  searchKey?: string;\r\n  poolType?: string;\r\n}\r\n\r\nconst PoolsOfAccount: React.FC<{\r\n  userInfo: IUserProfileResponse | undefined;\r\n}> = ({ userInfo }) => {\r\n  const { id: userId } = useParams() as any;\r\n\r\n  const [searchValue, setSearchValue] = useState<ISearchPool>({\r\n    poolType: 'IDO',\r\n  });\r\n  const getDataPools = async (params: any) => {\r\n    try {\r\n      const listPoolsRes = await rf\r\n        .getRequest('PoolRequest')\r\n        .getPoolsOfUser(userId, params);\r\n      return listPoolsRes;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDataPools({});\r\n  }, [userId]);\r\n\r\n  const _renderHeaderTablePools = () => {\r\n    return (\r\n      <Thead>\r\n        <Tr>\r\n          <Th>Pool Name</Th>\r\n          <Th>\r\n            {searchValue.poolType === 'IDO' ? (\r\n              <Flex justifyContent={'space-between'}>\r\n                <span>Whitelist</span>\r\n                <span>Swap</span>\r\n                <span>Rewards Claim</span>\r\n              </Flex>\r\n            ) : (\r\n              <Flex justifyContent={'space-between'}>\r\n                <span>Whitelist</span>\r\n                <span>Swap</span>\r\n              </Flex>\r\n            )}\r\n          </Th>\r\n          <Th>Invest</Th>\r\n          <Th></Th>\r\n        </Tr>\r\n      </Thead>\r\n    );\r\n  };\r\n\r\n  const _renderBodyTablePools = (dataTable: any) => {\r\n    return (\r\n      <Tbody>\r\n        {dataTable.map((pool: any, index: number) => {\r\n          return (\r\n            <React.Fragment key={index}>\r\n              {pool?.pool?.type === 'IDO' && (\r\n                <IDOPoolItem pool={pool?.pool} userInfo={userInfo} />\r\n              )}\r\n              {pool?.pool?.type === 'INO' && (\r\n                <INOPoolItem pool={pool?.pool} userInfo={userInfo} />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card mt={'20px'}>\r\n      <Flex fontSize={'30px'} fontWeight={700} py={'30px'}>\r\n        User Pool\r\n      </Flex>\r\n      <Flex\r\n        justifyContent={'space-between'}\r\n        width=\"100%\"\r\n        mb=\"40px\"\r\n        alignItems={'flex-start'}\r\n      >\r\n        <Flex gap={'10px'}>\r\n          <Box\r\n            className=\"btnPool\"\r\n            onClick={() => setSearchValue({ ...searchValue, poolType: 'IDO' })}\r\n            bg={\r\n              searchValue.poolType === 'IDO'\r\n                ? useColorModeValue('secondaryGray.500', 'whiteAlpha.300')\r\n                : useColorModeValue('transparent', 'transparent')\r\n            }\r\n          >\r\n            IDO\r\n          </Box>\r\n          <Box\r\n            className=\"btnPool\"\r\n            onClick={() => setSearchValue({ ...searchValue, poolType: 'INO' })}\r\n            bg={\r\n              searchValue.poolType === 'INO'\r\n                ? useColorModeValue('secondaryGray.500', 'whiteAlpha.300')\r\n                : useColorModeValue('transparent', 'transparent')\r\n            }\r\n          >\r\n            INO\r\n          </Box>\r\n        </Flex>\r\n        <div>\r\n          <AppSearch\r\n            placeholder=\"Search\"\r\n            onChange={(e) =>\r\n              setSearchValue({ ...searchValue, searchKey: e.target.value })\r\n            }\r\n          />\r\n        </div>\r\n      </Flex>\r\n\r\n      <AppDataTable\r\n        requestParams={searchValue}\r\n        fetchData={getDataPools}\r\n        limit={10}\r\n        renderHeader={_renderHeaderTablePools}\r\n        renderBody={_renderBodyTablePools}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PoolsOfAccount;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\AccountInfo.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\admins\\part\\FormAdmin.tsx",["1179","1180","1181","1182","1183","1184","1185"],"import Card from 'src/components/Card';\r\nimport 'src/styles/pages/UserDetail.scss';\r\nimport { Box, Flex, Stack, Text } from '@chakra-ui/react';\r\nimport AppInput from 'src/components/AppInput';\r\nimport React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { createValidator } from 'src/utils/utils-validator';\r\nimport AppTextarea from 'src/components/AppTextarea';\r\nimport AppButton from 'src/components/AppButton';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { Link } from 'react-router-dom';\r\nimport { Select } from 'chakra-react-select';\r\n\r\ninterface IGroup {\r\n  groupId: string;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\ninterface IFormGroup {\r\n  type: string;\r\n  userInfo?: any;\r\n  onSubmitForm: (data: any) => void;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst FormAdmin = ({ type, userInfo, onSubmitForm, isLoading }: IFormGroup) => {\r\n  const initUserInfoState = {\r\n    email: '',\r\n    userAddress: '',\r\n    fullName: '',\r\n    groupIds: [],\r\n    description: '',\r\n  };\r\n  const [dataForm, setDataForm] = useState(initUserInfoState);\r\n  const [groups, setGroups] = useState<IGroup[]>([]);\r\n  const [isDisabledSubmit, setIsDisableSubmit] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    if (type === 'edit') {\r\n      let groupIds = [];\r\n      if (userInfo && !!userInfo?.groups?.length) {\r\n        groupIds = userInfo?.groups?.map((item: IGroup) => item.groupId);\r\n      }\r\n\r\n      setDataForm({\r\n        email: userInfo.email,\r\n        fullName: userInfo.fullName,\r\n        userAddress: userInfo.userAddress,\r\n        groupIds,\r\n        description: userInfo.description,\r\n      });\r\n    }\r\n  }, [userInfo]);\r\n\r\n  const getGroups = useCallback(async () => {\r\n    try {\r\n      const res = (await rf.getRequest('AdminRequest').getGroups({\r\n        limit: 200,\r\n      })) as any;\r\n      res && res.docs && setGroups(res.docs);\r\n    } catch (error: any) {\r\n      setGroups([]);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getGroups();\r\n  }, []);\r\n  const validator = useRef(\r\n    createValidator({\r\n      element: (message: string) => <Text color={'red.500'}>{message}</Text>,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    const disabledSubmit = !validator.current.allValid();\r\n    setIsDisableSubmit(disabledSubmit);\r\n  }, [dataForm]);\r\n\r\n  const onSubmit = async () => {\r\n    const dataFormSubmit: any = { ...dataForm };\r\n    for (const key in dataFormSubmit) {\r\n      if (\r\n        !dataFormSubmit[key] ||\r\n        (Array.isArray(dataFormSubmit[key]) && !dataFormSubmit.length)\r\n      ) {\r\n        delete dataFormSubmit[key];\r\n      }\r\n    }\r\n    onSubmitForm(dataFormSubmit);\r\n  };\r\n\r\n  const options = useMemo(() => {\r\n    return groups.map((group: IGroup) => {\r\n      return {\r\n        value: group.groupId,\r\n        label: group.name,\r\n      };\r\n    });\r\n  }, [groups]);\r\n\r\n  const defaultGroup = useMemo(() => {\r\n    if (type === 'edit') {\r\n      if (userInfo && !!userInfo?.groups?.length) {\r\n        return userInfo?.groups?.map((item: IGroup) => {\r\n          return {\r\n            value: item.groupId,\r\n            label: item.name,\r\n          };\r\n        });\r\n      }\r\n      return [];\r\n    }\r\n    return [];\r\n  }, [userInfo, type]);\r\n\r\n  const _renderGroupButtonSubmit = () => {\r\n    return (\r\n      <Flex justifyContent=\"space-between\" width=\"100%\">\r\n        <Link to=\"/admins\">\r\n          <AppButton variant=\"outline\">Back</AppButton>\r\n        </Link>\r\n\r\n        <AppButton\r\n          isDisabled={isDisabledSubmit}\r\n          onClick={onSubmit}\r\n          isLoading={isLoading}\r\n        >\r\n          Save\r\n        </AppButton>\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const _renderDescriptionCreateUser = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"title\">Create Account</div>\r\n        <div className=\"description\">Here you can create an user account.</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const _renderDescriptionEditUser = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"title\">Account Settings</div>\r\n        <div className=\"description\">\r\n          Here you can change user account information\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card className=\"user-detail\" padding=\"30px\">\r\n      {type === 'edit'\r\n        ? _renderDescriptionEditUser()\r\n        : _renderDescriptionCreateUser()}\r\n      <Flex flexWrap={'wrap'} marginX={-4} pb={4}>\r\n        <Box width={['100%', '50%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">Full Name</Text>\r\n            <AppInput\r\n              variant={'main'}\r\n              placeholder=\"John\"\r\n              value={dataForm.fullName}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  fullName: e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'fullName',\r\n                validator: validator.current,\r\n                rule: 'max:100',\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '50%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">\r\n              User Address{' '}\r\n              <Text as={'span'} color={'red.500'}>\r\n                *\r\n              </Text>\r\n            </Text>\r\n            <AppInput\r\n              variant={'main'}\r\n              placeholder=\"0x123..\"\r\n              value={dataForm.userAddress}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  userAddress: e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'User Address',\r\n                validator: validator.current,\r\n                rule: 'required|isAddress',\r\n              }}\r\n              isDisabled={type === 'edit'}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '50%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">Email</Text>\r\n            <AppInput\r\n              variant={'main'}\r\n              placeholder=\"mail@simmmple.com\"\r\n              value={dataForm.email}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  email: e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'email',\r\n                validator: validator.current,\r\n                rule: 'email|max:100',\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '50%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">Groups</Text>\r\n            <Select\r\n              defaultValue={defaultGroup}\r\n              onChange={(selectedOption: any) => {\r\n                const groupSelected = selectedOption.map(\r\n                  (item: any) => item.value,\r\n                );\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  groupIds: groupSelected,\r\n                });\r\n              }}\r\n              // @ts-ignore\r\n              options={options}\r\n              isMulti\r\n              classNamePrefix=\"select-app\"\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">Note</Text>\r\n            <AppTextarea\r\n              placeholder=\"Tell something about yourself in 150 characters!\"\r\n              value={dataForm.description}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  description: e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'description',\r\n                validator: validator.current,\r\n                rule: 'max:200',\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <div className=\"btn-submit\">{_renderGroupButtonSubmit()}</div>\r\n      </Flex>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FormAdmin;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\Settings\\groups\\part\\GroupForm.tsx",["1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196"],"import Card from 'src/components/Card';\r\nimport 'src/styles/pages/UserDetail.scss';\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Stack,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Checkbox,\r\n} from '@chakra-ui/react';\r\nimport AppInput from 'src/components/AppInput';\r\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport AppTextarea from 'src/components/AppTextarea';\r\nimport AppButton from 'src/components/AppButton';\r\nimport rf from 'src/requests/RequestFactory';\r\nimport { Link } from 'react-router-dom';\r\nimport { isMobile } from 'react-device-detect';\r\nimport AppSearch from 'src/components/AppSearch';\r\nimport AppDataTable from 'src/components/AppDataTable';\r\nimport { createValidator } from 'src/utils/utils-validator';\r\n\r\ninterface IGroupForm {\r\n  type: string;\r\n  groupInfo?: any;\r\n  onSubmitForm: (data: any) => void;\r\n  isLoading: boolean;\r\n}\r\n\r\ninterface IDefaultGroupInfo {\r\n  name: string;\r\n  description: string;\r\n  roleIds: string[];\r\n  listUserAddress: string[];\r\n}\r\n\r\nconst GroupForm = ({\r\n  type,\r\n  groupInfo,\r\n  onSubmitForm,\r\n  isLoading,\r\n}: IGroupForm) => {\r\n  const [searchUser, setSearchUser] = useState<string>('');\r\n  const [searchRole, setSearchRole] = useState<string>('');\r\n  const [userSelected, setUserSelected] = useState<string[]>([]);\r\n  const [roleSelected, setRoleSelected] = useState<string[]>([]);\r\n  const [isDisableSubmit, setDisableSubmit] = useState<boolean>(true);\r\n\r\n  const initGroupInfoState: IDefaultGroupInfo = {\r\n    name: groupInfo?.name || '',\r\n    description: groupInfo?.description || '',\r\n    roleIds: groupInfo?.roleIds || [],\r\n    listUserAddress: userSelected || [],\r\n  };\r\n\r\n  const [dataForm, setDataForm] = useState(initGroupInfoState);\r\n\r\n  const onSubmit = async () => {\r\n    onSubmitForm(dataForm);\r\n  };\r\n\r\n  const getUsersOfGroup = async () => {\r\n    const data = await rf\r\n      .getRequest('AdminRequest')\r\n      .getUsersOfGroupById(groupInfo.groupId, {\r\n        limit: 1000,\r\n        page: 1,\r\n      });\r\n    if (data && data.totalDocs > 0) {\r\n      const initUserSelected = data.docs.map((user: any) => user.userAddress);\r\n      setUserSelected(initUserSelected);\r\n    }\r\n  };\r\n\r\n  const validator = useRef(\r\n    createValidator({\r\n      element: (message: string) => <Text color={'red.500'}>{message}</Text>,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    setDataForm({\r\n      ...dataForm,\r\n      roleIds: roleSelected,\r\n      listUserAddress: userSelected,\r\n    });\r\n  }, [roleSelected, userSelected]);\r\n\r\n  useEffect(() => {\r\n    if (groupInfo && groupInfo.groupId) {\r\n      getUsersOfGroup();\r\n      setRoleSelected(groupInfo.roleIds);\r\n    }\r\n  }, [groupInfo]);\r\n\r\n  useEffect(() => {\r\n    setDisableSubmit(!validator.current.allValid());\r\n  }, [dataForm.name, dataForm.description]);\r\n\r\n  const _renderGroupButtonSubmit = () => {\r\n    return (\r\n      <Flex justifyContent=\"space-between\" width=\"100%\">\r\n        <Link to=\"/groups\">\r\n          <AppButton variant=\"outline\">Back</AppButton>\r\n        </Link>\r\n\r\n        <AppButton\r\n          mr={5}\r\n          onClick={onSubmit}\r\n          isLoading={isLoading}\r\n          disabled={isDisableSubmit}\r\n        >\r\n          Save\r\n        </AppButton>\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const _renderDescriptionCreateGroup = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"title\">Create Group</div>\r\n        <div className=\"description\">Here you can create a group.</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const _renderDescriptionEditGroup = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"title\">Group Settings</div>\r\n        <div className=\"description\">Here you can change group information</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const requestParamsUser = useMemo(() => {\r\n    return {\r\n      userAddress: searchUser,\r\n    };\r\n  }, [searchUser]);\r\n\r\n  const _renderListUser = () => {\r\n    const getUser = async (payload?: any) => {\r\n      const data = await rf.getRequest('AdminRequest').getUsers(payload);\r\n      return { ...data, docs: data.docs };\r\n    };\r\n\r\n    const _renderBodyTableUser = (dataTable: any) => {\r\n      return (\r\n        <Tbody>\r\n          {dataTable.map((user: any, index: number) => {\r\n            return (\r\n              <Tr key={index}>\r\n                <Td>\r\n                  <Checkbox\r\n                    isChecked={userSelected.some(\r\n                      (item: string) => item === user.userAddress,\r\n                    )}\r\n                    value={user.userAddress}\r\n                    onChange={(e) => {\r\n                      if (e.target.checked) {\r\n                        setUserSelected([...userSelected, user.userAddress]);\r\n                        return;\r\n                      }\r\n                      setUserSelected(\r\n                        userSelected.filter(\r\n                          (item: string) => item !== user.userAddress,\r\n                        ),\r\n                      );\r\n                    }}\r\n                  />\r\n                </Td>\r\n                <Td>{user.userAddress}</Td>\r\n                <Td>{user.email || 'N/A'}</Td>\r\n              </Tr>\r\n            );\r\n          })}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTableUser = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th />\r\n            <Th>User Address</Th>\r\n            <Th>User Email</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Flex\r\n          my={'20px'}\r\n          justifyContent=\"space-between\"\r\n          flexDirection={isMobile ? 'column' : 'row'}\r\n        >\r\n          <Box width={isMobile ? '100%' : '300px'}>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: any) => setSearchUser(e.target.value)}\r\n            />\r\n          </Box>\r\n\r\n          <Flex mt={isMobile ? '5' : 0}>\r\n            <Text fontWeight=\"700\" mr={1}>\r\n              {userSelected.length}\r\n            </Text>\r\n            users selected\r\n          </Flex>\r\n        </Flex>\r\n        <AppDataTable\r\n          // @ts-ignore\r\n          requestParams={requestParamsUser}\r\n          limit={10}\r\n          renderHeader={_renderHeaderTableUser}\r\n          renderBody={_renderBodyTableUser}\r\n          fetchData={getUser}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const requestParamsGroups = useMemo(() => {\r\n    return {\r\n      name: searchRole,\r\n    };\r\n  }, [searchRole]);\r\n\r\n  const _renderListRole = () => {\r\n    const getRoles = async (payload?: any) => {\r\n      const data = await rf.getRequest('AdminRequest').getRoles(payload);\r\n      return { ...data, docs: data.docs };\r\n    };\r\n\r\n    const _renderBodyTableRoles = (dataTable: any) => {\r\n      return (\r\n        <Tbody>\r\n          {dataTable.map((role: any, index: number) => {\r\n            return (\r\n              <Tr key={index}>\r\n                <Td>\r\n                  <Checkbox\r\n                    isChecked={roleSelected.some(\r\n                      (item: string) => item === role.roleId,\r\n                    )}\r\n                    value={role.roleId}\r\n                    onChange={(e) => {\r\n                      if (e.target.checked) {\r\n                        setRoleSelected([...roleSelected, role.roleId]);\r\n                        return;\r\n                      }\r\n                      setRoleSelected(\r\n                        roleSelected.filter(\r\n                          (item: string) => item !== role.roleId,\r\n                        ),\r\n                      );\r\n                    }}\r\n                  />\r\n                </Td>\r\n                <Td>{role.name}</Td>\r\n                <Td>{role.description}</Td>\r\n              </Tr>\r\n            );\r\n          })}\r\n        </Tbody>\r\n      );\r\n    };\r\n\r\n    const _renderHeaderTableRoles = () => {\r\n      return (\r\n        <Thead>\r\n          <Tr>\r\n            <Th />\r\n            <Th>Name</Th>\r\n            <Th>Description</Th>\r\n          </Tr>\r\n        </Thead>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <Flex\r\n          my={'20px'}\r\n          justifyContent=\"space-between\"\r\n          flexDirection={isMobile ? 'column' : 'row'}\r\n        >\r\n          <Box width={isMobile ? '100%' : '300px'}>\r\n            <AppSearch\r\n              placeholder=\"Search\"\r\n              handleChange={(e: any) => setSearchRole(e.target.value)}\r\n            />\r\n          </Box>\r\n\r\n          <Flex mt={isMobile ? '5' : 0}>\r\n            <Text fontWeight=\"700\" mr={1}>\r\n              {roleSelected.length}\r\n            </Text>\r\n            roles selected\r\n          </Flex>\r\n        </Flex>\r\n        <AppDataTable\r\n          requestParams={requestParamsGroups}\r\n          limit={10}\r\n          renderHeader={_renderHeaderTableRoles}\r\n          renderBody={_renderBodyTableRoles}\r\n          fetchData={getRoles}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card className=\"user-detail\" padding=\"30px\">\r\n      {type === 'edit'\r\n        ? _renderDescriptionEditGroup()\r\n        : _renderDescriptionCreateGroup()}\r\n      <Flex flexWrap={'wrap'} marginX={-4} pb={4}>\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">\r\n              Name\r\n              <Text as={'span'} color={'red.500'}>\r\n                *\r\n              </Text>\r\n            </Text>\r\n\r\n            <AppInput\r\n              variant={'main'}\r\n              placeholder=\"John\"\r\n              value={dataForm.name}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  name: e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'nameGroup',\r\n                validator: validator.current,\r\n                rule: ['required', `max:${100}`],\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\" mb={5}>\r\n              Select Users\r\n            </Text>\r\n            {_renderListUser()}\r\n          </Stack>\r\n        </Box>\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\" mb={5}>\r\n              Select Roles\r\n            </Text>\r\n            {_renderListRole()}\r\n          </Stack>\r\n        </Box>\r\n\r\n        <Box width={['100%', '100%']} px={4} mb={4}>\r\n          <Stack spacing={'1'} w={'full'}>\r\n            <Text fontWeight=\"600\">\r\n              Description\r\n              <Text as={'span'} color={'red.500'}>\r\n                *\r\n              </Text>\r\n            </Text>\r\n            <AppTextarea\r\n              placeholder=\"Write something about this group in 200 characters!\"\r\n              value={dataForm.description}\r\n              onChange={(e) =>\r\n                setDataForm({\r\n                  ...dataForm,\r\n                  description: e.target.value,\r\n                })\r\n              }\r\n              validate={{\r\n                name: 'description',\r\n                validator: validator.current,\r\n                rule: ['required', `max:${200}`],\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <div className=\"btn-submit\">{_renderGroupButtonSubmit()}</div>\r\n      </Flex>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default GroupForm;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreatePoolIDO\\part\\ViewDetailPoolIDO.tsx",["1197","1198","1199","1200","1201"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\INOPoolItem.tsx",["1202","1203"],"import { Box, Flex, Image, Td, Tooltip, Tr } from '@chakra-ui/react';\r\nimport BigNumber from 'bignumber.js';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { ShowMoreIcon } from 'src/assets/icons';\r\nimport { INOPool } from 'src/utils/pool';\r\nimport { INOTimeline, WhitelistPhaseType } from 'src/utils/timelines';\r\nimport { inoPoolContract } from 'src/utils/utils-contract';\r\nimport {\r\n  convertWeiToDec,\r\n  formatNumber,\r\n  formatTimestamp,\r\n} from 'src/utils/utils-formats';\r\nimport { getNetworkProvider } from 'src/utils/utils-network';\r\nimport { getIDOPhaseClassName, PHASES } from 'src/utils/utils-pools';\r\n\r\ninterface IINOPool {\r\n  pool: any;\r\n  userInfo: any;\r\n}\r\nconst TIME_FORMAT = 'HH:mm - YYYY/MM/DD';\r\nconst INOPoolItem: React.FC<IINOPool> = ({ pool, userInfo }) => {\r\n  const [isCollapse, setIsCollapse] = useState(true);\r\n  const timeline = useMemo(() => new INOTimeline(pool), [pool]);\r\n  const [userInvest, setUserInvest] = useState<string | BigNumber>('0');\r\n  const inoPool = useMemo(() => new INOPool(pool), [pool]);\r\n  const whitelistPhase: WhitelistPhaseType = timeline.getWhitelistPhase();\r\n  const { startTime: swapStartTime, endTime: swapEndTime } =\r\n    timeline.getSwapTime();\r\n  //   console.log('userInfo', userInfo);\r\n\r\n  const getUserInvest = async (contractAddress: string, network: string) => {\r\n    if (inoPool.isNetworkSolana()) {\r\n      //\r\n    } else {\r\n      const networkProvider = getNetworkProvider(network);\r\n      const contract = inoPoolContract(contractAddress, networkProvider);\r\n      const result = await contract.userInvested(userInfo.userAddress);\r\n      setUserInvest(result.toString());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (inoPool.getContractAddress() && userInfo?.userAddress) {\r\n      getUserInvest(inoPool.getContractAddress(), inoPool.getNetwork());\r\n    }\r\n  }, [userInfo?.userAddress, inoPool.getContractAddress()]);\r\n\r\n  return (\r\n    <Tr className=\"INOpool\">\r\n      {/**pool name */}\r\n      <Td>\r\n        {' '}\r\n        <Flex\r\n          alignItems={'start'}\r\n          paddingTop={isCollapse ? '0' : '8px'}\r\n          height={isCollapse ? 'auto' : '110px'}\r\n        >\r\n          <Flex alignItems=\"center\">\r\n            <div>\r\n              <Image\r\n                src={pool?.featureImageUrl}\r\n                alt=\"imageUser\"\r\n                boxSize={'24px'}\r\n                borderRadius={'full'}\r\n                marginRight={'8px'}\r\n              />\r\n            </div>\r\n            {pool?.name?.toString().length <= 20 ? (\r\n              <div>{pool?.name?.toString()}</div>\r\n            ) : (\r\n              <Tooltip label={pool?.name}>\r\n                {pool?.name?.toString().substring(0, 20)}\r\n              </Tooltip>\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      </Td>\r\n      <Td width={'50%'}>\r\n        <Flex alignItems={'start'} flexDirection=\"column\">\r\n          <div className=\"pool-step\">\r\n            <div\r\n              className={`step ${getIDOPhaseClassName(\r\n                timeline,\r\n                PHASES.WHITE_LIST,\r\n              )}`}\r\n            ></div>\r\n            <div\r\n              className={`step ${getIDOPhaseClassName(\r\n                timeline,\r\n                PHASES.TOKEN_SALE,\r\n              )}`}\r\n            >\r\n              {' '}\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={`progressPool ${isCollapse ? 'hiddenTime' : 'showTime'}`}\r\n          >\r\n            <div className=\"time-step\">\r\n              <div className={'content-step'}>\r\n                {timeline.beforeWhitelistPhase() ? (\r\n                  <>\r\n                    Start in\r\n                    <div>\r\n                      {formatTimestamp(whitelistPhase.startTime, TIME_FORMAT)}\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    End in\r\n                    <div>\r\n                      {formatTimestamp(whitelistPhase.endTime, TIME_FORMAT)}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n              <div className=\"content-step\">\r\n                {timeline.isSwapPhase() || timeline.afterSwapPhase() ? (\r\n                  <>\r\n                    End in\r\n                    <div>{formatTimestamp(swapEndTime, TIME_FORMAT)}</div>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    Start in\r\n                    <div>{formatTimestamp(swapStartTime, TIME_FORMAT)}</div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Flex>\r\n      </Td>\r\n      <Td>\r\n        <Flex height={isCollapse ? 'auto' : '90px'}>\r\n          {formatNumber(\r\n            convertWeiToDec(\r\n              userInvest,\r\n              inoPool.getCollateralCurrencyDecimals(),\r\n            ),\r\n          )}{' '}\r\n          {Number(userInvest) > 0 && inoPool.getCollateralCurrencySymbol()}\r\n        </Flex>\r\n      </Td>\r\n      <Td>\r\n        <Box\r\n          height={isCollapse ? 'auto' : '94px'}\r\n          onClick={() => setIsCollapse(!isCollapse)}\r\n        >\r\n          <ShowMoreIcon\r\n            className={`showMoreIcon ${isCollapse ? 'collapse' : 'showDetail'}`}\r\n          />\r\n        </Box>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n};\r\n\r\nexport default INOPoolItem;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\IDOPoolItem.tsx",["1204","1205","1206","1207"],"import { Box, Flex, Image, Td, Tooltip, Tr } from '@chakra-ui/react';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport BigNumber from 'bignumber.js';\r\nimport moment from 'moment';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport abi from 'src/abi';\r\nimport { ShowMoreIcon } from 'src/assets/icons';\r\nimport config from 'src/config';\r\nimport { IUserProfileResponse } from 'src/utils/common';\r\nimport { IDOPool } from 'src/utils/pool';\r\nimport PreSalePool from 'src/utils/preSalePool';\r\nimport {\r\n  ClaimPhaseType,\r\n  IdoTimeline,\r\n  WhitelistPhaseType,\r\n} from 'src/utils/timelines';\r\nimport { AuthUser } from 'src/utils/user';\r\nimport {\r\n  convertWeiToDec,\r\n  formatNumber,\r\n  formatTimestamp,\r\n} from 'src/utils/utils-formats';\r\nimport { multicall } from 'src/utils/utils-multicall';\r\nimport {\r\n  getIDOPhaseClassName,\r\n  PHASES,\r\n  _getPreSalePoolProgram,\r\n} from 'src/utils/utils-pools';\r\n\r\ninterface IPoolItem {\r\n  pool: any;\r\n  userInfo: IUserProfileResponse | undefined;\r\n}\r\n\r\nconst PoolItem: React.FC<IPoolItem> = ({ pool, userInfo }) => {\r\n  const [isCollapse, setIsCollapse] = useState(true);\r\n  const [dataPool, setDataPool] = useState<any>();\r\n  const timeline = useMemo(() => new IdoTimeline(pool), [pool]);\r\n\r\n  const { startTime: swapStartTime, endTime: swapEndTime } =\r\n    timeline.getSwapTime();\r\n\r\n  const claimPhase: ClaimPhaseType = timeline.getClaimPhase();\r\n\r\n  const whitelistPhase: WhitelistPhaseType = timeline.getWhitelistPhase();\r\n\r\n  const idoPool = new IDOPool(pool);\r\n  const userAuth = useMemo(\r\n    () => new AuthUser(userInfo?.userAddress ?? ''),\r\n    [userInfo],\r\n  );\r\n\r\n  const claimSchedules = idoPool.getClaimSchedules();\r\n  const getDataPool = useCallback(async () => {\r\n    if (idoPool && userInfo) {\r\n      if (idoPool.isNetworkSolana()) {\r\n        const solanaNetworkFamily =\r\n          config.networks[idoPool.getNetwork()].networkFamily || '';\r\n        const linkSolanaAccount = userInfo?.linkedAccounts?.find(\r\n          (account: any, index: number) => {\r\n            return (\r\n              account?.networkFamily === solanaNetworkFamily &&\r\n              account?.userAddress === userInfo.userAddress\r\n            );\r\n          },\r\n        );\r\n\r\n        if (!linkSolanaAccount?.networkAddress) {\r\n          setDataPool({\r\n            claimedToken: '0',\r\n            purchasedToken: '0',\r\n            remainingToken: '0',\r\n          });\r\n          return;\r\n        } else {\r\n          const program = _getPreSalePoolProgram(idoPool, userAuth);\r\n\r\n          const wrapper = new PreSalePool(program);\r\n          if (!idoPool.getContractAddress()) {\r\n            setDataPool({\r\n              claimedToken: '0',\r\n              purchasedToken: '0',\r\n              remainingToken: '0',\r\n            });\r\n            return;\r\n          }\r\n          const [memberAddress] = await wrapper.getUserAccount(\r\n            new PublicKey(idoPool.getContractAddress()),\r\n            new PublicKey(linkSolanaAccount?.networkAddress),\r\n          );\r\n          if (!memberAddress) {\r\n            setDataPool({\r\n              claimedToken: '0',\r\n              purchasedToken: '0',\r\n              remainingToken: '0',\r\n            });\r\n            return;\r\n          }\r\n\r\n          // console.log(\r\n          //   'idoPool.getContractAddress()',\r\n          //   idoPool.getContractAddress(),\r\n          // );\r\n          // console.log('memberAddress', memberAddress.toString());\r\n\r\n          const poolMember = await program.account.userAccount.fetchNullable(\r\n            memberAddress,\r\n          );\r\n          if (!poolMember) {\r\n            setDataPool({\r\n              claimedToken: '0',\r\n              purchasedToken: '0',\r\n              remainingToken: '0',\r\n            });\r\n            return;\r\n          } else {\r\n            const remainingToken = new BigNumber(\r\n              poolMember.purchased.toString(),\r\n            )\r\n              .minus(poolMember.claimed.toString())\r\n              .toString();\r\n            setDataPool({\r\n              claimedToken: poolMember.claimed.toString(),\r\n              purchasedToken: poolMember.purchased.toString(),\r\n              remainingToken: remainingToken,\r\n            });\r\n            return;\r\n          }\r\n        }\r\n      } else {\r\n        if (idoPool.getContractAddress()) {\r\n          const calls = [\r\n            {\r\n              address: idoPool.getContractAddress(),\r\n              name: 'userPurchased',\r\n              params: [userInfo.userAddress],\r\n            },\r\n            {\r\n              address: idoPool.getContractAddress(),\r\n              name: 'userClaimed',\r\n              params: [userInfo.userAddress],\r\n            },\r\n          ];\r\n          const [purchasedToken, claimedToken] = await multicall(\r\n            abi['PreSalePool'],\r\n            calls,\r\n            idoPool.getNetwork(),\r\n          );\r\n          const remainingToken = new BigNumber(purchasedToken.toString())\r\n            .minus(claimedToken.toString())\r\n            .toString();\r\n          // console.log('purchasedToken', purchasedToken.toString());\r\n          // console.log('claimedToken', claimedToken.toString());\r\n          // console.log('remainingToken', remainingToken.toString());\r\n          setDataPool({\r\n            claimedToken: claimedToken.toString(),\r\n            purchasedToken: purchasedToken.toString(),\r\n            remainingToken: remainingToken.toString(),\r\n          });\r\n          return;\r\n        } else {\r\n          setDataPool({\r\n            claimedToken: '0',\r\n            purchasedToken: '0',\r\n            remainingToken: '0',\r\n          });\r\n          return;\r\n        }\r\n\r\n        // }\r\n      }\r\n    }\r\n  }, [pool, userInfo]);\r\n\r\n  const isClaimDone = useMemo(() => {\r\n    return (\r\n      +dataPool?.claimedToken > 0 &&\r\n      +dataPool?.claimedToken === +dataPool?.purchasedToken\r\n    );\r\n  }, [claimSchedules, dataPool?.claimedToken, dataPool?.purchasedToken]);\r\n\r\n  const getTimeNextClaimPhase = useMemo(() => {\r\n    let nextTime = 0;\r\n    const currentTime = moment().unix();\r\n    for (let index = 0; index < claimSchedules.length; index++) {\r\n      if (index === claimSchedules.length - 1) {\r\n        nextTime = claimSchedules[claimSchedules.length - 1].startTime;\r\n        break;\r\n      } else {\r\n        if (\r\n          claimSchedules[index].startTime <= currentTime &&\r\n          currentTime < claimSchedules[index + 1].startTime\r\n        ) {\r\n          nextTime = claimSchedules[index + 1].startTime;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return Number(nextTime) * 1000;\r\n  }, [claimSchedules]);\r\n\r\n  const isAfterLastClaimPhase = useMemo(() => {\r\n    const currentTime = moment().unix();\r\n    return currentTime > claimSchedules[claimSchedules.length - 2].startTime;\r\n  }, [claimSchedules]);\r\n\r\n  const calcInvestAmount = () => {\r\n    return new BigNumber(\r\n      convertWeiToDec(dataPool?.purchasedToken, idoPool.getSwapTokenDecimals()),\r\n    )\r\n      .multipliedBy(idoPool.getSwapRate())\r\n      .toString();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDataPool();\r\n  }, [pool, userInfo]);\r\n  // console.log('pool', pool);\r\n\r\n  return (\r\n    <Tr className=\"IDOpool\">\r\n      <Td>\r\n        <Flex\r\n          alignItems={'start'}\r\n          height={isCollapse ? 'auto' : '100px'}\r\n          paddingTop={isCollapse ? '0' : '8px'}\r\n        >\r\n          <Flex alignItems=\"center\">\r\n            <div>\r\n              <Image\r\n                src={pool?.idoDetails?.token?.logoUrl}\r\n                alt=\"imageUser\"\r\n                boxSize={'24px'}\r\n                borderRadius={'full'}\r\n                marginRight={'8px'}\r\n              />\r\n            </div>\r\n            {pool?.name?.toString().length <= 20 ? (\r\n              <div>{pool?.name?.toString()}</div>\r\n            ) : (\r\n              <Tooltip label={pool?.name}>\r\n                {pool?.name?.toString().substring(0, 20)}\r\n              </Tooltip>\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      </Td>\r\n      <Td width={'60%'}>\r\n        <Flex\r\n          alignItems={'start'}\r\n          flexDirection=\"column\"\r\n          height={isCollapse ? 'auto' : '100px'}\r\n        >\r\n          <div className={'pool-step'}>\r\n            <div\r\n              className={`step ${getIDOPhaseClassName(\r\n                timeline,\r\n                PHASES.WHITE_LIST,\r\n              )}`}\r\n            ></div>\r\n            <div\r\n              className={`step ${getIDOPhaseClassName(\r\n                timeline,\r\n                PHASES.TOKEN_SALE,\r\n              )}`}\r\n            ></div>\r\n            <div\r\n              className={`step ${getIDOPhaseClassName(timeline, PHASES.CLAIM)}`}\r\n            ></div>\r\n          </div>\r\n          <div\r\n            className={`progressPool ${isCollapse ? 'hiddenTime' : 'showTime'}`}\r\n          >\r\n            <div className=\"whitelistTime\">\r\n              {timeline.beforeWhitelistPhase() ? (\r\n                <>\r\n                  <div>Start in</div>\r\n                  <div>\r\n                    {formatTimestamp(\r\n                      whitelistPhase.startTime,\r\n                      'HH:mm - YYYY/MM/DD',\r\n                    )}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  End in\r\n                  <div>\r\n                    {formatTimestamp(\r\n                      whitelistPhase.endTime,\r\n                      'HH:mm - YYYY/MM/DD',\r\n                    )}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"swapTime\">\r\n              {timeline.isSwapPhase() || timeline.afterSwapPhase() ? (\r\n                <>\r\n                  End in\r\n                  <div>\r\n                    {formatTimestamp(swapEndTime, 'HH:mm - YYYY/MM/DD')}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  Start in\r\n                  <div>\r\n                    {formatTimestamp(swapStartTime, 'HH:mm - YYYY/MM/DD')}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"Claim\">\r\n              {isClaimDone ? (\r\n                <div style={{ textAlign: 'center' }}>\r\n                  You claimed <br />\r\n                  all tokens!\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  {timeline.hasVestingSchedule() ? (\r\n                    <>\r\n                      {isAfterLastClaimPhase ? (\r\n                        <div style={{ textAlign: 'center' }}>\r\n                          You can claim the rest in\r\n                        </div>\r\n                      ) : (\r\n                        'Next Claim in'\r\n                      )}\r\n                      <div>\r\n                        {formatTimestamp(\r\n                          getTimeNextClaimPhase,\r\n                          'HH:mm - YYYY/MM/DD',\r\n                        )}\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      Start in\r\n                      <div>\r\n                        {formatTimestamp(\r\n                          claimPhase.startTime,\r\n                          'HH:mm - YYYY/MM/DD',\r\n                        )}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Flex>\r\n      </Td>\r\n      <Td>\r\n        <Flex\r\n          height={isCollapse ? 'auto' : '100px'}\r\n          paddingTop={isCollapse ? '0' : '10px'}\r\n          alignItems={'start'}\r\n        >\r\n          <div className={`value-invest`}>\r\n            {formatNumber(calcInvestAmount())}{' '}\r\n            {Number(dataPool?.purchasedToken) > 0 &&\r\n              idoPool.getCollateralCurrencySymbol()}\r\n          </div>\r\n        </Flex>\r\n      </Td>\r\n      <Td>\r\n        <Box\r\n          height={isCollapse ? 'auto' : '80px'}\r\n          onClick={() => setIsCollapse(!isCollapse)}\r\n        >\r\n          <ShowMoreIcon\r\n            className={`showMoreIcon ${isCollapse ? 'collapse' : 'showDetail'}`}\r\n          />\r\n        </Box>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n};\r\n\r\nexport default PoolItem;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageUserDetail\\parts\\AuctionItem.tsx",["1208"],"import { Box, Flex, Image, Td, Tr } from '@chakra-ui/react';\r\nimport BigNumber from 'bignumber.js';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { UnverifiedIcon, VerifiedIcon } from 'src/assets/icons';\r\nimport { RootState } from 'src/store';\r\nimport { Auction } from 'src/utils/auction';\r\nimport {\r\n  getCurrentBalances,\r\n  getInfoJoinExitPool,\r\n} from 'src/utils/utils-auction';\r\nimport { convertWeiToDec, formatNumber } from 'src/utils/utils-formats';\r\nimport { getNetworkConfigs } from 'src/utils/utils-network';\r\nimport { getSymbolBaseToken, getToken } from 'src/utils/utils-token';\r\n\r\nconst AuctionItem: React.FC<any> = ({ auction }) => {\r\n  const lbpAuction = useMemo(() => new Auction(auction), [auction]);\r\n\r\n  const poolNetwork = lbpAuction.getNetwork();\r\n  const pool = lbpAuction.getPool();\r\n  const tokenMain = lbpAuction.getTokenMain();\r\n  let tokenBase = lbpAuction.getTokenBase();\r\n  const indexTokenBase = lbpAuction.getTokenBaseIndex();\r\n  const indexTokenMain = lbpAuction.getTokenMainIndex();\r\n\r\n  const { tokensUsdPrice } = useSelector((state: RootState) => state.metadata);\r\n\r\n  const networks = getNetworkConfigs();\r\n  const network = networks.find((item) => item.id === poolNetwork);\r\n  tokenBase = getToken(poolNetwork, tokenBase?.address);\r\n  //   console.log('lbpAuciton', lbpAuction);\r\n\r\n  const [balanceCurrent, setBalanceCurrent] = useState<string[]>([]);\r\n  const [balanceStart, setBalanceStart] = useState<string[]>([]);\r\n  const [balanceExit, setBalanceExit] = useState<string[]>([]);\r\n  const [isExitPool, setIsExitPool] = useState<boolean>(false);\r\n\r\n  const isPoolEnd = useMemo(\r\n    () =>\r\n      tokensUsdPrice[getSymbolBaseToken(tokenBase.symbol.toLowerCase())] *\r\n        Number(balanceCurrent[indexTokenBase]) <\r\n      1,\r\n    [tokensUsdPrice, balanceCurrent, indexTokenBase, tokenBase],\r\n  );\r\n\r\n  const baseTokenAccrued = useMemo(() => {\r\n    // console.log('isExitPool', isExitPool);\r\n    // console.log('isPoolEnd', isPoolEnd);\r\n    if (isExitPool) {\r\n      return +balanceExit[indexTokenBase] - +balanceStart[indexTokenBase];\r\n    }\r\n\r\n    if (!isExitPool && isPoolEnd) {\r\n      return 0;\r\n    }\r\n\r\n    return +balanceCurrent[indexTokenBase] - +balanceStart[indexTokenBase];\r\n  }, [balanceStart, balanceCurrent, isExitPool, balanceExit, isPoolEnd]);\r\n\r\n  const getInfoExitPool = async () => {\r\n    //   console.log('dataExitPool', auction);\r\n    const dataExitPool = await getInfoJoinExitPool(auction);\r\n    // console.log('dataExitPool', dataExitPool);\r\n    if (dataExitPool) {\r\n      setBalanceStart(dataExitPool.balanceStart);\r\n      setIsExitPool(dataExitPool.isExit);\r\n      setBalanceExit(dataExitPool.balanceExit);\r\n    }\r\n  };\r\n\r\n  const getBalancesCurrentPool = async () => {\r\n    const balances = await getCurrentBalances(\r\n      pool?.onchainId || '',\r\n      poolNetwork,\r\n      pool?.vault?.address || '',\r\n    );\r\n\r\n    const balanceBaseToken = convertWeiToDec(\r\n      balances[indexTokenBase],\r\n      tokenBase?.decimals,\r\n    );\r\n    const balanceMainToken = convertWeiToDec(\r\n      balances[indexTokenMain],\r\n      tokenMain?.decimals,\r\n    );\r\n\r\n    const balanceTokens = [];\r\n    balanceTokens[indexTokenBase] = balanceBaseToken;\r\n    balanceTokens[indexTokenMain] = balanceMainToken;\r\n    setBalanceCurrent([...balanceTokens]);\r\n  };\r\n\r\n  const mainTokenReleased = useMemo(() => {\r\n    if (isExitPool) {\r\n      return +balanceStart[indexTokenMain] - +balanceExit[indexTokenMain];\r\n    }\r\n\r\n    if (!isExitPool && isPoolEnd) {\r\n      return 0;\r\n    }\r\n    return +balanceStart[indexTokenMain] - +balanceCurrent[indexTokenMain];\r\n  }, [balanceCurrent, balanceStart, isExitPool, balanceExit, isPoolEnd]);\r\n\r\n  const percentMainTokensReleased = useMemo(() => {\r\n    if (+mainTokenReleased < 0 || !mainTokenReleased) {\r\n      return 0;\r\n    }\r\n\r\n    return new BigNumber(+mainTokenReleased)\r\n      .dividedBy(+balanceStart[indexTokenMain])\r\n      .multipliedBy(100)\r\n      .toFixed(2);\r\n  }, [mainTokenReleased, balanceStart, indexTokenMain]);\r\n\r\n  useEffect(() => {\r\n    getBalancesCurrentPool();\r\n    getInfoExitPool();\r\n  }, []);\r\n  return (\r\n    <Tr>\r\n      <Td>\r\n        <Flex alignItems={'center'} gap={'8px'}>\r\n          <Image\r\n            src={auction.logoUrl}\r\n            alt=\"logo\"\r\n            boxSize={'24px'}\r\n            borderRadius={'full'}\r\n            // marginRight={'8px'}\r\n          />\r\n          <span>\r\n            {tokenMain.symbol} - {tokenBase.symbol}\r\n          </span>\r\n          {auction.isVerified ? <VerifiedIcon /> : <UnverifiedIcon />}\r\n        </Flex>\r\n      </Td>\r\n      <Td>\r\n        <Flex alignItems={'center'} gap={'8px'}>\r\n          <Image\r\n            src={network?.icon}\r\n            alt=\"logo\"\r\n            boxSize={'24px'}\r\n            borderRadius={'full'}\r\n            // marginRight={'8px'}\r\n          />\r\n          <span>{network?.name}</span>\r\n        </Flex>\r\n      </Td>\r\n      <Td>\r\n        <Box>\r\n          {formatNumber(tokenMain.latestPriceRate || '0')}{' '}\r\n          {tokenMain.latestPriceRate && +tokenMain.latestPriceRate > 0\r\n            ? tokenBase.symbol\r\n            : ''}\r\n        </Box>\r\n      </Td>\r\n      <Td>\r\n        <Flex>{formatNumber(percentMainTokensReleased)}%</Flex>\r\n      </Td>\r\n      <Td>\r\n        <Flex alignItems={'center'} gap={'8px'}>\r\n          <span>{formatNumber(baseTokenAccrued)}</span>\r\n          <Image\r\n            alt=\"logo\"\r\n            boxSize={'24px'}\r\n            borderRadius={'full'}\r\n            src={tokenBase.icon}\r\n          />\r\n        </Flex>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n};\r\n\r\nexport default AuctionItem;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\index.tsx",["1209","1210","1211"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\steps\\StepProjectReview.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\steps\\StepProjectInfo.tsx",["1212","1213","1214"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\steps\\StepProjectDetail.tsx",["1215"],"D:\\buni\\buni-launchpad-adminpage\\src\\pages\\PageCreateProject\\steps\\StepTokenomic.tsx",["1216","1217"],"import {\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport {\r\n  forwardRef,\r\n  Ref,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { AddMoreIcon } from 'src/assets/icons';\r\nimport { MinusMoreIcon } from 'src/assets/icons/MinusMoreIcon';\r\nimport AppButton from 'src/components/AppButton';\r\nimport AppInput from 'src/components/AppInput';\r\nimport Card from 'src/components/Card';\r\nimport BaseModal from 'src/modals/BaseModal';\r\nimport { IScheduleTokenomic, ITokenomic } from 'src/utils/common';\r\nimport {\r\n  ProjectType,\r\n  RefStepCreateProject,\r\n  TokenomicsType,\r\n} from 'src/utils/utils-project';\r\nimport { createValidator } from 'src/utils/utils-validator';\r\n\r\ninterface StepTokenomicProps {\r\n  project: ProjectType;\r\n  goToNext?: () => void;\r\n  goToPrev?: () => void;\r\n}\r\n\r\ninterface TitleHeadingProps {\r\n  title?: string;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst StepTokenomic = forwardRef(\r\n  (props: StepTokenomicProps, ref: Ref<RefStepCreateProject>) => {\r\n    const { project, goToNext, goToPrev } = props;\r\n    const initTokenomic: TokenomicsType = {\r\n      price: 0,\r\n      title: '',\r\n      totalAllocation: 0,\r\n      description: '',\r\n      schedules: {},\r\n    };\r\n\r\n    const [internalProject, setInternalProject] =\r\n      useState<ProjectType>(project);\r\n    const [showModalSchedule, setShowModalSchedule] = useState<boolean>(false);\r\n    const [targetTokenomicIndex, setTargetTokenomicIndex] = useState<number>(0);\r\n\r\n    const [isDisableNextStep, setIsDisableNextStep] = useState<boolean>(true);\r\n\r\n    const validator = useRef(\r\n      createValidator({\r\n        element: (message: string) => <Text color={'red.500'}>{message}</Text>,\r\n      }),\r\n    );\r\n\r\n    useEffect(() => {\r\n      const isDisable = !validator.current.allValid();\r\n      setIsDisableNextStep(isDisable);\r\n    }, [internalProject]);\r\n\r\n    // useEffect(() => {\r\n    //   setInternalTokenomic(tokenomic);\r\n    // }, [tokenomic]);\r\n\r\n    const validate = () => {\r\n      if (isDisableNextStep) throw new Error('Invalid validation');\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      validate,\r\n      project: internalProject,\r\n    }));\r\n\r\n    const onAssignTokenomic = (index: number) => {\r\n      setTargetTokenomicIndex(index);\r\n      setShowModalSchedule(true);\r\n    };\r\n\r\n    const onSetScheduleModal = (\r\n      schedules: IScheduleTokenomic,\r\n      index: number,\r\n    ) => {\r\n      const newTokenomic = internalProject?.info?.tokenomics\r\n        ? internalProject?.info?.tokenomics.map((item, id) =>\r\n            id === index ? { ...item, schedules } : item,\r\n          )\r\n        : [];\r\n      setInternalProject({\r\n        ...internalProject,\r\n        info: { ...internalProject.info, tokenomics: newTokenomic },\r\n      });\r\n    };\r\n\r\n    const _renderTitle = ({ title, onClick }: TitleHeadingProps) => {\r\n      return (\r\n        <Flex alignItems={'center'} marginBottom={4}>\r\n          {title && (\r\n            <Heading as={'h4'} fontSize={'xl'} px={1}>\r\n              {title}\r\n            </Heading>\r\n          )}\r\n          {onClick && (\r\n            <AppButton\r\n              variant=\"no-effects\"\r\n              padding={'2px'}\r\n              marginLeft={2}\r\n              onClick={onClick}\r\n            >\r\n              <AddMoreIcon />\r\n            </AppButton>\r\n          )}\r\n        </Flex>\r\n      );\r\n    };\r\n\r\n    // render modal schedule\r\n    const _renderModalSchedule = (\r\n      tokenomicIndex: number,\r\n      setSchedule: (schedule: IScheduleTokenomic, index: number) => void,\r\n    ) => {\r\n      const currentSchedule =\r\n        internalProject.info.tokenomics[tokenomicIndex]?.schedules || {};\r\n\r\n      const [internalSchedule, setInternalSchedule] =\r\n        useState<IScheduleTokenomic>(currentSchedule);\r\n\r\n      useEffect(() => {\r\n        setInternalSchedule(currentSchedule);\r\n      }, [tokenomicIndex]);\r\n\r\n      const lastSchedule =\r\n        Number(Object.keys(internalSchedule).slice(-1)[0]) + 1 || '0';\r\n\r\n      const initSchedule: IScheduleTokenomic = {\r\n        [lastSchedule.toString()]: 0,\r\n      };\r\n\r\n      const validatorSchedule = useRef(\r\n        createValidator({\r\n          element: (message: string) => (\r\n            <Text color={'red.500'} fontSize={'sm'}>\r\n              {message}\r\n            </Text>\r\n          ),\r\n        }),\r\n      );\r\n      const [isDiableAddSchedule, setIsDiableAddSchedule] =\r\n        useState<boolean>(false);\r\n\r\n      useEffect(() => {\r\n        const isDisable = !validatorSchedule.current.allValid();  \r\n        setIsDiableAddSchedule(isDisable);\r\n      }, [internalSchedule]);\r\n\r\n      const onAddSchedule = () => {\r\n        setSchedule(internalSchedule, tokenomicIndex);\r\n        setShowModalSchedule(false);\r\n      };\r\n\r\n      const _renderButtonMinus = (onClick?: () => void) => {\r\n        return (\r\n          <AppButton variant=\"no-effects\" onClick={onClick}>\r\n            <MinusMoreIcon />\r\n          </AppButton>\r\n        );\r\n      };\r\n\r\n      const minusSchedule = (key: string) => {\r\n        const objSchedule = {};\r\n        let i = 0;\r\n        Object.keys(internalSchedule).forEach((value) => {\r\n          if (value !== key) {\r\n            i++;\r\n            (objSchedule as any)[i] = internalSchedule[value];\r\n          }\r\n        });\r\n        setInternalSchedule(objSchedule);\r\n      };\r\n\r\n      return (\r\n        <BaseModal\r\n          title={'Add Schedules'}\r\n          isOpen={showModalSchedule}\r\n          onClose={() => setShowModalSchedule(false)}\r\n        >\r\n          <Stack>\r\n            {_renderTitle({\r\n              title: 'Schedule',\r\n              onClick: () =>\r\n                setInternalSchedule({ ...internalSchedule, ...initSchedule }),\r\n            })}\r\n\r\n            <Flex alignItems={'center'} marginX={-4} mb={4}>\r\n              <Box px={4}>Month</Box>\r\n              <Box px={4} flexGrow={1}>\r\n                <Text px={4}>Release Amount</Text>\r\n              </Box>\r\n            </Flex>\r\n            {Object.keys(internalSchedule).map((itemSchedule, index) => (\r\n              <Flex key={index} alignItems={'center'} marginX={-4} mb={4}>\r\n                <Box px={4}>Month {index + 1}</Box>\r\n                <Box px={4} flexGrow={1} textAlign={'right'}>\r\n                  <AppInput\r\n                    type={'number'}\r\n                    placeholder=\"amount\"\r\n                    value={internalSchedule[itemSchedule]}\r\n                    onChange={(e) =>\r\n                      setInternalSchedule((prevSchedule) => ({\r\n                        ...prevSchedule,\r\n                        [itemSchedule as string]: +e.target.value,\r\n                      }))\r\n                    }\r\n                    validate={{\r\n                      name: 'Valuation',\r\n                      validator: validatorSchedule.current,\r\n                      rule: [\r\n                        'required',\r\n                        'numeric',\r\n                        'isPositive',\r\n                        `minValue:${0}`,\r\n                        `maxDigits:${8}`,\r\n                      ],\r\n                    }}\r\n                  />\r\n                </Box>\r\n                <Box>\r\n                  {_renderButtonMinus(() => minusSchedule(itemSchedule))}\r\n                </Box>\r\n              </Flex>\r\n            ))}\r\n            <Flex justifyContent={'center'} pt={4}>\r\n              <AppButton disabled={isDiableAddSchedule} onClick={onAddSchedule}>\r\n                Add schedule\r\n              </AppButton>\r\n            </Flex>\r\n          </Stack>\r\n        </BaseModal>\r\n      );\r\n    };\r\n\r\n    const _renderScheduleValue = (schedules: IScheduleTokenomic) => {\r\n      const bg = useColorModeValue('secondaryGray.300', 'navy.900');\r\n      return (\r\n        <Flex w={'full'} my={4} py={4} bg={bg} rounded={'xl'} overflow={'auto'}>\r\n          <Stack spacing={4} px={4}>\r\n            <Text fontSize={'ms'} fontWeight={'medium'} lineHeight={'base'}>\r\n              Month\r\n            </Text>\r\n            <Text\r\n              fontSize={'ms'}\r\n              fontWeight={'medium'}\r\n              lineHeight={'base'}\r\n              whiteSpace={'nowrap'}\r\n            >\r\n              Release Amount\r\n            </Text>\r\n          </Stack>\r\n          {Object.keys(schedules).map((keySchedule) => (\r\n            <Stack spacing={4} key={keySchedule} px={4}>\r\n              <Text\r\n                fontSize={'ms'}\r\n                textAlign={'center'}\r\n                lineHeight={'base'}\r\n                whiteSpace={'nowrap'}\r\n              >\r\n                Month {Number(keySchedule) + 1}\r\n              </Text>\r\n              <Text\r\n                fontSize={'ms'}\r\n                textAlign={'center'}\r\n                lineHeight={'base'}\r\n                whiteSpace={'nowrap'}\r\n              >\r\n                {(schedules as IScheduleTokenomic)[keySchedule]}\r\n              </Text>\r\n            </Stack>\r\n          ))}\r\n        </Flex>\r\n      );\r\n    };\r\n\r\n    const _renderButtonMinus = (onClick?: () => void) => {\r\n      return (\r\n        <AppButton\r\n          variant=\"no-effects\"\r\n          onClick={onClick}\r\n          position={'absolute'}\r\n          right={'-20px'}\r\n          top={'-10px'}\r\n        >\r\n          <MinusMoreIcon />\r\n        </AppButton>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <Card py={6}>\r\n        {_renderTitle({\r\n          title: 'Tokenomics',\r\n          onClick: () =>\r\n            setInternalProject({\r\n              ...internalProject,\r\n              info: {\r\n                ...internalProject.info,\r\n                tokenomics: [...internalProject.info.tokenomics, initTokenomic],\r\n              },\r\n            }),\r\n        })}\r\n\r\n        {internalProject.info.tokenomics &&\r\n        internalProject.info.tokenomics.length\r\n          ? internalProject.info.tokenomics.map((tokenomicItem, index) => (\r\n              <Box key={index} pb={4}>\r\n                <Card variant=\"sub\">\r\n                  {internalProject.info.tokenomics.length > 1 &&\r\n                    _renderButtonMinus(() =>\r\n                      setInternalProject({\r\n                        ...internalProject,\r\n                        info: {\r\n                          ...internalProject.info,\r\n                          tokenomics: internalProject.info.tokenomics.filter(\r\n                            (f, i) => i !== index,\r\n                          ),\r\n                        },\r\n                      }),\r\n                    )}\r\n                  <Flex flexWrap={'wrap'} marginX={-2} pb={4}>\r\n                    <Box width={['100%', '50%']} px={2} mb={4}>\r\n                      <Stack>\r\n                        <Text px={1}>\r\n                          Sale round name{' '}\r\n                          <Text as={'span'} color={'red.500'}>\r\n                            *\r\n                          </Text>\r\n                        </Text>\r\n                        <AppInput\r\n                          placeholder=\"Sale round name\"\r\n                          value={tokenomicItem.title}\r\n                          onChange={(e) => {\r\n                            const newTokenomic =\r\n                              internalProject.info.tokenomics.map((value, id) =>\r\n                                index === id\r\n                                  ? { ...value, title: e.target.value }\r\n                                  : value,\r\n                              );\r\n                            setInternalProject({\r\n                              ...internalProject,\r\n                              info: {\r\n                                ...internalProject.info,\r\n                                tokenomics: newTokenomic,\r\n                              },\r\n                            });\r\n                          }}\r\n                          validate={{\r\n                            name: 'roundName',\r\n                            validator: validator.current,\r\n                            rule: 'required',\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </Box>\r\n                    <Box width={['100%', '50%']} px={2} mb={4}>\r\n                      <Stack>\r\n                        <Text px={1}>\r\n                          Number of tokens{' '}\r\n                          <Text as={'span'} color={'red.500'}>\r\n                            *\r\n                          </Text>\r\n                        </Text>\r\n                        <AppInput\r\n                          placeholder=\"Number of tokens\"\r\n                          value={tokenomicItem.totalAllocation}\r\n                          onChange={(e) => {\r\n                            const newTokenomic =\r\n                              internalProject.info.tokenomics.map((value, id) =>\r\n                                index === id\r\n                                  ? {\r\n                                      ...value,\r\n                                      totalAllocation: +e.target.value,\r\n                                    }\r\n                                  : value,\r\n                              );\r\n                            setInternalProject({\r\n                              ...internalProject,\r\n                              info: {\r\n                                ...internalProject.info,\r\n                                tokenomics: newTokenomic,\r\n                              },\r\n                            });\r\n                          }}\r\n                          validate={{\r\n                            name: 'numberToken',\r\n                            validator: validator.current,\r\n                            rule: [\r\n                              'required',\r\n                              'numeric',\r\n                              'isPositive',\r\n                              `minValue:${1}`,\r\n                            ],\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </Box>\r\n                    <Box width={['100%', '50%']} px={2} mb={4}>\r\n                      <Stack>\r\n                        <Text px={1}>\r\n                          Price{' '}\r\n                          <Text as={'span'} color={'red.500'}>\r\n                            *\r\n                          </Text>\r\n                        </Text>\r\n                        <AppInput\r\n                          placeholder=\"Price\"\r\n                          value={tokenomicItem.price}\r\n                          onChange={(e) => {\r\n                            const newTokenomic =\r\n                              internalProject.info.tokenomics.map((value, id) =>\r\n                                index === id\r\n                                  ? { ...value, price: +e.target.value }\r\n                                  : value,\r\n                              );\r\n                            setInternalProject({\r\n                              ...internalProject,\r\n                              info: {\r\n                                ...internalProject.info,\r\n                                tokenomics: newTokenomic,\r\n                              },\r\n                            });\r\n                          }}\r\n                          validate={{\r\n                            name: 'price',\r\n                            validator: validator.current,\r\n                            rule: [\r\n                              'required',\r\n                              'numeric',\r\n                              'isPositive',\r\n                              `minValue:${1}`,\r\n                            ],\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </Box>\r\n                    <Box width={['100%', '50%']} px={2} mb={4}>\r\n                      <Stack>\r\n                        <Text px={1}>Lock-up</Text>\r\n                        <AppInput\r\n                          placeholder=\"Lock-up\"\r\n                          value={tokenomicItem.description}\r\n                          onChange={(e) => {\r\n                            const newTokenomic =\r\n                              internalProject.info.tokenomics.map((value, id) =>\r\n                                index === id\r\n                                  ? { ...value, description: e.target.value }\r\n                                  : value,\r\n                              );\r\n                            setInternalProject({\r\n                              ...internalProject,\r\n                              info: {\r\n                                ...internalProject.info,\r\n                                tokenomics: newTokenomic,\r\n                              },\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </Box>\r\n                    {tokenomicItem.schedules &&\r\n                    Object.keys(tokenomicItem.schedules).length ? (\r\n                      <Box w={'full'} px={2} mb={4}>\r\n                        {_renderScheduleValue(tokenomicItem.schedules)}\r\n                      </Box>\r\n                    ) : null}\r\n                    <Box px={2} mb={4}>\r\n                      <AppButton\r\n                        onClick={() => onAssignTokenomic(index)}\r\n                        variant={'action'}\r\n                        mt={1}\r\n                      >\r\n                        Schedule\r\n                      </AppButton>\r\n                    </Box>\r\n                  </Flex>\r\n                </Card>\r\n              </Box>\r\n            ))\r\n          : null}\r\n        <Flex alignContent={'center'} justifyContent={'space-between'}>\r\n          <AppButton onClick={goToPrev} minW={'24'} variant={'lightBrand'}>\r\n            Previous\r\n          </AppButton>\r\n          <AppButton\r\n            onClick={goToNext}\r\n            disabled={isDisableNextStep}\r\n            minW={'24'}\r\n          >\r\n            Next\r\n          </AppButton>\r\n        </Flex>\r\n        {_renderModalSchedule(targetTokenomicIndex, onSetScheduleModal)}\r\n      </Card>\r\n    );\r\n  },\r\n);\r\n\r\nexport default StepTokenomic;\r\n","D:\\buni\\buni-launchpad-adminpage\\src\\components\\AlertWarningIncorrectNetwork.tsx",[],"D:\\buni\\buni-launchpad-adminpage\\src\\modals\\ModalSettingAuction.tsx",["1218","1219"],"import React, { FC, useState, useEffect, useCallback, useMemo } from 'react';\r\nimport BaseModal from 'src/modals/BaseModal';\r\nimport { Box, Switch, Text, Flex, Avatar, Tooltip } from '@chakra-ui/react';\r\nimport { Auction, IAuctionResponseType } from 'src/utils/auction';\r\nimport { getStatusEnableSwap, toggleEnableSwap, withdrawAuction } from 'src/utils/utils-auction';\r\nimport { useDispatch } from 'react-redux';\r\nimport { processTransaction } from 'src/store/transactions';\r\nimport { useAuth } from 'src/hooks/useAuth';\r\nimport BigNumber from 'bignumber.js';\r\nimport moment from 'moment';\r\nimport Card from 'src/components/Card';\r\nimport { formatNumber } from 'src/utils/utils-formats';\r\nimport { getNetworkProvider } from 'src/utils/utils-network';\r\nimport { LBPProxyContract } from 'src/utils/utils-contract';\r\nimport config from 'src/config';\r\nimport { InfoOutlineIcon } from '@chakra-ui/icons';\r\nimport AppButton from 'src/components/AppButton';\r\n\r\ninterface IModalSettingAuction {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  auction: IAuctionResponseType\r\n  balanceCurrent: string[]\r\n  mainTokenIndex: number;\r\n  baseTokenIndex: number;\r\n  baseToken: any;\r\n  baseTokenAccrued: number;\r\n  fetchData: () => void\r\n}\r\nconst ModalSettingAuction: FC<IModalSettingAuction> = ({\r\n   open,\r\n   onClose,\r\n   auction,\r\n   balanceCurrent,\r\n   mainTokenIndex,\r\n   baseTokenIndex,\r\n   baseToken,\r\n   baseTokenAccrued,\r\n   fetchData\r\n }) => {\r\n  const { network, pool } = auction;\r\n  const { address: poolAddress } = pool;\r\n  const lbpAuction = useMemo(() => new Auction(auction), [auction]);\r\n  const dispatch = useDispatch<any>();\r\n  const { user } = useAuth();\r\n  const [isEnabledSwap, setIsEnabled] = useState<boolean>(true);\r\n  const [feePercent, setFeePercent] = useState<number>(0);\r\n\r\n  const handleEnable = useCallback(async () => {\r\n    onClose();\r\n    const params = await toggleEnableSwap(poolAddress, !isEnabledSwap, network);\r\n    await dispatch(\r\n      processTransaction({ provider: user?.getProvider(), params }),\r\n    );\r\n     await getStatusSwap();\r\n  }, [isEnabledSwap, poolAddress]);\r\n\r\n  const isCorrectNetwork = useMemo(\r\n    () => user?.getNetwork() === network,\r\n    [user, network],\r\n  );\r\n\r\n  const withdrawToken = async () => {\r\n    onClose();\r\n    const params = withdrawAuction(poolAddress, network);\r\n\r\n    await dispatch(\r\n      processTransaction({ provider: user?.getProvider(), params }),\r\n    );\r\n    await fetchData();\r\n  };\r\n\r\n  const getStatusSwap = async () => {\r\n    if (!pool) {\r\n      return;\r\n    }\r\n    const { address: poolAddress } = pool;\r\n    const isEnabled = await getStatusEnableSwap(network, poolAddress);\r\n    setIsEnabled(isEnabled);\r\n  };\r\n\r\n  const getFeeSwap = async () => {\r\n    const provider = getNetworkProvider(network);\r\n    try {\r\n      const contract = LBPProxyContract(\r\n        config.networks[network].addresses.auctionProxy,\r\n        provider,\r\n      );\r\n      const feeBPS = await contract._feeBPS();\r\n      setFeePercent(+feeBPS.toString() / 100);\r\n    } catch (e) {\r\n      setFeePercent(0);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getStatusSwap();\r\n    getFeeSwap()\r\n  }, [auction]);\r\n\r\n  const feeApproximation = useMemo(() => {\r\n    if (+baseTokenAccrued < 0) {\r\n      return 0;\r\n    }\r\n\r\n    return new BigNumber(+baseTokenAccrued * feePercent).dividedBy(100);\r\n  }, [baseTokenAccrued, feePercent]);\r\n\r\n  const balanceBaseAfterMinusFee = useMemo(() => {\r\n    const balance = new BigNumber(+balanceCurrent[baseTokenIndex]).minus(\r\n      feeApproximation,\r\n    );\r\n\r\n    if (+balance < 0) {\r\n      return 0;\r\n    }\r\n\r\n    return balance;\r\n  }, [balanceCurrent, baseTokenIndex, feeApproximation]);\r\n\r\n  return (\r\n    <>\r\n      <BaseModal\r\n        title=\"Setting\"\r\n        isOpen={open}\r\n        onClose={onClose}\r\n      >\r\n        <Box>\r\n          <Text fontWeight={'medium'}>\r\n            Swapping\r\n          </Text>\r\n\r\n          <Flex mt={3}>\r\n            <Text fontSize={'16px'} mr={4}>\r\n              {isEnabledSwap ? 'Enabled' : 'Disabled'}\r\n            </Text>\r\n            <Switch\r\n              disabled={!isCorrectNetwork || moment().unix() > lbpAuction.getEndTime()}\r\n              size={'md'}\r\n              isChecked={isEnabledSwap}\r\n              onChange={handleEnable}\r\n            />\r\n          </Flex>\r\n        </Box>\r\n\r\n        <Box mt={5}>\r\n          <Text fontWeight={'medium'} mb={3}>\r\n            Auction Balances\r\n          </Text>\r\n\r\n          <Card variant={'sub'}>\r\n            <Flex justifyContent={'space-between'}>\r\n              <Text fontSize={'16px'} mr={4}>\r\n                Available balance\r\n              </Text>\r\n\r\n              <Box>\r\n                <Flex fontWeight={'bold'}>\r\n                  {formatNumber(balanceCurrent[mainTokenIndex])}\r\n                  <Avatar\r\n                    src={auction.logoUrl}\r\n                    size=\"xs\"\r\n                    ml={3}\r\n                  />\r\n                </Flex>\r\n\r\n                <Flex justifyContent={'flex-end'} mt={3} fontWeight={'bold'}>\r\n                  {formatNumber(balanceCurrent[baseTokenIndex])}\r\n                  <Avatar\r\n                    src={baseToken.icon}\r\n                    size=\"xs\"\r\n                    ml={3}\r\n                  />\r\n                </Flex>\r\n\r\n              </Box>\r\n            </Flex>\r\n          </Card>\r\n\r\n          <Card variant={'sub'} mt={2}>\r\n            <Flex justifyContent={'space-between'}>\r\n              <Text fontSize={'16px'} mr={4}>\r\n                Base Tokens Accrued\r\n              </Text>\r\n\r\n              <Flex justifyContent={'flex-end'} fontWeight={'bold'}>\r\n                {formatNumber(baseTokenAccrued)}\r\n                <Avatar\r\n                  src={baseToken.icon}\r\n                  size=\"xs\"\r\n                  ml={3}\r\n                />\r\n              </Flex>\r\n            </Flex>\r\n          </Card>\r\n\r\n          <Card variant={'sub'} mt={5}>\r\n            <Text fontSize={'16px'} mr={4}>\r\n              {feePercent}% Platform Access Fee Approximation\r\n              <Tooltip\r\n                placement=\"top\"\r\n                hasArrow\r\n                label='Platform access fee approximation is calculated in real time upon withdrawal transaction using the base tokens accrued.'\r\n                bg='gray.300'\r\n                color='black'\r\n              >\r\n                <InfoOutlineIcon ml={2} />\r\n              </Tooltip>\r\n            </Text>\r\n\r\n            <Flex mt={2}  fontWeight={'bold'}>\r\n              {formatNumber(feeApproximation)}\r\n              <Avatar\r\n                src={baseToken.icon}\r\n                size=\"xs\"\r\n                ml={3}\r\n              />\r\n            </Flex>\r\n          </Card>\r\n        </Box>\r\n\r\n        <Box mt={5}>\r\n          <Text fontWeight={'medium'} mb={3}>\r\n            Balances After Platform Access Fee\r\n          </Text>\r\n\r\n          <Card variant={'sub'}>\r\n            <Flex mt={2}>\r\n              <Flex justifyContent={'flex-end'} fontWeight={'bold'}>\r\n                {formatNumber(+balanceCurrent[mainTokenIndex])}\r\n                <Avatar\r\n                  src={auction.logoUrl}\r\n                  size=\"xs\"\r\n                  ml={3}\r\n                />\r\n              </Flex>\r\n\r\n              <Flex justifyContent={'flex-end'}  fontWeight={'bold'} ml={10}>\r\n                {formatNumber(+balanceBaseAfterMinusFee)}\r\n                <Avatar\r\n                  src={baseToken.icon}\r\n                  size=\"xs\"\r\n                  ml={3}\r\n                />\r\n              </Flex>\r\n            </Flex>\r\n\r\n            <AppButton\r\n              mt={5}\r\n              onClick={withdrawToken}\r\n              disabled={!isCorrectNetwork}\r\n              w={36}\r\n            >\r\n              Withdraw All\r\n            </AppButton>\r\n          </Card>\r\n        </Box>\r\n      </BaseModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalSettingAuction;\r\n","D:\\buni\\buni-lens-interface\\src\\index.tsx",[],[],"D:\\buni\\buni-lens-interface\\src\\App.tsx",[],"D:\\buni\\buni-lens-interface\\src\\routes.tsx",[],"D:\\buni\\buni-lens-interface\\src\\themes\\index.ts",[],"D:\\buni\\buni-lens-interface\\src\\store\\index.ts",[],"D:\\buni\\buni-lens-interface\\src\\pages\\HomePage.tsx",[],"D:\\buni\\buni-lens-interface\\src\\themes\\styles.ts",[],"D:\\buni\\buni-lens-interface\\src\\components\\AppButton.tsx",[],"D:\\buni\\buni-lens-interface\\src\\components\\AppTextarea.tsx",[],"D:\\buni\\buni-lens-interface\\src\\components\\AppInput.tsx",[],"D:\\buni\\buni-lens-interface\\src\\components\\Card.tsx",[],"D:\\buni\\buni-lens-interface\\src\\components\\AppLink.tsx",[],"D:\\buni\\buni-lens-interface\\src\\components\\AppSwitch.tsx",[],"D:\\buni\\buni-lens-interface\\src\\components\\AppSelect.tsx",[],"D:\\buni\\buni-lens-interface\\src\\hooks\\useForceRender.ts",[],"D:\\buni\\buni-lens-interface\\src\\layouts\\BasePage.tsx",[],"D:\\buni\\buni-lens-interface\\src\\layouts\\Footer.tsx",[],"D:\\buni\\buni-lens-interface\\src\\layouts\\Header.tsx",[],{"ruleId":"1220","severity":1,"message":"1221","line":34,"column":10,"nodeType":"1222","messageId":"1223","endLine":34,"endColumn":25},{"ruleId":"1224","severity":1,"message":"1225","line":74,"column":46,"nodeType":"1226","messageId":"1227","endLine":74,"endColumn":49,"suggestions":"1228"},{"ruleId":"1220","severity":1,"message":"1229","line":1,"column":10,"nodeType":"1222","messageId":"1223","endLine":1,"endColumn":12},{"ruleId":"1220","severity":1,"message":"1230","line":6,"column":8,"nodeType":"1222","messageId":"1223","endLine":6,"endColumn":20},{"ruleId":"1224","severity":1,"message":"1225","line":55,"column":19,"nodeType":"1226","messageId":"1227","endLine":55,"endColumn":22,"suggestions":"1231"},{"ruleId":"1224","severity":1,"message":"1225","line":79,"column":19,"nodeType":"1226","messageId":"1227","endLine":79,"endColumn":22,"suggestions":"1232"},{"ruleId":"1220","severity":1,"message":"1233","line":75,"column":21,"nodeType":"1222","messageId":"1223","endLine":75,"endColumn":35},{"ruleId":"1224","severity":1,"message":"1225","line":49,"column":19,"nodeType":"1226","messageId":"1227","endLine":49,"endColumn":22,"suggestions":"1234"},{"ruleId":"1224","severity":1,"message":"1225","line":54,"column":42,"nodeType":"1226","messageId":"1227","endLine":54,"endColumn":45,"suggestions":"1235"},{"ruleId":"1220","severity":1,"message":"1221","line":33,"column":10,"nodeType":"1222","messageId":"1223","endLine":33,"endColumn":25},{"ruleId":"1224","severity":1,"message":"1225","line":96,"column":21,"nodeType":"1226","messageId":"1227","endLine":96,"endColumn":24,"suggestions":"1236"},{"ruleId":"1224","severity":1,"message":"1225","line":229,"column":21,"nodeType":"1226","messageId":"1227","endLine":229,"endColumn":24,"suggestions":"1237"},{"ruleId":"1220","severity":1,"message":"1238","line":10,"column":14,"nodeType":"1222","messageId":"1223","endLine":10,"endColumn":23},{"ruleId":"1224","severity":1,"message":"1225","line":16,"column":18,"nodeType":"1226","messageId":"1227","endLine":16,"endColumn":21,"suggestions":"1239"},{"ruleId":"1224","severity":1,"message":"1225","line":46,"column":23,"nodeType":"1226","messageId":"1227","endLine":46,"endColumn":26,"suggestions":"1240"},{"ruleId":"1224","severity":1,"message":"1225","line":124,"column":23,"nodeType":"1226","messageId":"1227","endLine":124,"endColumn":26,"suggestions":"1241"},{"ruleId":"1220","severity":1,"message":"1242","line":21,"column":15,"nodeType":"1222","messageId":"1223","endLine":21,"endColumn":32},{"ruleId":"1220","severity":1,"message":"1243","line":1,"column":37,"nodeType":"1222","messageId":"1223","endLine":1,"endColumn":54},{"ruleId":"1220","severity":1,"message":"1244","line":76,"column":9,"nodeType":"1222","messageId":"1223","endLine":76,"endColumn":27},{"ruleId":"1224","severity":1,"message":"1225","line":157,"column":18,"nodeType":"1226","messageId":"1227","endLine":157,"endColumn":21,"suggestions":"1245"},{"ruleId":"1224","severity":1,"message":"1225","line":158,"column":20,"nodeType":"1226","messageId":"1227","endLine":158,"endColumn":23,"suggestions":"1246"},{"ruleId":"1224","severity":1,"message":"1225","line":160,"column":14,"nodeType":"1226","messageId":"1227","endLine":160,"endColumn":17,"suggestions":"1247"},{"ruleId":"1224","severity":1,"message":"1225","line":59,"column":17,"nodeType":"1226","messageId":"1227","endLine":59,"endColumn":20,"suggestions":"1248"},{"ruleId":"1224","severity":1,"message":"1225","line":59,"column":31,"nodeType":"1226","messageId":"1227","endLine":59,"endColumn":34,"suggestions":"1249"},{"ruleId":"1224","severity":1,"message":"1225","line":65,"column":14,"nodeType":"1226","messageId":"1227","endLine":65,"endColumn":17,"suggestions":"1250"},{"ruleId":"1224","severity":1,"message":"1225","line":66,"column":15,"nodeType":"1226","messageId":"1227","endLine":66,"endColumn":18,"suggestions":"1251"},{"ruleId":"1224","severity":1,"message":"1225","line":67,"column":34,"nodeType":"1226","messageId":"1227","endLine":67,"endColumn":37,"suggestions":"1252"},{"ruleId":"1224","severity":1,"message":"1225","line":129,"column":37,"nodeType":"1226","messageId":"1227","endLine":129,"endColumn":40,"suggestions":"1253"},{"ruleId":"1224","severity":1,"message":"1225","line":140,"column":37,"nodeType":"1226","messageId":"1227","endLine":140,"endColumn":40,"suggestions":"1254"},{"ruleId":"1220","severity":1,"message":"1255","line":30,"column":3,"nodeType":"1222","messageId":"1223","endLine":30,"endColumn":7},{"ruleId":"1220","severity":1,"message":"1256","line":31,"column":3,"nodeType":"1222","messageId":"1223","endLine":31,"endColumn":14},{"ruleId":"1224","severity":1,"message":"1225","line":59,"column":26,"nodeType":"1226","messageId":"1227","endLine":59,"endColumn":29,"suggestions":"1257"},{"ruleId":"1224","severity":1,"message":"1225","line":135,"column":66,"nodeType":"1226","messageId":"1227","endLine":135,"endColumn":69,"suggestions":"1258"},{"ruleId":"1224","severity":1,"message":"1225","line":142,"column":12,"nodeType":"1226","messageId":"1227","endLine":142,"endColumn":15,"suggestions":"1259"},{"ruleId":"1224","severity":1,"message":"1225","line":195,"column":12,"nodeType":"1226","messageId":"1227","endLine":195,"endColumn":15,"suggestions":"1260"},{"ruleId":"1224","severity":1,"message":"1225","line":10,"column":23,"nodeType":"1226","messageId":"1227","endLine":10,"endColumn":26,"suggestions":"1261"},{"ruleId":"1224","severity":1,"message":"1225","line":22,"column":14,"nodeType":"1226","messageId":"1227","endLine":22,"endColumn":17,"suggestions":"1262"},{"ruleId":"1224","severity":1,"message":"1225","line":23,"column":35,"nodeType":"1226","messageId":"1227","endLine":23,"endColumn":38,"suggestions":"1263"},{"ruleId":"1224","severity":1,"message":"1225","line":33,"column":26,"nodeType":"1226","messageId":"1227","endLine":33,"endColumn":29,"suggestions":"1264"},{"ruleId":"1224","severity":1,"message":"1225","line":33,"column":40,"nodeType":"1226","messageId":"1227","endLine":33,"endColumn":43,"suggestions":"1265"},{"ruleId":"1224","severity":1,"message":"1225","line":7,"column":8,"nodeType":"1226","messageId":"1227","endLine":7,"endColumn":11,"suggestions":"1266"},{"ruleId":"1224","severity":1,"message":"1225","line":8,"column":10,"nodeType":"1226","messageId":"1227","endLine":8,"endColumn":13,"suggestions":"1267"},{"ruleId":"1224","severity":1,"message":"1225","line":16,"column":39,"nodeType":"1226","messageId":"1227","endLine":16,"endColumn":42,"suggestions":"1268"},{"ruleId":"1224","severity":1,"message":"1225","line":24,"column":39,"nodeType":"1226","messageId":"1227","endLine":24,"endColumn":42,"suggestions":"1269"},{"ruleId":"1224","severity":1,"message":"1225","line":24,"column":47,"nodeType":"1226","messageId":"1227","endLine":24,"endColumn":50,"suggestions":"1270"},{"ruleId":"1224","severity":1,"message":"1225","line":20,"column":35,"nodeType":"1226","messageId":"1227","endLine":20,"endColumn":38,"suggestions":"1271"},{"ruleId":"1224","severity":1,"message":"1225","line":32,"column":18,"nodeType":"1226","messageId":"1227","endLine":32,"endColumn":21,"suggestions":"1272"},{"ruleId":"1224","severity":1,"message":"1225","line":32,"column":29,"nodeType":"1226","messageId":"1227","endLine":32,"endColumn":32,"suggestions":"1273"},{"ruleId":"1224","severity":1,"message":"1225","line":41,"column":20,"nodeType":"1226","messageId":"1227","endLine":41,"endColumn":23,"suggestions":"1274"},{"ruleId":"1224","severity":1,"message":"1225","line":41,"column":31,"nodeType":"1226","messageId":"1227","endLine":41,"endColumn":34,"suggestions":"1275"},{"ruleId":"1224","severity":1,"message":"1225","line":50,"column":19,"nodeType":"1226","messageId":"1227","endLine":50,"endColumn":22,"suggestions":"1276"},{"ruleId":"1224","severity":1,"message":"1225","line":50,"column":30,"nodeType":"1226","messageId":"1227","endLine":50,"endColumn":33,"suggestions":"1277"},{"ruleId":"1224","severity":1,"message":"1225","line":59,"column":21,"nodeType":"1226","messageId":"1227","endLine":59,"endColumn":24,"suggestions":"1278"},{"ruleId":"1224","severity":1,"message":"1225","line":59,"column":33,"nodeType":"1226","messageId":"1227","endLine":59,"endColumn":36,"suggestions":"1279"},{"ruleId":"1224","severity":1,"message":"1225","line":71,"column":36,"nodeType":"1226","messageId":"1227","endLine":71,"endColumn":39,"suggestions":"1280"},{"ruleId":"1224","severity":1,"message":"1225","line":75,"column":24,"nodeType":"1226","messageId":"1227","endLine":75,"endColumn":27,"suggestions":"1281"},{"ruleId":"1224","severity":1,"message":"1225","line":88,"column":28,"nodeType":"1226","messageId":"1227","endLine":88,"endColumn":31,"suggestions":"1282"},{"ruleId":"1224","severity":1,"message":"1225","line":8,"column":20,"nodeType":"1226","messageId":"1227","endLine":8,"endColumn":23,"suggestions":"1283"},{"ruleId":"1224","severity":1,"message":"1225","line":28,"column":27,"nodeType":"1226","messageId":"1227","endLine":28,"endColumn":30,"suggestions":"1284"},{"ruleId":"1224","severity":1,"message":"1225","line":36,"column":26,"nodeType":"1226","messageId":"1227","endLine":36,"endColumn":29,"suggestions":"1285"},{"ruleId":"1224","severity":1,"message":"1225","line":40,"column":41,"nodeType":"1226","messageId":"1227","endLine":40,"endColumn":44,"suggestions":"1286"},{"ruleId":"1224","severity":1,"message":"1225","line":44,"column":46,"nodeType":"1226","messageId":"1227","endLine":44,"endColumn":49,"suggestions":"1287"},{"ruleId":"1224","severity":1,"message":"1225","line":48,"column":43,"nodeType":"1226","messageId":"1227","endLine":48,"endColumn":46,"suggestions":"1288"},{"ruleId":"1224","severity":1,"message":"1225","line":56,"column":24,"nodeType":"1226","messageId":"1227","endLine":56,"endColumn":27,"suggestions":"1289"},{"ruleId":"1220","severity":1,"message":"1290","line":18,"column":33,"nodeType":"1222","messageId":"1223","endLine":18,"endColumn":45},{"ruleId":"1224","severity":1,"message":"1225","line":6,"column":30,"nodeType":"1226","messageId":"1227","endLine":6,"endColumn":33,"suggestions":"1291"},{"ruleId":"1224","severity":1,"message":"1225","line":66,"column":37,"nodeType":"1226","messageId":"1227","endLine":66,"endColumn":40,"suggestions":"1292"},{"ruleId":"1224","severity":1,"message":"1225","line":77,"column":41,"nodeType":"1226","messageId":"1227","endLine":77,"endColumn":44,"suggestions":"1293"},{"ruleId":"1224","severity":1,"message":"1225","line":84,"column":41,"nodeType":"1226","messageId":"1227","endLine":84,"endColumn":44,"suggestions":"1294"},{"ruleId":"1224","severity":1,"message":"1225","line":89,"column":45,"nodeType":"1226","messageId":"1227","endLine":89,"endColumn":48,"suggestions":"1295"},{"ruleId":"1224","severity":1,"message":"1225","line":94,"column":34,"nodeType":"1226","messageId":"1227","endLine":94,"endColumn":37,"suggestions":"1296"},{"ruleId":"1224","severity":1,"message":"1225","line":104,"column":32,"nodeType":"1226","messageId":"1227","endLine":104,"endColumn":35,"suggestions":"1297"},{"ruleId":"1224","severity":1,"message":"1225","line":2,"column":13,"nodeType":"1226","messageId":"1227","endLine":2,"endColumn":16,"suggestions":"1298"},{"ruleId":"1224","severity":1,"message":"1225","line":2,"column":28,"nodeType":"1226","messageId":"1227","endLine":2,"endColumn":31,"suggestions":"1299"},{"ruleId":"1224","severity":1,"message":"1225","line":5,"column":19,"nodeType":"1226","messageId":"1227","endLine":5,"endColumn":22,"suggestions":"1300"},{"ruleId":"1224","severity":1,"message":"1225","line":5,"column":31,"nodeType":"1226","messageId":"1227","endLine":5,"endColumn":34,"suggestions":"1301"},{"ruleId":"1224","severity":1,"message":"1225","line":8,"column":17,"nodeType":"1226","messageId":"1227","endLine":8,"endColumn":20,"suggestions":"1302"},{"ruleId":"1224","severity":1,"message":"1225","line":8,"column":33,"nodeType":"1226","messageId":"1227","endLine":8,"endColumn":36,"suggestions":"1303"},{"ruleId":"1224","severity":1,"message":"1225","line":15,"column":16,"nodeType":"1226","messageId":"1227","endLine":15,"endColumn":19,"suggestions":"1304"},{"ruleId":"1224","severity":1,"message":"1225","line":16,"column":53,"nodeType":"1226","messageId":"1227","endLine":16,"endColumn":56,"suggestions":"1305"},{"ruleId":"1224","severity":1,"message":"1225","line":18,"column":19,"nodeType":"1226","messageId":"1227","endLine":18,"endColumn":22,"suggestions":"1306"},{"ruleId":"1224","severity":1,"message":"1225","line":21,"column":21,"nodeType":"1226","messageId":"1227","endLine":21,"endColumn":24,"suggestions":"1307"},{"ruleId":"1220","severity":1,"message":"1308","line":90,"column":35,"nodeType":"1222","messageId":"1223","endLine":90,"endColumn":49},{"ruleId":"1224","severity":1,"message":"1225","line":9,"column":23,"nodeType":"1226","messageId":"1227","endLine":9,"endColumn":26,"suggestions":"1309"},{"ruleId":"1224","severity":1,"message":"1225","line":14,"column":25,"nodeType":"1226","messageId":"1227","endLine":14,"endColumn":28,"suggestions":"1310"},{"ruleId":"1224","severity":1,"message":"1225","line":36,"column":48,"nodeType":"1226","messageId":"1227","endLine":36,"endColumn":51,"suggestions":"1311"},{"ruleId":"1224","severity":1,"message":"1225","line":115,"column":24,"nodeType":"1226","messageId":"1227","endLine":115,"endColumn":27,"suggestions":"1312"},{"ruleId":"1224","severity":1,"message":"1225","line":155,"column":17,"nodeType":"1226","messageId":"1227","endLine":155,"endColumn":20,"suggestions":"1313"},{"ruleId":"1224","severity":1,"message":"1225","line":160,"column":14,"nodeType":"1226","messageId":"1227","endLine":160,"endColumn":17,"suggestions":"1314"},{"ruleId":"1224","severity":1,"message":"1225","line":219,"column":28,"nodeType":"1226","messageId":"1227","endLine":219,"endColumn":31,"suggestions":"1315"},{"ruleId":"1224","severity":1,"message":"1225","line":219,"column":36,"nodeType":"1226","messageId":"1227","endLine":219,"endColumn":39,"suggestions":"1316"},{"ruleId":"1224","severity":1,"message":"1225","line":51,"column":52,"nodeType":"1226","messageId":"1227","endLine":51,"endColumn":55,"suggestions":"1317"},{"ruleId":"1224","severity":1,"message":"1225","line":64,"column":51,"nodeType":"1226","messageId":"1227","endLine":64,"endColumn":54,"suggestions":"1318"},{"ruleId":"1224","severity":1,"message":"1225","line":92,"column":15,"nodeType":"1226","messageId":"1227","endLine":92,"endColumn":18,"suggestions":"1319"},{"ruleId":"1224","severity":1,"message":"1225","line":108,"column":16,"nodeType":"1226","messageId":"1227","endLine":108,"endColumn":19,"suggestions":"1320"},{"ruleId":"1224","severity":1,"message":"1225","line":110,"column":45,"nodeType":"1226","messageId":"1227","endLine":110,"endColumn":48,"suggestions":"1321"},{"ruleId":"1224","severity":1,"message":"1225","line":135,"column":21,"nodeType":"1226","messageId":"1227","endLine":135,"endColumn":24,"suggestions":"1322"},{"ruleId":"1224","severity":1,"message":"1225","line":135,"column":39,"nodeType":"1226","messageId":"1227","endLine":135,"endColumn":42,"suggestions":"1323"},{"ruleId":"1224","severity":1,"message":"1225","line":135,"column":51,"nodeType":"1226","messageId":"1227","endLine":135,"endColumn":54,"suggestions":"1324"},{"ruleId":"1220","severity":1,"message":"1325","line":45,"column":3,"nodeType":"1222","messageId":"1223","endLine":45,"endColumn":23},{"ruleId":"1224","severity":1,"message":"1225","line":49,"column":51,"nodeType":"1226","messageId":"1227","endLine":49,"endColumn":54,"suggestions":"1326"},{"ruleId":"1220","severity":1,"message":"1325","line":60,"column":45,"nodeType":"1222","messageId":"1223","endLine":60,"endColumn":65},{"ruleId":"1220","severity":1,"message":"1325","line":71,"column":3,"nodeType":"1222","messageId":"1223","endLine":71,"endColumn":23},{"ruleId":"1224","severity":1,"message":"1225","line":74,"column":12,"nodeType":"1226","messageId":"1227","endLine":74,"endColumn":15,"suggestions":"1327"},{"ruleId":"1224","severity":1,"message":"1225","line":106,"column":15,"nodeType":"1226","messageId":"1227","endLine":106,"endColumn":18,"suggestions":"1328"},{"ruleId":"1224","severity":1,"message":"1225","line":112,"column":12,"nodeType":"1226","messageId":"1227","endLine":112,"endColumn":15,"suggestions":"1329"},{"ruleId":"1224","severity":1,"message":"1225","line":144,"column":15,"nodeType":"1226","messageId":"1227","endLine":144,"endColumn":18,"suggestions":"1330"},{"ruleId":"1224","severity":1,"message":"1225","line":91,"column":28,"nodeType":"1226","messageId":"1227","endLine":91,"endColumn":31,"suggestions":"1331"},{"ruleId":"1224","severity":1,"message":"1225","line":256,"column":28,"nodeType":"1226","messageId":"1227","endLine":256,"endColumn":31,"suggestions":"1332"},{"ruleId":"1224","severity":1,"message":"1225","line":280,"column":63,"nodeType":"1226","messageId":"1227","endLine":280,"endColumn":66,"suggestions":"1333"},{"ruleId":"1224","severity":1,"message":"1225","line":283,"column":16,"nodeType":"1226","messageId":"1227","endLine":283,"endColumn":19,"suggestions":"1334"},{"ruleId":"1224","severity":1,"message":"1225","line":289,"column":16,"nodeType":"1226","messageId":"1227","endLine":289,"endColumn":19,"suggestions":"1335"},{"ruleId":"1224","severity":1,"message":"1225","line":303,"column":19,"nodeType":"1226","messageId":"1227","endLine":303,"endColumn":22,"suggestions":"1336"},{"ruleId":"1224","severity":1,"message":"1225","line":10,"column":55,"nodeType":"1226","messageId":"1227","endLine":10,"endColumn":58,"suggestions":"1337"},{"ruleId":"1224","severity":1,"message":"1225","line":9,"column":25,"nodeType":"1226","messageId":"1227","endLine":9,"endColumn":28,"suggestions":"1338"},{"ruleId":"1224","severity":1,"message":"1225","line":10,"column":20,"nodeType":"1226","messageId":"1227","endLine":10,"endColumn":23,"suggestions":"1339"},{"ruleId":"1224","severity":1,"message":"1225","line":20,"column":43,"nodeType":"1226","messageId":"1227","endLine":20,"endColumn":46,"suggestions":"1340"},{"ruleId":"1224","severity":1,"message":"1225","line":25,"column":21,"nodeType":"1226","messageId":"1227","endLine":25,"endColumn":24,"suggestions":"1341"},{"ruleId":"1224","severity":1,"message":"1225","line":30,"column":20,"nodeType":"1226","messageId":"1227","endLine":30,"endColumn":23,"suggestions":"1342"},{"ruleId":"1224","severity":1,"message":"1225","line":40,"column":48,"nodeType":"1226","messageId":"1227","endLine":40,"endColumn":51,"suggestions":"1343"},{"ruleId":"1224","severity":1,"message":"1225","line":45,"column":44,"nodeType":"1226","messageId":"1227","endLine":45,"endColumn":47,"suggestions":"1344"},{"ruleId":"1224","severity":1,"message":"1225","line":55,"column":19,"nodeType":"1226","messageId":"1227","endLine":55,"endColumn":22,"suggestions":"1345"},{"ruleId":"1224","severity":1,"message":"1225","line":60,"column":20,"nodeType":"1226","messageId":"1227","endLine":60,"endColumn":23,"suggestions":"1346"},{"ruleId":"1224","severity":1,"message":"1225","line":65,"column":19,"nodeType":"1226","messageId":"1227","endLine":65,"endColumn":22,"suggestions":"1347"},{"ruleId":"1224","severity":1,"message":"1225","line":75,"column":42,"nodeType":"1226","messageId":"1227","endLine":75,"endColumn":45,"suggestions":"1348"},{"ruleId":"1224","severity":1,"message":"1225","line":85,"column":48,"nodeType":"1226","messageId":"1227","endLine":85,"endColumn":51,"suggestions":"1349"},{"ruleId":"1224","severity":1,"message":"1225","line":95,"column":23,"nodeType":"1226","messageId":"1227","endLine":95,"endColumn":26,"suggestions":"1350"},{"ruleId":"1224","severity":1,"message":"1225","line":10,"column":23,"nodeType":"1226","messageId":"1227","endLine":10,"endColumn":26,"suggestions":"1351"},{"ruleId":"1224","severity":1,"message":"1225","line":71,"column":47,"nodeType":"1226","messageId":"1227","endLine":71,"endColumn":50,"suggestions":"1352"},{"ruleId":"1224","severity":1,"message":"1225","line":15,"column":18,"nodeType":"1226","messageId":"1227","endLine":15,"endColumn":21,"suggestions":"1353"},{"ruleId":"1224","severity":1,"message":"1225","line":16,"column":16,"nodeType":"1226","messageId":"1227","endLine":16,"endColumn":19,"suggestions":"1354"},{"ruleId":"1224","severity":1,"message":"1225","line":240,"column":73,"nodeType":"1226","messageId":"1227","endLine":240,"endColumn":76,"suggestions":"1355"},{"ruleId":"1224","severity":1,"message":"1225","line":243,"column":52,"nodeType":"1226","messageId":"1227","endLine":243,"endColumn":55,"suggestions":"1356"},{"ruleId":"1224","severity":1,"message":"1225","line":254,"column":51,"nodeType":"1226","messageId":"1227","endLine":254,"endColumn":54,"suggestions":"1357"},{"ruleId":"1224","severity":1,"message":"1225","line":256,"column":44,"nodeType":"1226","messageId":"1227","endLine":256,"endColumn":47,"suggestions":"1358"},{"ruleId":"1224","severity":1,"message":"1225","line":258,"column":46,"nodeType":"1226","messageId":"1227","endLine":258,"endColumn":49,"suggestions":"1359"},{"ruleId":"1224","severity":1,"message":"1225","line":262,"column":48,"nodeType":"1226","messageId":"1227","endLine":262,"endColumn":51,"suggestions":"1360"},{"ruleId":"1224","severity":1,"message":"1225","line":303,"column":30,"nodeType":"1226","messageId":"1227","endLine":303,"endColumn":33,"suggestions":"1361"},{"ruleId":"1224","severity":1,"message":"1225","line":306,"column":30,"nodeType":"1226","messageId":"1227","endLine":306,"endColumn":33,"suggestions":"1362"},{"ruleId":"1224","severity":1,"message":"1225","line":331,"column":40,"nodeType":"1226","messageId":"1227","endLine":331,"endColumn":43,"suggestions":"1363"},{"ruleId":"1224","severity":1,"message":"1225","line":334,"column":37,"nodeType":"1226","messageId":"1227","endLine":334,"endColumn":40,"suggestions":"1364"},{"ruleId":"1224","severity":1,"message":"1225","line":338,"column":35,"nodeType":"1226","messageId":"1227","endLine":338,"endColumn":38,"suggestions":"1365"},{"ruleId":"1224","severity":1,"message":"1225","line":341,"column":32,"nodeType":"1226","messageId":"1227","endLine":341,"endColumn":35,"suggestions":"1366"},{"ruleId":"1224","severity":1,"message":"1225","line":345,"column":38,"nodeType":"1226","messageId":"1227","endLine":345,"endColumn":41,"suggestions":"1367"},{"ruleId":"1224","severity":1,"message":"1225","line":348,"column":35,"nodeType":"1226","messageId":"1227","endLine":348,"endColumn":38,"suggestions":"1368"},{"ruleId":"1224","severity":1,"message":"1225","line":387,"column":35,"nodeType":"1226","messageId":"1227","endLine":387,"endColumn":38,"suggestions":"1369"},{"ruleId":"1224","severity":1,"message":"1225","line":390,"column":32,"nodeType":"1226","messageId":"1227","endLine":390,"endColumn":35,"suggestions":"1370"},{"ruleId":"1224","severity":1,"message":"1225","line":394,"column":42,"nodeType":"1226","messageId":"1227","endLine":394,"endColumn":45,"suggestions":"1371"},{"ruleId":"1224","severity":1,"message":"1225","line":397,"column":40,"nodeType":"1226","messageId":"1227","endLine":397,"endColumn":43,"suggestions":"1372"},{"ruleId":"1224","severity":1,"message":"1225","line":401,"column":31,"nodeType":"1226","messageId":"1227","endLine":401,"endColumn":34,"suggestions":"1373"},{"ruleId":"1224","severity":1,"message":"1225","line":404,"column":28,"nodeType":"1226","messageId":"1227","endLine":404,"endColumn":31,"suggestions":"1374"},{"ruleId":"1224","severity":1,"message":"1225","line":415,"column":33,"nodeType":"1226","messageId":"1227","endLine":415,"endColumn":36,"suggestions":"1375"},{"ruleId":"1224","severity":1,"message":"1225","line":418,"column":29,"nodeType":"1226","messageId":"1227","endLine":418,"endColumn":32,"suggestions":"1376"},{"ruleId":"1224","severity":1,"message":"1225","line":436,"column":51,"nodeType":"1226","messageId":"1227","endLine":436,"endColumn":54,"suggestions":"1377"},{"ruleId":"1224","severity":1,"message":"1225","line":439,"column":46,"nodeType":"1226","messageId":"1227","endLine":439,"endColumn":49,"suggestions":"1378"},{"ruleId":"1224","severity":1,"message":"1225","line":17,"column":28,"nodeType":"1226","messageId":"1227","endLine":17,"endColumn":31,"suggestions":"1379"},{"ruleId":"1224","severity":1,"message":"1225","line":49,"column":29,"nodeType":"1226","messageId":"1227","endLine":49,"endColumn":32,"suggestions":"1380"},{"ruleId":"1224","severity":1,"message":"1225","line":49,"column":59,"nodeType":"1226","messageId":"1227","endLine":49,"endColumn":62,"suggestions":"1381"},{"ruleId":"1220","severity":1,"message":"1382","line":1,"column":21,"nodeType":"1222","messageId":"1223","endLine":1,"endColumn":32},{"ruleId":"1220","severity":1,"message":"1383","line":24,"column":24,"nodeType":"1222","messageId":"1223","endLine":24,"endColumn":42},{"ruleId":"1224","severity":1,"message":"1225","line":30,"column":18,"nodeType":"1226","messageId":"1227","endLine":30,"endColumn":21,"suggestions":"1384"},{"ruleId":"1224","severity":1,"message":"1225","line":31,"column":14,"nodeType":"1226","messageId":"1227","endLine":31,"endColumn":17,"suggestions":"1385"},{"ruleId":"1224","severity":1,"message":"1225","line":53,"column":16,"nodeType":"1226","messageId":"1227","endLine":53,"endColumn":19,"suggestions":"1386"},{"ruleId":"1224","severity":1,"message":"1225","line":69,"column":17,"nodeType":"1226","messageId":"1227","endLine":69,"endColumn":20,"suggestions":"1387"},{"ruleId":"1224","severity":1,"message":"1225","line":154,"column":39,"nodeType":"1226","messageId":"1227","endLine":154,"endColumn":42,"suggestions":"1388"},{"ruleId":"1224","severity":1,"message":"1225","line":6,"column":16,"nodeType":"1226","messageId":"1227","endLine":6,"endColumn":19,"suggestions":"1389"},{"ruleId":"1224","severity":1,"message":"1225","line":25,"column":62,"nodeType":"1226","messageId":"1227","endLine":25,"endColumn":65,"suggestions":"1390"},{"ruleId":"1224","severity":1,"message":"1225","line":64,"column":15,"nodeType":"1226","messageId":"1227","endLine":64,"endColumn":18,"suggestions":"1391"},{"ruleId":"1224","severity":1,"message":"1225","line":75,"column":21,"nodeType":"1226","messageId":"1227","endLine":75,"endColumn":24,"suggestions":"1392"},{"ruleId":"1220","severity":1,"message":"1393","line":9,"column":8,"nodeType":"1222","messageId":"1223","endLine":9,"endColumn":19},{"ruleId":"1224","severity":1,"message":"1225","line":28,"column":9,"nodeType":"1226","messageId":"1227","endLine":28,"endColumn":12,"suggestions":"1394"},{"ruleId":"1224","severity":1,"message":"1225","line":68,"column":42,"nodeType":"1226","messageId":"1227","endLine":68,"endColumn":45,"suggestions":"1395"},{"ruleId":"1224","severity":1,"message":"1225","line":83,"column":37,"nodeType":"1226","messageId":"1227","endLine":83,"endColumn":40,"suggestions":"1396"},{"ruleId":"1224","severity":1,"message":"1225","line":108,"column":21,"nodeType":"1226","messageId":"1227","endLine":108,"endColumn":24,"suggestions":"1397"},{"ruleId":"1224","severity":1,"message":"1225","line":10,"column":19,"nodeType":"1226","messageId":"1227","endLine":10,"endColumn":22,"suggestions":"1398"},{"ruleId":"1224","severity":1,"message":"1225","line":11,"column":25,"nodeType":"1226","messageId":"1227","endLine":11,"endColumn":28,"suggestions":"1399"},{"ruleId":"1224","severity":1,"message":"1225","line":39,"column":20,"nodeType":"1226","messageId":"1227","endLine":39,"endColumn":23,"suggestions":"1400"},{"ruleId":"1224","severity":1,"message":"1225","line":59,"column":49,"nodeType":"1226","messageId":"1227","endLine":59,"endColumn":52,"suggestions":"1401"},{"ruleId":"1224","severity":1,"message":"1225","line":59,"column":60,"nodeType":"1226","messageId":"1227","endLine":59,"endColumn":63,"suggestions":"1402"},{"ruleId":"1224","severity":1,"message":"1225","line":13,"column":30,"nodeType":"1226","messageId":"1227","endLine":13,"endColumn":33,"suggestions":"1403"},{"ruleId":"1224","severity":1,"message":"1225","line":369,"column":47,"nodeType":"1226","messageId":"1227","endLine":369,"endColumn":50,"suggestions":"1404"},{"ruleId":"1224","severity":1,"message":"1225","line":38,"column":47,"nodeType":"1226","messageId":"1227","endLine":38,"endColumn":50,"suggestions":"1405"},{"ruleId":"1224","severity":1,"message":"1225","line":38,"column":44,"nodeType":"1226","messageId":"1227","endLine":38,"endColumn":47,"suggestions":"1406"},{"ruleId":"1224","severity":1,"message":"1225","line":39,"column":42,"nodeType":"1226","messageId":"1227","endLine":39,"endColumn":45,"suggestions":"1407"},{"ruleId":"1224","severity":1,"message":"1225","line":40,"column":46,"nodeType":"1226","messageId":"1227","endLine":40,"endColumn":49,"suggestions":"1408"},{"ruleId":"1224","severity":1,"message":"1225","line":41,"column":46,"nodeType":"1226","messageId":"1227","endLine":41,"endColumn":49,"suggestions":"1409"},{"ruleId":"1224","severity":1,"message":"1225","line":56,"column":43,"nodeType":"1226","messageId":"1227","endLine":56,"endColumn":46,"suggestions":"1410"},{"ruleId":"1224","severity":1,"message":"1225","line":92,"column":42,"nodeType":"1226","messageId":"1227","endLine":92,"endColumn":45,"suggestions":"1411"},{"ruleId":"1224","severity":1,"message":"1225","line":97,"column":21,"nodeType":"1226","messageId":"1227","endLine":97,"endColumn":24,"suggestions":"1412"},{"ruleId":"1220","severity":1,"message":"1413","line":259,"column":9,"nodeType":"1222","messageId":"1223","endLine":259,"endColumn":25},{"ruleId":"1220","severity":1,"message":"1414","line":2,"column":8,"nodeType":"1222","messageId":"1223","endLine":2,"endColumn":14},{"ruleId":"1224","severity":1,"message":"1225","line":537,"column":27,"nodeType":"1226","messageId":"1227","endLine":537,"endColumn":30,"suggestions":"1415"},{"ruleId":"1224","severity":1,"message":"1225","line":557,"column":38,"nodeType":"1226","messageId":"1227","endLine":557,"endColumn":41,"suggestions":"1416"},{"ruleId":"1224","severity":1,"message":"1225","line":589,"column":30,"nodeType":"1226","messageId":"1227","endLine":589,"endColumn":33,"suggestions":"1417"},{"ruleId":"1224","severity":1,"message":"1225","line":592,"column":34,"nodeType":"1226","messageId":"1227","endLine":592,"endColumn":37,"suggestions":"1418"},{"ruleId":"1224","severity":1,"message":"1225","line":7,"column":23,"nodeType":"1226","messageId":"1227","endLine":7,"endColumn":26,"suggestions":"1419"},{"ruleId":"1224","severity":1,"message":"1225","line":19,"column":42,"nodeType":"1226","messageId":"1227","endLine":19,"endColumn":45,"suggestions":"1420"},{"ruleId":"1220","severity":1,"message":"1421","line":2,"column":17,"nodeType":"1222","messageId":"1223","endLine":2,"endColumn":26},{"ruleId":"1224","severity":1,"message":"1225","line":44,"column":48,"nodeType":"1226","messageId":"1227","endLine":44,"endColumn":51,"suggestions":"1422"},{"ruleId":"1224","severity":1,"message":"1225","line":50,"column":21,"nodeType":"1226","messageId":"1227","endLine":50,"endColumn":24,"suggestions":"1423"},{"ruleId":"1224","severity":1,"message":"1225","line":74,"column":36,"nodeType":"1226","messageId":"1227","endLine":74,"endColumn":39,"suggestions":"1424"},{"ruleId":"1220","severity":1,"message":"1243","line":18,"column":3,"nodeType":"1222","messageId":"1223","endLine":18,"endColumn":20},{"ruleId":"1224","severity":1,"message":"1225","line":133,"column":73,"nodeType":"1226","messageId":"1227","endLine":133,"endColumn":76,"suggestions":"1425"},{"ruleId":"1224","severity":1,"message":"1225","line":154,"column":45,"nodeType":"1226","messageId":"1227","endLine":154,"endColumn":48,"suggestions":"1426"},{"ruleId":"1224","severity":1,"message":"1225","line":242,"column":45,"nodeType":"1226","messageId":"1227","endLine":242,"endColumn":48,"suggestions":"1427"},{"ruleId":"1224","severity":1,"message":"1225","line":255,"column":22,"nodeType":"1226","messageId":"1227","endLine":255,"endColumn":25,"suggestions":"1428"},{"ruleId":"1224","severity":1,"message":"1225","line":258,"column":22,"nodeType":"1226","messageId":"1227","endLine":258,"endColumn":25,"suggestions":"1429"},{"ruleId":"1224","severity":1,"message":"1225","line":316,"column":46,"nodeType":"1226","messageId":"1227","endLine":316,"endColumn":49,"suggestions":"1430"},{"ruleId":"1224","severity":1,"message":"1225","line":11,"column":50,"nodeType":"1226","messageId":"1227","endLine":11,"endColumn":53,"suggestions":"1431"},{"ruleId":"1224","severity":1,"message":"1225","line":15,"column":48,"nodeType":"1226","messageId":"1227","endLine":15,"endColumn":51,"suggestions":"1432"},{"ruleId":"1224","severity":1,"message":"1225","line":22,"column":44,"nodeType":"1226","messageId":"1227","endLine":22,"endColumn":47,"suggestions":"1433"},{"ruleId":"1224","severity":1,"message":"1225","line":25,"column":21,"nodeType":"1226","messageId":"1227","endLine":25,"endColumn":24,"suggestions":"1434"},{"ruleId":"1224","severity":1,"message":"1225","line":34,"column":37,"nodeType":"1226","messageId":"1227","endLine":34,"endColumn":40,"suggestions":"1435"},{"ruleId":"1224","severity":1,"message":"1225","line":41,"column":17,"nodeType":"1226","messageId":"1227","endLine":41,"endColumn":20,"suggestions":"1436"},{"ruleId":"1220","severity":1,"message":"1437","line":9,"column":3,"nodeType":"1222","messageId":"1223","endLine":9,"endColumn":17},{"ruleId":"1220","severity":1,"message":"1421","line":20,"column":10,"nodeType":"1222","messageId":"1223","endLine":20,"endColumn":19},{"ruleId":"1224","severity":1,"message":"1225","line":41,"column":38,"nodeType":"1226","messageId":"1227","endLine":41,"endColumn":41,"suggestions":"1438"},{"ruleId":"1224","severity":1,"message":"1225","line":47,"column":37,"nodeType":"1226","messageId":"1227","endLine":47,"endColumn":40,"suggestions":"1439"},{"ruleId":"1224","severity":1,"message":"1225","line":142,"column":44,"nodeType":"1226","messageId":"1227","endLine":142,"endColumn":47,"suggestions":"1440"},{"ruleId":"1224","severity":1,"message":"1225","line":172,"column":33,"nodeType":"1226","messageId":"1227","endLine":172,"endColumn":36,"suggestions":"1441"},{"ruleId":"1224","severity":1,"message":"1225","line":173,"column":31,"nodeType":"1226","messageId":"1227","endLine":173,"endColumn":34,"suggestions":"1442"},{"ruleId":"1224","severity":1,"message":"1225","line":199,"column":33,"nodeType":"1226","messageId":"1227","endLine":199,"endColumn":36,"suggestions":"1443"},{"ruleId":"1224","severity":1,"message":"1225","line":44,"column":28,"nodeType":"1226","messageId":"1227","endLine":44,"endColumn":31,"suggestions":"1444"},{"ruleId":"1224","severity":1,"message":"1225","line":52,"column":21,"nodeType":"1226","messageId":"1227","endLine":52,"endColumn":24,"suggestions":"1445"},{"ruleId":"1224","severity":1,"message":"1225","line":162,"column":54,"nodeType":"1226","messageId":"1227","endLine":162,"endColumn":57,"suggestions":"1446"},{"ruleId":"1220","severity":1,"message":"1447","line":49,"column":10,"nodeType":"1222","messageId":"1223","endLine":49,"endColumn":22},{"ruleId":"1220","severity":1,"message":"1448","line":51,"column":8,"nodeType":"1222","messageId":"1223","endLine":51,"endColumn":15},{"ruleId":"1224","severity":1,"message":"1225","line":119,"column":44,"nodeType":"1226","messageId":"1227","endLine":119,"endColumn":47,"suggestions":"1449"},{"ruleId":"1224","severity":1,"message":"1225","line":125,"column":38,"nodeType":"1226","messageId":"1227","endLine":125,"endColumn":41,"suggestions":"1450"},{"ruleId":"1224","severity":1,"message":"1225","line":132,"column":49,"nodeType":"1226","messageId":"1227","endLine":132,"endColumn":52,"suggestions":"1451"},{"ruleId":"1224","severity":1,"message":"1225","line":140,"column":21,"nodeType":"1226","messageId":"1227","endLine":140,"endColumn":24,"suggestions":"1452"},{"ruleId":"1224","severity":1,"message":"1225","line":196,"column":42,"nodeType":"1226","messageId":"1227","endLine":196,"endColumn":45,"suggestions":"1453"},{"ruleId":"1224","severity":1,"message":"1225","line":246,"column":24,"nodeType":"1226","messageId":"1227","endLine":246,"endColumn":27,"suggestions":"1454"},{"ruleId":"1224","severity":1,"message":"1225","line":339,"column":44,"nodeType":"1226","messageId":"1227","endLine":339,"endColumn":47,"suggestions":"1455"},{"ruleId":"1224","severity":1,"message":"1225","line":349,"column":31,"nodeType":"1226","messageId":"1227","endLine":349,"endColumn":34,"suggestions":"1456"},{"ruleId":"1224","severity":1,"message":"1225","line":361,"column":44,"nodeType":"1226","messageId":"1227","endLine":361,"endColumn":47,"suggestions":"1457"},{"ruleId":"1224","severity":1,"message":"1225","line":361,"column":59,"nodeType":"1226","messageId":"1227","endLine":361,"endColumn":62,"suggestions":"1458"},{"ruleId":"1224","severity":1,"message":"1225","line":367,"column":41,"nodeType":"1226","messageId":"1227","endLine":367,"endColumn":44,"suggestions":"1459"},{"ruleId":"1224","severity":1,"message":"1225","line":392,"column":35,"nodeType":"1226","messageId":"1227","endLine":392,"endColumn":38,"suggestions":"1460"},{"ruleId":"1224","severity":1,"message":"1225","line":491,"column":37,"nodeType":"1226","messageId":"1227","endLine":491,"endColumn":40,"suggestions":"1461"},{"ruleId":"1224","severity":1,"message":"1225","line":135,"column":40,"nodeType":"1226","messageId":"1227","endLine":135,"endColumn":43,"suggestions":"1462"},{"ruleId":"1224","severity":1,"message":"1225","line":237,"column":33,"nodeType":"1226","messageId":"1227","endLine":237,"endColumn":36,"suggestions":"1463"},{"ruleId":"1224","severity":1,"message":"1225","line":13,"column":37,"nodeType":"1226","messageId":"1227","endLine":13,"endColumn":40,"suggestions":"1464"},{"ruleId":"1224","severity":1,"message":"1225","line":20,"column":17,"nodeType":"1226","messageId":"1227","endLine":20,"endColumn":20,"suggestions":"1465"},{"ruleId":"1224","severity":1,"message":"1225","line":12,"column":46,"nodeType":"1226","messageId":"1227","endLine":12,"endColumn":49,"suggestions":"1466"},{"ruleId":"1224","severity":1,"message":"1225","line":24,"column":36,"nodeType":"1226","messageId":"1227","endLine":24,"endColumn":39,"suggestions":"1467"},{"ruleId":"1224","severity":1,"message":"1225","line":27,"column":21,"nodeType":"1226","messageId":"1227","endLine":27,"endColumn":24,"suggestions":"1468"},{"ruleId":"1224","severity":1,"message":"1225","line":36,"column":37,"nodeType":"1226","messageId":"1227","endLine":36,"endColumn":40,"suggestions":"1469"},{"ruleId":"1224","severity":1,"message":"1225","line":43,"column":17,"nodeType":"1226","messageId":"1227","endLine":43,"endColumn":20,"suggestions":"1470"},{"ruleId":"1224","severity":1,"message":"1225","line":14,"column":44,"nodeType":"1226","messageId":"1227","endLine":14,"endColumn":47,"suggestions":"1471"},{"ruleId":"1224","severity":1,"message":"1225","line":18,"column":51,"nodeType":"1226","messageId":"1227","endLine":18,"endColumn":54,"suggestions":"1472"},{"ruleId":"1224","severity":1,"message":"1225","line":25,"column":48,"nodeType":"1226","messageId":"1227","endLine":25,"endColumn":51,"suggestions":"1473"},{"ruleId":"1224","severity":1,"message":"1225","line":28,"column":21,"nodeType":"1226","messageId":"1227","endLine":28,"endColumn":24,"suggestions":"1474"},{"ruleId":"1224","severity":1,"message":"1225","line":37,"column":37,"nodeType":"1226","messageId":"1227","endLine":37,"endColumn":40,"suggestions":"1475"},{"ruleId":"1224","severity":1,"message":"1225","line":44,"column":17,"nodeType":"1226","messageId":"1227","endLine":44,"endColumn":20,"suggestions":"1476"},{"ruleId":"1224","severity":1,"message":"1225","line":13,"column":37,"nodeType":"1226","messageId":"1227","endLine":13,"endColumn":40,"suggestions":"1477"},{"ruleId":"1224","severity":1,"message":"1225","line":20,"column":17,"nodeType":"1226","messageId":"1227","endLine":20,"endColumn":20,"suggestions":"1478"},{"ruleId":"1224","severity":1,"message":"1225","line":16,"column":37,"nodeType":"1226","messageId":"1227","endLine":16,"endColumn":40,"suggestions":"1479"},{"ruleId":"1224","severity":1,"message":"1225","line":27,"column":40,"nodeType":"1226","messageId":"1227","endLine":27,"endColumn":43,"suggestions":"1480"},{"ruleId":"1224","severity":1,"message":"1225","line":30,"column":31,"nodeType":"1226","messageId":"1227","endLine":30,"endColumn":34,"suggestions":"1481"},{"ruleId":"1224","severity":1,"message":"1225","line":84,"column":33,"nodeType":"1226","messageId":"1227","endLine":84,"endColumn":36,"suggestions":"1482"},{"ruleId":"1224","severity":1,"message":"1225","line":39,"column":38,"nodeType":"1226","messageId":"1227","endLine":39,"endColumn":41,"suggestions":"1483"},{"ruleId":"1224","severity":1,"message":"1225","line":56,"column":17,"nodeType":"1226","messageId":"1227","endLine":56,"endColumn":20,"suggestions":"1484"},{"ruleId":"1224","severity":1,"message":"1225","line":61,"column":40,"nodeType":"1226","messageId":"1227","endLine":61,"endColumn":43,"suggestions":"1485"},{"ruleId":"1224","severity":1,"message":"1225","line":64,"column":32,"nodeType":"1226","messageId":"1227","endLine":64,"endColumn":35,"suggestions":"1486"},{"ruleId":"1224","severity":1,"message":"1225","line":109,"column":33,"nodeType":"1226","messageId":"1227","endLine":109,"endColumn":36,"suggestions":"1487"},{"ruleId":"1224","severity":1,"message":"1225","line":12,"column":44,"nodeType":"1226","messageId":"1227","endLine":12,"endColumn":47,"suggestions":"1488"},{"ruleId":"1224","severity":1,"message":"1225","line":13,"column":50,"nodeType":"1226","messageId":"1227","endLine":13,"endColumn":53,"suggestions":"1489"},{"ruleId":"1224","severity":1,"message":"1225","line":18,"column":41,"nodeType":"1226","messageId":"1227","endLine":18,"endColumn":44,"suggestions":"1490"},{"ruleId":"1224","severity":1,"message":"1225","line":25,"column":34,"nodeType":"1226","messageId":"1227","endLine":25,"endColumn":37,"suggestions":"1491"},{"ruleId":"1224","severity":1,"message":"1225","line":28,"column":21,"nodeType":"1226","messageId":"1227","endLine":28,"endColumn":24,"suggestions":"1492"},{"ruleId":"1224","severity":1,"message":"1225","line":37,"column":61,"nodeType":"1226","messageId":"1227","endLine":37,"endColumn":64,"suggestions":"1493"},{"ruleId":"1224","severity":1,"message":"1225","line":38,"column":50,"nodeType":"1226","messageId":"1227","endLine":38,"endColumn":53,"suggestions":"1494"},{"ruleId":"1224","severity":1,"message":"1225","line":40,"column":21,"nodeType":"1226","messageId":"1227","endLine":40,"endColumn":24,"suggestions":"1495"},{"ruleId":"1224","severity":1,"message":"1225","line":50,"column":37,"nodeType":"1226","messageId":"1227","endLine":50,"endColumn":40,"suggestions":"1496"},{"ruleId":"1224","severity":1,"message":"1225","line":57,"column":17,"nodeType":"1226","messageId":"1227","endLine":57,"endColumn":20,"suggestions":"1497"},{"ruleId":"1224","severity":1,"message":"1225","line":13,"column":37,"nodeType":"1226","messageId":"1227","endLine":13,"endColumn":40,"suggestions":"1498"},{"ruleId":"1224","severity":1,"message":"1225","line":20,"column":17,"nodeType":"1226","messageId":"1227","endLine":20,"endColumn":20,"suggestions":"1499"},{"ruleId":"1220","severity":1,"message":"1500","line":4,"column":3,"nodeType":"1222","messageId":"1223","endLine":4,"endColumn":9},{"ruleId":"1224","severity":1,"message":"1225","line":52,"column":37,"nodeType":"1226","messageId":"1227","endLine":52,"endColumn":40,"suggestions":"1501"},{"ruleId":"1224","severity":1,"message":"1225","line":66,"column":21,"nodeType":"1226","messageId":"1227","endLine":66,"endColumn":24,"suggestions":"1502"},{"ruleId":"1224","severity":1,"message":"1225","line":128,"column":33,"nodeType":"1226","messageId":"1227","endLine":128,"endColumn":36,"suggestions":"1503"},{"ruleId":"1224","severity":1,"message":"1225","line":14,"column":41,"nodeType":"1226","messageId":"1227","endLine":14,"endColumn":44,"suggestions":"1504"},{"ruleId":"1224","severity":1,"message":"1225","line":42,"column":19,"nodeType":"1226","messageId":"1227","endLine":42,"endColumn":22,"suggestions":"1505"},{"ruleId":"1224","severity":1,"message":"1225","line":163,"column":19,"nodeType":"1226","messageId":"1227","endLine":163,"endColumn":22,"suggestions":"1506"},{"ruleId":"1224","severity":1,"message":"1225","line":187,"column":22,"nodeType":"1226","messageId":"1227","endLine":187,"endColumn":25,"suggestions":"1507"},{"ruleId":"1224","severity":1,"message":"1225","line":210,"column":23,"nodeType":"1226","messageId":"1227","endLine":210,"endColumn":26,"suggestions":"1508"},{"ruleId":"1224","severity":1,"message":"1225","line":13,"column":37,"nodeType":"1226","messageId":"1227","endLine":13,"endColumn":40,"suggestions":"1509"},{"ruleId":"1224","severity":1,"message":"1225","line":20,"column":17,"nodeType":"1226","messageId":"1227","endLine":20,"endColumn":20,"suggestions":"1510"},{"ruleId":"1220","severity":1,"message":"1511","line":13,"column":10,"nodeType":"1222","messageId":"1223","endLine":13,"endColumn":18},{"ruleId":"1224","severity":1,"message":"1225","line":13,"column":44,"nodeType":"1226","messageId":"1227","endLine":13,"endColumn":47,"suggestions":"1512"},{"ruleId":"1224","severity":1,"message":"1225","line":24,"column":68,"nodeType":"1226","messageId":"1227","endLine":24,"endColumn":71,"suggestions":"1513"},{"ruleId":"1224","severity":1,"message":"1225","line":24,"column":76,"nodeType":"1226","messageId":"1227","endLine":24,"endColumn":79,"suggestions":"1514"},{"ruleId":"1224","severity":1,"message":"1225","line":27,"column":21,"nodeType":"1226","messageId":"1227","endLine":27,"endColumn":24,"suggestions":"1515"},{"ruleId":"1220","severity":1,"message":"1516","line":111,"column":10,"nodeType":"1222","messageId":"1223","endLine":111,"endColumn":24},{"ruleId":"1224","severity":1,"message":"1225","line":118,"column":27,"nodeType":"1226","messageId":"1227","endLine":118,"endColumn":30,"suggestions":"1517"},{"ruleId":"1220","severity":1,"message":"1518","line":2,"column":8,"nodeType":"1222","messageId":"1223","endLine":2,"endColumn":14},{"ruleId":"1220","severity":1,"message":"1519","line":6,"column":10,"nodeType":"1222","messageId":"1223","endLine":6,"endColumn":26},{"ruleId":"1224","severity":1,"message":"1225","line":157,"column":34,"nodeType":"1226","messageId":"1227","endLine":157,"endColumn":37,"suggestions":"1520"},{"ruleId":"1220","severity":1,"message":"1521","line":26,"column":11,"nodeType":"1222","messageId":"1223","endLine":26,"endColumn":23},{"ruleId":"1220","severity":1,"message":"1522","line":31,"column":11,"nodeType":"1222","messageId":"1223","endLine":31,"endColumn":17},{"ruleId":"1224","severity":1,"message":"1225","line":39,"column":14,"nodeType":"1226","messageId":"1227","endLine":39,"endColumn":17,"suggestions":"1523"},{"ruleId":"1224","severity":1,"message":"1225","line":40,"column":24,"nodeType":"1226","messageId":"1227","endLine":40,"endColumn":27,"suggestions":"1524"},{"ruleId":"1224","severity":1,"message":"1225","line":148,"column":44,"nodeType":"1226","messageId":"1227","endLine":148,"endColumn":47,"suggestions":"1525"},{"ruleId":"1224","severity":1,"message":"1225","line":153,"column":52,"nodeType":"1226","messageId":"1227","endLine":153,"endColumn":55,"suggestions":"1526"},{"ruleId":"1224","severity":1,"message":"1225","line":156,"column":39,"nodeType":"1226","messageId":"1227","endLine":156,"endColumn":42,"suggestions":"1527"},{"ruleId":"1224","severity":1,"message":"1225","line":212,"column":33,"nodeType":"1226","messageId":"1227","endLine":212,"endColumn":36,"suggestions":"1528"},{"ruleId":"1224","severity":1,"message":"1225","line":241,"column":39,"nodeType":"1226","messageId":"1227","endLine":241,"endColumn":42,"suggestions":"1529"},{"ruleId":"1224","severity":1,"message":"1225","line":246,"column":48,"nodeType":"1226","messageId":"1227","endLine":246,"endColumn":51,"suggestions":"1530"},{"ruleId":"1224","severity":1,"message":"1225","line":249,"column":34,"nodeType":"1226","messageId":"1227","endLine":249,"endColumn":37,"suggestions":"1531"},{"ruleId":"1224","severity":1,"message":"1225","line":302,"column":33,"nodeType":"1226","messageId":"1227","endLine":302,"endColumn":36,"suggestions":"1532"},{"ruleId":"1224","severity":1,"message":"1225","line":84,"column":40,"nodeType":"1226","messageId":"1227","endLine":84,"endColumn":43,"suggestions":"1533"},{"ruleId":"1224","severity":1,"message":"1225","line":85,"column":35,"nodeType":"1226","messageId":"1227","endLine":85,"endColumn":38,"suggestions":"1534"},{"ruleId":"1224","severity":1,"message":"1225","line":339,"column":62,"nodeType":"1226","messageId":"1227","endLine":339,"endColumn":65,"suggestions":"1535"},{"ruleId":"1224","severity":1,"message":"1225","line":350,"column":67,"nodeType":"1226","messageId":"1227","endLine":350,"endColumn":70,"suggestions":"1536"},{"ruleId":"1224","severity":1,"message":"1225","line":365,"column":67,"nodeType":"1226","messageId":"1227","endLine":365,"endColumn":70,"suggestions":"1537"},{"ruleId":"1224","severity":1,"message":"1225","line":383,"column":41,"nodeType":"1226","messageId":"1227","endLine":383,"endColumn":44,"suggestions":"1538"},{"ruleId":"1224","severity":1,"message":"1225","line":404,"column":29,"nodeType":"1226","messageId":"1227","endLine":404,"endColumn":32,"suggestions":"1539"},{"ruleId":"1224","severity":1,"message":"1225","line":437,"column":29,"nodeType":"1226","messageId":"1227","endLine":437,"endColumn":32,"suggestions":"1540"},{"ruleId":"1224","severity":1,"message":"1225","line":468,"column":29,"nodeType":"1226","messageId":"1227","endLine":468,"endColumn":32,"suggestions":"1541"},{"ruleId":"1224","severity":1,"message":"1225","line":117,"column":52,"nodeType":"1226","messageId":"1227","endLine":117,"endColumn":55,"suggestions":"1542"},{"ruleId":"1224","severity":1,"message":"1225","line":203,"column":33,"nodeType":"1226","messageId":"1227","endLine":203,"endColumn":36,"suggestions":"1543"},{"ruleId":"1224","severity":1,"message":"1225","line":215,"column":46,"nodeType":"1226","messageId":"1227","endLine":215,"endColumn":49,"suggestions":"1544"},{"ruleId":"1224","severity":1,"message":"1225","line":215,"column":61,"nodeType":"1226","messageId":"1227","endLine":215,"endColumn":64,"suggestions":"1545"},{"ruleId":"1224","severity":1,"message":"1225","line":221,"column":43,"nodeType":"1226","messageId":"1227","endLine":221,"endColumn":46,"suggestions":"1546"},{"ruleId":"1224","severity":1,"message":"1225","line":251,"column":35,"nodeType":"1226","messageId":"1227","endLine":251,"endColumn":38,"suggestions":"1547"},{"ruleId":"1220","severity":1,"message":"1548","line":36,"column":36,"nodeType":"1222","messageId":"1223","endLine":36,"endColumn":43},{"ruleId":"1224","severity":1,"message":"1225","line":52,"column":10,"nodeType":"1226","messageId":"1227","endLine":52,"endColumn":13,"suggestions":"1549"},{"ruleId":"1224","severity":1,"message":"1225","line":72,"column":32,"nodeType":"1226","messageId":"1227","endLine":72,"endColumn":35,"suggestions":"1550"},{"ruleId":"1224","severity":1,"message":"1225","line":155,"column":32,"nodeType":"1226","messageId":"1227","endLine":155,"endColumn":35,"suggestions":"1551"},{"ruleId":"1224","severity":1,"message":"1225","line":255,"column":26,"nodeType":"1226","messageId":"1227","endLine":255,"endColumn":29,"suggestions":"1552"},{"ruleId":"1224","severity":1,"message":"1225","line":352,"column":21,"nodeType":"1226","messageId":"1227","endLine":352,"endColumn":24,"suggestions":"1553"},{"ruleId":"1220","severity":1,"message":"1554","line":26,"column":32,"nodeType":"1222","messageId":"1223","endLine":26,"endColumn":49},{"ruleId":"1220","severity":1,"message":"1555","line":302,"column":9,"nodeType":"1222","messageId":"1223","endLine":302,"endColumn":21},{"ruleId":"1220","severity":1,"message":"1556","line":335,"column":9,"nodeType":"1222","messageId":"1223","endLine":335,"endColumn":27},{"ruleId":"1224","severity":1,"message":"1225","line":461,"column":31,"nodeType":"1226","messageId":"1227","endLine":461,"endColumn":34,"suggestions":"1557"},{"ruleId":"1220","severity":1,"message":"1558","line":424,"column":11,"nodeType":"1222","messageId":"1223","endLine":424,"endColumn":13},{"ruleId":"1224","severity":1,"message":"1225","line":119,"column":32,"nodeType":"1226","messageId":"1227","endLine":119,"endColumn":35,"suggestions":"1559"},{"ruleId":"1224","severity":1,"message":"1225","line":126,"column":41,"nodeType":"1226","messageId":"1227","endLine":126,"endColumn":44,"suggestions":"1560"},{"ruleId":"1220","severity":1,"message":"1561","line":22,"column":8,"nodeType":"1222","messageId":"1223","endLine":22,"endColumn":17},{"ruleId":"1224","severity":1,"message":"1225","line":193,"column":53,"nodeType":"1226","messageId":"1227","endLine":193,"endColumn":56,"suggestions":"1562"},{"ruleId":"1224","severity":1,"message":"1225","line":265,"column":42,"nodeType":"1226","messageId":"1227","endLine":265,"endColumn":45,"suggestions":"1563"},{"ruleId":"1220","severity":1,"message":"1564","line":1,"column":10,"nodeType":"1222","messageId":"1223","endLine":1,"endColumn":13},{"ruleId":"1220","severity":1,"message":"1565","line":1,"column":40,"nodeType":"1222","messageId":"1223","endLine":1,"endColumn":45},{"ruleId":"1224","severity":1,"message":"1225","line":33,"column":54,"nodeType":"1226","messageId":"1227","endLine":33,"endColumn":57,"suggestions":"1566"},{"ruleId":"1220","severity":1,"message":"1567","line":11,"column":8,"nodeType":"1222","messageId":"1223","endLine":11,"endColumn":12},{"ruleId":"1224","severity":1,"message":"1225","line":28,"column":52,"nodeType":"1226","messageId":"1227","endLine":28,"endColumn":55,"suggestions":"1568"},{"ruleId":"1224","severity":1,"message":"1225","line":47,"column":24,"nodeType":"1226","messageId":"1227","endLine":47,"endColumn":27,"suggestions":"1569"},{"ruleId":"1224","severity":1,"message":"1225","line":54,"column":14,"nodeType":"1226","messageId":"1227","endLine":54,"endColumn":17,"suggestions":"1570"},{"ruleId":"1224","severity":1,"message":"1225","line":55,"column":12,"nodeType":"1226","messageId":"1227","endLine":55,"endColumn":15,"suggestions":"1571"},{"ruleId":"1224","severity":1,"message":"1225","line":56,"column":18,"nodeType":"1226","messageId":"1227","endLine":56,"endColumn":21,"suggestions":"1572"},{"ruleId":"1224","severity":1,"message":"1225","line":57,"column":17,"nodeType":"1226","messageId":"1227","endLine":57,"endColumn":20,"suggestions":"1573"},{"ruleId":"1224","severity":1,"message":"1225","line":77,"column":60,"nodeType":"1226","messageId":"1227","endLine":77,"endColumn":63,"suggestions":"1574"},{"ruleId":"1224","severity":1,"message":"1225","line":78,"column":46,"nodeType":"1226","messageId":"1227","endLine":78,"endColumn":49,"suggestions":"1575"},{"ruleId":"1224","severity":1,"message":"1225","line":145,"column":14,"nodeType":"1226","messageId":"1227","endLine":145,"endColumn":17,"suggestions":"1576"},{"ruleId":"1224","severity":1,"message":"1225","line":151,"column":21,"nodeType":"1226","messageId":"1227","endLine":151,"endColumn":24,"suggestions":"1577"},{"ruleId":"1224","severity":1,"message":"1225","line":181,"column":16,"nodeType":"1226","messageId":"1227","endLine":181,"endColumn":19,"suggestions":"1578"},{"ruleId":"1224","severity":1,"message":"1225","line":199,"column":19,"nodeType":"1226","messageId":"1227","endLine":199,"endColumn":22,"suggestions":"1579"},{"ruleId":"1224","severity":1,"message":"1225","line":252,"column":26,"nodeType":"1226","messageId":"1227","endLine":252,"endColumn":29,"suggestions":"1580"},{"ruleId":"1224","severity":1,"message":"1225","line":256,"column":26,"nodeType":"1226","messageId":"1227","endLine":256,"endColumn":29,"suggestions":"1581"},{"ruleId":"1224","severity":1,"message":"1225","line":410,"column":39,"nodeType":"1226","messageId":"1227","endLine":410,"endColumn":42,"suggestions":"1582"},{"ruleId":"1220","severity":1,"message":"1565","line":5,"column":3,"nodeType":"1222","messageId":"1223","endLine":5,"endColumn":8},{"ruleId":"1224","severity":1,"message":"1225","line":40,"column":54,"nodeType":"1226","messageId":"1227","endLine":40,"endColumn":57,"suggestions":"1583"},{"ruleId":"1224","severity":1,"message":"1225","line":70,"column":35,"nodeType":"1226","messageId":"1227","endLine":70,"endColumn":38,"suggestions":"1584"},{"ruleId":"1224","severity":1,"message":"1225","line":84,"column":62,"nodeType":"1226","messageId":"1227","endLine":84,"endColumn":65,"suggestions":"1585"},{"ruleId":"1224","severity":1,"message":"1225","line":97,"column":33,"nodeType":"1226","messageId":"1227","endLine":97,"endColumn":36,"suggestions":"1586"},{"ruleId":"1224","severity":1,"message":"1225","line":116,"column":41,"nodeType":"1226","messageId":"1227","endLine":116,"endColumn":44,"suggestions":"1587"},{"ruleId":"1224","severity":1,"message":"1225","line":137,"column":29,"nodeType":"1226","messageId":"1227","endLine":137,"endColumn":32,"suggestions":"1588"},{"ruleId":"1224","severity":1,"message":"1225","line":170,"column":29,"nodeType":"1226","messageId":"1227","endLine":170,"endColumn":32,"suggestions":"1589"},{"ruleId":"1224","severity":1,"message":"1225","line":199,"column":29,"nodeType":"1226","messageId":"1227","endLine":199,"endColumn":32,"suggestions":"1590"},{"ruleId":"1224","severity":1,"message":"1225","line":86,"column":54,"nodeType":"1226","messageId":"1227","endLine":86,"endColumn":57,"suggestions":"1591"},{"ruleId":"1224","severity":1,"message":"1225","line":140,"column":41,"nodeType":"1226","messageId":"1227","endLine":140,"endColumn":44,"suggestions":"1592"},{"ruleId":"1224","severity":1,"message":"1225","line":163,"column":52,"nodeType":"1226","messageId":"1227","endLine":163,"endColumn":55,"suggestions":"1593"},{"ruleId":"1224","severity":1,"message":"1225","line":249,"column":47,"nodeType":"1226","messageId":"1227","endLine":249,"endColumn":50,"suggestions":"1594"},{"ruleId":"1224","severity":1,"message":"1225","line":272,"column":22,"nodeType":"1226","messageId":"1227","endLine":272,"endColumn":25,"suggestions":"1595"},{"ruleId":"1224","severity":1,"message":"1225","line":292,"column":37,"nodeType":"1226","messageId":"1227","endLine":292,"endColumn":40,"suggestions":"1596"},{"ruleId":"1224","severity":1,"message":"1225","line":301,"column":29,"nodeType":"1226","messageId":"1227","endLine":301,"endColumn":32,"suggestions":"1597"},{"ruleId":"1224","severity":1,"message":"1225","line":313,"column":37,"nodeType":"1226","messageId":"1227","endLine":313,"endColumn":40,"suggestions":"1598"},{"ruleId":"1224","severity":1,"message":"1225","line":359,"column":37,"nodeType":"1226","messageId":"1227","endLine":359,"endColumn":40,"suggestions":"1599"},{"ruleId":"1224","severity":1,"message":"1225","line":417,"column":33,"nodeType":"1226","messageId":"1227","endLine":417,"endColumn":36,"suggestions":"1600"},{"ruleId":"1224","severity":1,"message":"1225","line":429,"column":46,"nodeType":"1226","messageId":"1227","endLine":429,"endColumn":49,"suggestions":"1601"},{"ruleId":"1224","severity":1,"message":"1225","line":429,"column":61,"nodeType":"1226","messageId":"1227","endLine":429,"endColumn":64,"suggestions":"1602"},{"ruleId":"1224","severity":1,"message":"1225","line":435,"column":43,"nodeType":"1226","messageId":"1227","endLine":435,"endColumn":46,"suggestions":"1603"},{"ruleId":"1224","severity":1,"message":"1225","line":465,"column":35,"nodeType":"1226","messageId":"1227","endLine":465,"endColumn":38,"suggestions":"1604"},{"ruleId":"1224","severity":1,"message":"1225","line":15,"column":41,"nodeType":"1226","messageId":"1227","endLine":15,"endColumn":44,"suggestions":"1605"},{"ruleId":"1220","severity":1,"message":"1606","line":16,"column":18,"nodeType":"1222","messageId":"1223","endLine":16,"endColumn":27},{"ruleId":"1224","severity":1,"message":"1225","line":48,"column":47,"nodeType":"1226","messageId":"1227","endLine":48,"endColumn":50,"suggestions":"1607"},{"ruleId":"1224","severity":1,"message":"1225","line":51,"column":35,"nodeType":"1226","messageId":"1227","endLine":51,"endColumn":38,"suggestions":"1608"},{"ruleId":"1220","severity":1,"message":"1609","line":20,"column":7,"nodeType":"1222","messageId":"1223","endLine":20,"endColumn":16},{"ruleId":"1224","severity":1,"message":"1225","line":33,"column":41,"nodeType":"1226","messageId":"1227","endLine":33,"endColumn":44,"suggestions":"1610"},{"ruleId":"1224","severity":1,"message":"1225","line":38,"column":39,"nodeType":"1226","messageId":"1227","endLine":38,"endColumn":42,"suggestions":"1611"},{"ruleId":"1224","severity":1,"message":"1225","line":79,"column":45,"nodeType":"1226","messageId":"1227","endLine":79,"endColumn":48,"suggestions":"1612"},{"ruleId":"1224","severity":1,"message":"1225","line":82,"column":31,"nodeType":"1226","messageId":"1227","endLine":82,"endColumn":34,"suggestions":"1613"},{"ruleId":"1224","severity":1,"message":"1225","line":27,"column":14,"nodeType":"1226","messageId":"1227","endLine":27,"endColumn":17,"suggestions":"1614"},{"ruleId":"1224","severity":1,"message":"1225","line":28,"column":24,"nodeType":"1226","messageId":"1227","endLine":28,"endColumn":27,"suggestions":"1615"},{"ruleId":"1224","severity":1,"message":"1225","line":65,"column":14,"nodeType":"1226","messageId":"1227","endLine":65,"endColumn":17,"suggestions":"1616"},{"ruleId":"1224","severity":1,"message":"1225","line":67,"column":21,"nodeType":"1226","messageId":"1227","endLine":67,"endColumn":24,"suggestions":"1617"},{"ruleId":"1224","severity":1,"message":"1225","line":86,"column":27,"nodeType":"1226","messageId":"1227","endLine":86,"endColumn":30,"suggestions":"1618"},{"ruleId":"1224","severity":1,"message":"1225","line":240,"column":42,"nodeType":"1226","messageId":"1227","endLine":240,"endColumn":45,"suggestions":"1619"},{"ruleId":"1224","severity":1,"message":"1225","line":242,"column":26,"nodeType":"1226","messageId":"1227","endLine":242,"endColumn":29,"suggestions":"1620"},{"ruleId":"1224","severity":1,"message":"1225","line":28,"column":15,"nodeType":"1226","messageId":"1227","endLine":28,"endColumn":18,"suggestions":"1621"},{"ruleId":"1224","severity":1,"message":"1225","line":29,"column":24,"nodeType":"1226","messageId":"1227","endLine":29,"endColumn":27,"suggestions":"1622"},{"ruleId":"1224","severity":1,"message":"1225","line":73,"column":53,"nodeType":"1226","messageId":"1227","endLine":73,"endColumn":56,"suggestions":"1623"},{"ruleId":"1224","severity":1,"message":"1225","line":147,"column":38,"nodeType":"1226","messageId":"1227","endLine":147,"endColumn":41,"suggestions":"1624"},{"ruleId":"1224","severity":1,"message":"1225","line":152,"column":46,"nodeType":"1226","messageId":"1227","endLine":152,"endColumn":49,"suggestions":"1625"},{"ruleId":"1224","severity":1,"message":"1225","line":155,"column":33,"nodeType":"1226","messageId":"1227","endLine":155,"endColumn":36,"suggestions":"1626"},{"ruleId":"1224","severity":1,"message":"1225","line":208,"column":33,"nodeType":"1226","messageId":"1227","endLine":208,"endColumn":36,"suggestions":"1627"},{"ruleId":"1224","severity":1,"message":"1225","line":238,"column":39,"nodeType":"1226","messageId":"1227","endLine":238,"endColumn":42,"suggestions":"1628"},{"ruleId":"1224","severity":1,"message":"1225","line":243,"column":47,"nodeType":"1226","messageId":"1227","endLine":243,"endColumn":50,"suggestions":"1629"},{"ruleId":"1224","severity":1,"message":"1225","line":246,"column":33,"nodeType":"1226","messageId":"1227","endLine":246,"endColumn":36,"suggestions":"1630"},{"ruleId":"1224","severity":1,"message":"1225","line":299,"column":33,"nodeType":"1226","messageId":"1227","endLine":299,"endColumn":36,"suggestions":"1631"},{"ruleId":"1224","severity":1,"message":"1225","line":29,"column":15,"nodeType":"1226","messageId":"1227","endLine":29,"endColumn":18,"suggestions":"1632"},{"ruleId":"1224","severity":1,"message":"1225","line":66,"column":37,"nodeType":"1226","messageId":"1227","endLine":66,"endColumn":40,"suggestions":"1633"},{"ruleId":"1224","severity":1,"message":"1225","line":67,"column":35,"nodeType":"1226","messageId":"1227","endLine":67,"endColumn":38,"suggestions":"1634"},{"ruleId":"1224","severity":1,"message":"1225","line":202,"column":50,"nodeType":"1226","messageId":"1227","endLine":202,"endColumn":53,"suggestions":"1635"},{"ruleId":"1224","severity":1,"message":"1225","line":404,"column":24,"nodeType":"1226","messageId":"1227","endLine":404,"endColumn":27,"suggestions":"1636"},{"ruleId":"1224","severity":1,"message":"1225","line":17,"column":9,"nodeType":"1226","messageId":"1227","endLine":17,"endColumn":12,"suggestions":"1637"},{"ruleId":"1224","severity":1,"message":"1225","line":18,"column":13,"nodeType":"1226","messageId":"1227","endLine":18,"endColumn":16,"suggestions":"1638"},{"ruleId":"1224","severity":1,"message":"1225","line":31,"column":9,"nodeType":"1226","messageId":"1227","endLine":31,"endColumn":12,"suggestions":"1639"},{"ruleId":"1224","severity":1,"message":"1225","line":37,"column":44,"nodeType":"1226","messageId":"1227","endLine":37,"endColumn":47,"suggestions":"1640"},{"ruleId":"1224","severity":1,"message":"1225","line":60,"column":21,"nodeType":"1226","messageId":"1227","endLine":60,"endColumn":24,"suggestions":"1641"},{"ruleId":"1220","severity":1,"message":"1642","line":60,"column":26,"nodeType":"1222","messageId":"1223","endLine":60,"endColumn":39},{"ruleId":"1224","severity":1,"message":"1225","line":16,"column":29,"nodeType":"1226","messageId":"1227","endLine":16,"endColumn":32,"suggestions":"1643"},{"ruleId":"1220","severity":1,"message":"1229","line":1,"column":10,"nodeType":"1222","messageId":"1223","endLine":1,"endColumn":12},{"ruleId":"1220","severity":1,"message":"1518","line":17,"column":8,"nodeType":"1222","messageId":"1223","endLine":17,"endColumn":14},{"ruleId":"1224","severity":1,"message":"1225","line":176,"column":34,"nodeType":"1226","messageId":"1227","endLine":176,"endColumn":37,"suggestions":"1644"},{"ruleId":"1220","severity":1,"message":"1645","line":13,"column":8,"nodeType":"1222","messageId":"1223","endLine":13,"endColumn":19},{"ruleId":"1224","severity":1,"message":"1225","line":103,"column":34,"nodeType":"1226","messageId":"1227","endLine":103,"endColumn":37,"suggestions":"1646"},{"ruleId":"1224","severity":1,"message":"1225","line":107,"column":30,"nodeType":"1226","messageId":"1227","endLine":107,"endColumn":33,"suggestions":"1647"},{"ruleId":"1224","severity":1,"message":"1225","line":129,"column":64,"nodeType":"1226","messageId":"1227","endLine":129,"endColumn":67,"suggestions":"1648"},{"ruleId":"1220","severity":1,"message":"1649","line":23,"column":30,"nodeType":"1222","messageId":"1223","endLine":23,"endColumn":40},{"ruleId":"1224","severity":1,"message":"1225","line":184,"column":29,"nodeType":"1226","messageId":"1227","endLine":184,"endColumn":32,"suggestions":"1650"},{"ruleId":"1224","severity":1,"message":"1225","line":26,"column":14,"nodeType":"1226","messageId":"1227","endLine":26,"endColumn":17,"suggestions":"1651"},{"ruleId":"1224","severity":1,"message":"1225","line":44,"column":32,"nodeType":"1226","messageId":"1227","endLine":44,"endColumn":35,"suggestions":"1652"},"@typescript-eslint/no-unused-vars","'DEFAULT_CHAINID' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["1653","1654"],"'FC' is defined but never used.","'CalendarIcon' is defined but never used.",["1655","1656"],["1657","1658"],"'_payload' is defined but never used.",["1659","1660"],["1661","1662"],["1663","1664"],["1665","1666"],"'HTMLProps' is defined but never used.",["1667","1668"],["1669","1670"],["1671","1672"],"'props' is defined but never used.","'useColorModeValue' is defined but never used.","'_renderCurrentStep' is assigned a value but never used.",["1673","1674"],["1675","1676"],["1677","1678"],["1679","1680"],["1681","1682"],["1683","1684"],["1685","1686"],["1687","1688"],["1689","1690"],["1691","1692"],"'size' is assigned a value but never used.","'placeholder' is defined but never used.",["1693","1694"],["1695","1696"],["1697","1698"],["1699","1700"],["1701","1702"],["1703","1704"],["1705","1706"],["1707","1708"],["1709","1710"],["1711","1712"],["1713","1714"],["1715","1716"],["1717","1718"],["1719","1720"],["1721","1722"],["1723","1724"],["1725","1726"],["1727","1728"],["1729","1730"],["1731","1732"],["1733","1734"],["1735","1736"],["1737","1738"],["1739","1740"],["1741","1742"],["1743","1744"],["1745","1746"],["1747","1748"],["1749","1750"],["1751","1752"],["1753","1754"],["1755","1756"],["1757","1758"],"'useColorMode' is defined but never used.",["1759","1760"],["1761","1762"],["1763","1764"],["1765","1766"],["1767","1768"],["1769","1770"],["1771","1772"],["1773","1774"],["1775","1776"],["1777","1778"],["1779","1780"],["1781","1782"],["1783","1784"],["1785","1786"],["1787","1788"],["1789","1790"],["1791","1792"],"'_index' is defined but never used.",["1793","1794"],["1795","1796"],["1797","1798"],["1799","1800"],["1801","1802"],["1803","1804"],["1805","1806"],["1807","1808"],["1809","1810"],["1811","1812"],["1813","1814"],["1815","1816"],["1817","1818"],["1819","1820"],["1821","1822"],["1823","1824"],"'user' is defined but never used.",["1825","1826"],["1827","1828"],["1829","1830"],["1831","1832"],["1833","1834"],["1835","1836"],["1837","1838"],["1839","1840"],["1841","1842"],["1843","1844"],["1845","1846"],["1847","1848"],["1849","1850"],["1851","1852"],["1853","1854"],["1855","1856"],["1857","1858"],["1859","1860"],["1861","1862"],["1863","1864"],["1865","1866"],["1867","1868"],["1869","1870"],["1871","1872"],["1873","1874"],["1875","1876"],["1877","1878"],["1879","1880"],["1881","1882"],["1883","1884"],["1885","1886"],["1887","1888"],["1889","1890"],["1891","1892"],["1893","1894"],["1895","1896"],["1897","1898"],["1899","1900"],["1901","1902"],["1903","1904"],["1905","1906"],["1907","1908"],["1909","1910"],["1911","1912"],["1913","1914"],["1915","1916"],["1917","1918"],["1919","1920"],["1921","1922"],["1923","1924"],["1925","1926"],["1927","1928"],["1929","1930"],["1931","1932"],["1933","1934"],["1935","1936"],"'useCallback' is defined but never used.","'COMPETITION_STATUS' is defined but never used.",["1937","1938"],["1939","1940"],["1941","1942"],["1943","1944"],["1945","1946"],["1947","1948"],["1949","1950"],["1951","1952"],["1953","1954"],"'LoadingIcon' is defined but never used.",["1955","1956"],["1957","1958"],["1959","1960"],["1961","1962"],["1963","1964"],["1965","1966"],["1967","1968"],["1969","1970"],["1971","1972"],["1973","1974"],["1975","1976"],["1977","1978"],["1979","1980"],["1981","1982"],["1983","1984"],["1985","1986"],["1987","1988"],["1989","1990"],["1991","1992"],"'_renderLBPDetail' is assigned a value but never used.","'styles' is defined but never used.",["1993","1994"],["1995","1996"],["1997","1998"],["1999","2000"],["2001","2002"],["2003","2004"],"'useEffect' is defined but never used.",["2005","2006"],["2007","2008"],["2009","2010"],["2011","2012"],["2013","2014"],["2015","2016"],["2017","2018"],["2019","2020"],["2021","2022"],["2023","2024"],["2025","2026"],["2027","2028"],["2029","2030"],["2031","2032"],["2033","2034"],"'TableContainer' is defined but never used.",["2035","2036"],["2037","2038"],["2039","2040"],["2041","2042"],["2043","2044"],["2045","2046"],["2047","2048"],["2049","2050"],["2051","2052"],"'WarpBoxField' is defined but never used.","'Project' is defined but never used.",["2053","2054"],["2055","2056"],["2057","2058"],["2059","2060"],["2061","2062"],["2063","2064"],["2065","2066"],["2067","2068"],["2069","2070"],["2071","2072"],["2073","2074"],["2075","2076"],["2077","2078"],["2079","2080"],["2081","2082"],["2083","2084"],["2085","2086"],["2087","2088"],["2089","2090"],["2091","2092"],["2093","2094"],["2095","2096"],["2097","2098"],["2099","2100"],["2101","2102"],["2103","2104"],["2105","2106"],["2107","2108"],["2109","2110"],["2111","2112"],["2113","2114"],["2115","2116"],["2117","2118"],["2119","2120"],["2121","2122"],["2123","2124"],["2125","2126"],["2127","2128"],["2129","2130"],["2131","2132"],["2133","2134"],["2135","2136"],["2137","2138"],["2139","2140"],["2141","2142"],["2143","2144"],["2145","2146"],["2147","2148"],["2149","2150"],["2151","2152"],["2153","2154"],"'Avatar' is defined but never used.",["2155","2156"],["2157","2158"],["2159","2160"],["2161","2162"],["2163","2164"],["2165","2166"],["2167","2168"],["2169","2170"],["2171","2172"],["2173","2174"],"'response' is assigned a value but never used.",["2175","2176"],["2177","2178"],["2179","2180"],["2181","2182"],"'auctionNetwork' is assigned a value but never used.",["2183","2184"],"'moment' is defined but never used.","'EligibleTierEnum' is defined but never used.",["2185","2186"],"'IPermissions' is defined but never used.","'IGroup' is defined but never used.",["2187","2188"],["2189","2190"],["2191","2192"],["2193","2194"],["2195","2196"],["2197","2198"],["2199","2200"],["2201","2202"],["2203","2204"],["2205","2206"],["2207","2208"],["2209","2210"],["2211","2212"],["2213","2214"],["2215","2216"],["2217","2218"],["2219","2220"],["2221","2222"],["2223","2224"],["2225","2226"],["2227","2228"],["2229","2230"],["2231","2232"],["2233","2234"],["2235","2236"],"'Spinner' is defined but never used.",["2237","2238"],["2239","2240"],["2241","2242"],["2243","2244"],["2245","2246"],"'ref' is defined but never used.","'onHandleNext' is assigned a value but never used.","'minCollateralToken' is assigned a value but never used.",["2247","2248"],"'bg' is assigned a value but never used.",["2249","2250"],["2251","2252"],"'AppButton' is defined but never used.",["2253","2254"],["2255","2256"],"'Box' is defined but never used.","'Stack' is defined but never used.",["2257","2258"],"'Card' is defined but never used.",["2259","2260"],["2261","2262"],["2263","2264"],["2265","2266"],["2267","2268"],["2269","2270"],["2271","2272"],["2273","2274"],["2275","2276"],["2277","2278"],["2279","2280"],["2281","2282"],["2283","2284"],["2285","2286"],["2287","2288"],["2289","2290"],["2291","2292"],["2293","2294"],["2295","2296"],["2297","2298"],["2299","2300"],["2301","2302"],["2303","2304"],["2305","2306"],["2307","2308"],["2309","2310"],["2311","2312"],["2313","2314"],["2315","2316"],["2317","2318"],["2319","2320"],["2321","2322"],["2323","2324"],["2325","2326"],["2327","2328"],["2329","2330"],["2331","2332"],["2333","2334"],"'setSearch' is assigned a value but never used.",["2335","2336"],["2337","2338"],"'POOL_TYPE' is assigned a value but never used.",["2339","2340"],["2341","2342"],["2343","2344"],["2345","2346"],["2347","2348"],["2349","2350"],["2351","2352"],["2353","2354"],["2355","2356"],["2357","2358"],["2359","2360"],["2361","2362"],["2363","2364"],["2365","2366"],["2367","2368"],["2369","2370"],["2371","2372"],["2373","2374"],["2375","2376"],["2377","2378"],["2379","2380"],["2381","2382"],["2383","2384"],["2385","2386"],["2387","2388"],["2389","2390"],["2391","2392"],["2393","2394"],["2395","2396"],["2397","2398"],["2399","2400"],["2401","2402"],"'index' is defined but never used.",["2403","2404"],["2405","2406"],"'AppTextarea' is defined but never used.",["2407","2408"],["2409","2410"],["2411","2412"],"'ITokenomic' is defined but never used.",["2413","2414"],["2415","2416"],["2417","2418"],{"messageId":"2419","fix":"2420","desc":"2421"},{"messageId":"2422","fix":"2423","desc":"2424"},{"messageId":"2419","fix":"2425","desc":"2421"},{"messageId":"2422","fix":"2426","desc":"2424"},{"messageId":"2419","fix":"2427","desc":"2421"},{"messageId":"2422","fix":"2428","desc":"2424"},{"messageId":"2419","fix":"2429","desc":"2421"},{"messageId":"2422","fix":"2430","desc":"2424"},{"messageId":"2419","fix":"2431","desc":"2421"},{"messageId":"2422","fix":"2432","desc":"2424"},{"messageId":"2419","fix":"2433","desc":"2421"},{"messageId":"2422","fix":"2434","desc":"2424"},{"messageId":"2419","fix":"2435","desc":"2421"},{"messageId":"2422","fix":"2436","desc":"2424"},{"messageId":"2419","fix":"2437","desc":"2421"},{"messageId":"2422","fix":"2438","desc":"2424"},{"messageId":"2419","fix":"2439","desc":"2421"},{"messageId":"2422","fix":"2440","desc":"2424"},{"messageId":"2419","fix":"2441","desc":"2421"},{"messageId":"2422","fix":"2442","desc":"2424"},{"messageId":"2419","fix":"2443","desc":"2421"},{"messageId":"2422","fix":"2444","desc":"2424"},{"messageId":"2419","fix":"2445","desc":"2421"},{"messageId":"2422","fix":"2446","desc":"2424"},{"messageId":"2419","fix":"2447","desc":"2421"},{"messageId":"2422","fix":"2448","desc":"2424"},{"messageId":"2419","fix":"2449","desc":"2421"},{"messageId":"2422","fix":"2450","desc":"2424"},{"messageId":"2419","fix":"2451","desc":"2421"},{"messageId":"2422","fix":"2452","desc":"2424"},{"messageId":"2419","fix":"2453","desc":"2421"},{"messageId":"2422","fix":"2454","desc":"2424"},{"messageId":"2419","fix":"2455","desc":"2421"},{"messageId":"2422","fix":"2456","desc":"2424"},{"messageId":"2419","fix":"2457","desc":"2421"},{"messageId":"2422","fix":"2458","desc":"2424"},{"messageId":"2419","fix":"2459","desc":"2421"},{"messageId":"2422","fix":"2460","desc":"2424"},{"messageId":"2419","fix":"2461","desc":"2421"},{"messageId":"2422","fix":"2462","desc":"2424"},{"messageId":"2419","fix":"2463","desc":"2421"},{"messageId":"2422","fix":"2464","desc":"2424"},{"messageId":"2419","fix":"2465","desc":"2421"},{"messageId":"2422","fix":"2466","desc":"2424"},{"messageId":"2419","fix":"2467","desc":"2421"},{"messageId":"2422","fix":"2468","desc":"2424"},{"messageId":"2419","fix":"2469","desc":"2421"},{"messageId":"2422","fix":"2470","desc":"2424"},{"messageId":"2419","fix":"2471","desc":"2421"},{"messageId":"2422","fix":"2472","desc":"2424"},{"messageId":"2419","fix":"2473","desc":"2421"},{"messageId":"2422","fix":"2474","desc":"2424"},{"messageId":"2419","fix":"2475","desc":"2421"},{"messageId":"2422","fix":"2476","desc":"2424"},{"messageId":"2419","fix":"2477","desc":"2421"},{"messageId":"2422","fix":"2478","desc":"2424"},{"messageId":"2419","fix":"2479","desc":"2421"},{"messageId":"2422","fix":"2480","desc":"2424"},{"messageId":"2419","fix":"2481","desc":"2421"},{"messageId":"2422","fix":"2482","desc":"2424"},{"messageId":"2419","fix":"2483","desc":"2421"},{"messageId":"2422","fix":"2484","desc":"2424"},{"messageId":"2419","fix":"2485","desc":"2421"},{"messageId":"2422","fix":"2486","desc":"2424"},{"messageId":"2419","fix":"2487","desc":"2421"},{"messageId":"2422","fix":"2488","desc":"2424"},{"messageId":"2419","fix":"2489","desc":"2421"},{"messageId":"2422","fix":"2490","desc":"2424"},{"messageId":"2419","fix":"2491","desc":"2421"},{"messageId":"2422","fix":"2492","desc":"2424"},{"messageId":"2419","fix":"2493","desc":"2421"},{"messageId":"2422","fix":"2494","desc":"2424"},{"messageId":"2419","fix":"2495","desc":"2421"},{"messageId":"2422","fix":"2496","desc":"2424"},{"messageId":"2419","fix":"2497","desc":"2421"},{"messageId":"2422","fix":"2498","desc":"2424"},{"messageId":"2419","fix":"2499","desc":"2421"},{"messageId":"2422","fix":"2500","desc":"2424"},{"messageId":"2419","fix":"2501","desc":"2421"},{"messageId":"2422","fix":"2502","desc":"2424"},{"messageId":"2419","fix":"2503","desc":"2421"},{"messageId":"2422","fix":"2504","desc":"2424"},{"messageId":"2419","fix":"2505","desc":"2421"},{"messageId":"2422","fix":"2506","desc":"2424"},{"messageId":"2419","fix":"2507","desc":"2421"},{"messageId":"2422","fix":"2508","desc":"2424"},{"messageId":"2419","fix":"2509","desc":"2421"},{"messageId":"2422","fix":"2510","desc":"2424"},{"messageId":"2419","fix":"2511","desc":"2421"},{"messageId":"2422","fix":"2512","desc":"2424"},{"messageId":"2419","fix":"2513","desc":"2421"},{"messageId":"2422","fix":"2514","desc":"2424"},{"messageId":"2419","fix":"2515","desc":"2421"},{"messageId":"2422","fix":"2516","desc":"2424"},{"messageId":"2419","fix":"2517","desc":"2421"},{"messageId":"2422","fix":"2518","desc":"2424"},{"messageId":"2419","fix":"2519","desc":"2421"},{"messageId":"2422","fix":"2520","desc":"2424"},{"messageId":"2419","fix":"2521","desc":"2421"},{"messageId":"2422","fix":"2522","desc":"2424"},{"messageId":"2419","fix":"2523","desc":"2421"},{"messageId":"2422","fix":"2524","desc":"2424"},{"messageId":"2419","fix":"2525","desc":"2421"},{"messageId":"2422","fix":"2526","desc":"2424"},{"messageId":"2419","fix":"2527","desc":"2421"},{"messageId":"2422","fix":"2528","desc":"2424"},{"messageId":"2419","fix":"2529","desc":"2421"},{"messageId":"2422","fix":"2530","desc":"2424"},{"messageId":"2419","fix":"2531","desc":"2421"},{"messageId":"2422","fix":"2532","desc":"2424"},{"messageId":"2419","fix":"2533","desc":"2421"},{"messageId":"2422","fix":"2534","desc":"2424"},{"messageId":"2419","fix":"2535","desc":"2421"},{"messageId":"2422","fix":"2536","desc":"2424"},{"messageId":"2419","fix":"2537","desc":"2421"},{"messageId":"2422","fix":"2538","desc":"2424"},{"messageId":"2419","fix":"2539","desc":"2421"},{"messageId":"2422","fix":"2540","desc":"2424"},{"messageId":"2419","fix":"2541","desc":"2421"},{"messageId":"2422","fix":"2542","desc":"2424"},{"messageId":"2419","fix":"2543","desc":"2421"},{"messageId":"2422","fix":"2544","desc":"2424"},{"messageId":"2419","fix":"2545","desc":"2421"},{"messageId":"2422","fix":"2546","desc":"2424"},{"messageId":"2419","fix":"2547","desc":"2421"},{"messageId":"2422","fix":"2548","desc":"2424"},{"messageId":"2419","fix":"2549","desc":"2421"},{"messageId":"2422","fix":"2550","desc":"2424"},{"messageId":"2419","fix":"2551","desc":"2421"},{"messageId":"2422","fix":"2552","desc":"2424"},{"messageId":"2419","fix":"2553","desc":"2421"},{"messageId":"2422","fix":"2554","desc":"2424"},{"messageId":"2419","fix":"2555","desc":"2421"},{"messageId":"2422","fix":"2556","desc":"2424"},{"messageId":"2419","fix":"2557","desc":"2421"},{"messageId":"2422","fix":"2558","desc":"2424"},{"messageId":"2419","fix":"2559","desc":"2421"},{"messageId":"2422","fix":"2560","desc":"2424"},{"messageId":"2419","fix":"2561","desc":"2421"},{"messageId":"2422","fix":"2562","desc":"2424"},{"messageId":"2419","fix":"2563","desc":"2421"},{"messageId":"2422","fix":"2564","desc":"2424"},{"messageId":"2419","fix":"2565","desc":"2421"},{"messageId":"2422","fix":"2566","desc":"2424"},{"messageId":"2419","fix":"2567","desc":"2421"},{"messageId":"2422","fix":"2568","desc":"2424"},{"messageId":"2419","fix":"2569","desc":"2421"},{"messageId":"2422","fix":"2570","desc":"2424"},{"messageId":"2419","fix":"2571","desc":"2421"},{"messageId":"2422","fix":"2572","desc":"2424"},{"messageId":"2419","fix":"2573","desc":"2421"},{"messageId":"2422","fix":"2574","desc":"2424"},{"messageId":"2419","fix":"2575","desc":"2421"},{"messageId":"2422","fix":"2576","desc":"2424"},{"messageId":"2419","fix":"2577","desc":"2421"},{"messageId":"2422","fix":"2578","desc":"2424"},{"messageId":"2419","fix":"2579","desc":"2421"},{"messageId":"2422","fix":"2580","desc":"2424"},{"messageId":"2419","fix":"2581","desc":"2421"},{"messageId":"2422","fix":"2582","desc":"2424"},{"messageId":"2419","fix":"2583","desc":"2421"},{"messageId":"2422","fix":"2584","desc":"2424"},{"messageId":"2419","fix":"2585","desc":"2421"},{"messageId":"2422","fix":"2586","desc":"2424"},{"messageId":"2419","fix":"2587","desc":"2421"},{"messageId":"2422","fix":"2588","desc":"2424"},{"messageId":"2419","fix":"2589","desc":"2421"},{"messageId":"2422","fix":"2590","desc":"2424"},{"messageId":"2419","fix":"2591","desc":"2421"},{"messageId":"2422","fix":"2592","desc":"2424"},{"messageId":"2419","fix":"2593","desc":"2421"},{"messageId":"2422","fix":"2594","desc":"2424"},{"messageId":"2419","fix":"2595","desc":"2421"},{"messageId":"2422","fix":"2596","desc":"2424"},{"messageId":"2419","fix":"2597","desc":"2421"},{"messageId":"2422","fix":"2598","desc":"2424"},{"messageId":"2419","fix":"2599","desc":"2421"},{"messageId":"2422","fix":"2600","desc":"2424"},{"messageId":"2419","fix":"2601","desc":"2421"},{"messageId":"2422","fix":"2602","desc":"2424"},{"messageId":"2419","fix":"2603","desc":"2421"},{"messageId":"2422","fix":"2604","desc":"2424"},{"messageId":"2419","fix":"2605","desc":"2421"},{"messageId":"2422","fix":"2606","desc":"2424"},{"messageId":"2419","fix":"2607","desc":"2421"},{"messageId":"2422","fix":"2608","desc":"2424"},{"messageId":"2419","fix":"2609","desc":"2421"},{"messageId":"2422","fix":"2610","desc":"2424"},{"messageId":"2419","fix":"2611","desc":"2421"},{"messageId":"2422","fix":"2612","desc":"2424"},{"messageId":"2419","fix":"2613","desc":"2421"},{"messageId":"2422","fix":"2614","desc":"2424"},{"messageId":"2419","fix":"2615","desc":"2421"},{"messageId":"2422","fix":"2616","desc":"2424"},{"messageId":"2419","fix":"2617","desc":"2421"},{"messageId":"2422","fix":"2618","desc":"2424"},{"messageId":"2419","fix":"2619","desc":"2421"},{"messageId":"2422","fix":"2620","desc":"2424"},{"messageId":"2419","fix":"2621","desc":"2421"},{"messageId":"2422","fix":"2622","desc":"2424"},{"messageId":"2419","fix":"2623","desc":"2421"},{"messageId":"2422","fix":"2624","desc":"2424"},{"messageId":"2419","fix":"2625","desc":"2421"},{"messageId":"2422","fix":"2626","desc":"2424"},{"messageId":"2419","fix":"2627","desc":"2421"},{"messageId":"2422","fix":"2628","desc":"2424"},{"messageId":"2419","fix":"2629","desc":"2421"},{"messageId":"2422","fix":"2630","desc":"2424"},{"messageId":"2419","fix":"2631","desc":"2421"},{"messageId":"2422","fix":"2632","desc":"2424"},{"messageId":"2419","fix":"2633","desc":"2421"},{"messageId":"2422","fix":"2634","desc":"2424"},{"messageId":"2419","fix":"2635","desc":"2421"},{"messageId":"2422","fix":"2636","desc":"2424"},{"messageId":"2419","fix":"2637","desc":"2421"},{"messageId":"2422","fix":"2638","desc":"2424"},{"messageId":"2419","fix":"2639","desc":"2421"},{"messageId":"2422","fix":"2640","desc":"2424"},{"messageId":"2419","fix":"2641","desc":"2421"},{"messageId":"2422","fix":"2642","desc":"2424"},{"messageId":"2419","fix":"2643","desc":"2421"},{"messageId":"2422","fix":"2644","desc":"2424"},{"messageId":"2419","fix":"2645","desc":"2421"},{"messageId":"2422","fix":"2646","desc":"2424"},{"messageId":"2419","fix":"2647","desc":"2421"},{"messageId":"2422","fix":"2648","desc":"2424"},{"messageId":"2419","fix":"2649","desc":"2421"},{"messageId":"2422","fix":"2650","desc":"2424"},{"messageId":"2419","fix":"2651","desc":"2421"},{"messageId":"2422","fix":"2652","desc":"2424"},{"messageId":"2419","fix":"2653","desc":"2421"},{"messageId":"2422","fix":"2654","desc":"2424"},{"messageId":"2419","fix":"2655","desc":"2421"},{"messageId":"2422","fix":"2656","desc":"2424"},{"messageId":"2419","fix":"2657","desc":"2421"},{"messageId":"2422","fix":"2658","desc":"2424"},{"messageId":"2419","fix":"2659","desc":"2421"},{"messageId":"2422","fix":"2660","desc":"2424"},{"messageId":"2419","fix":"2661","desc":"2421"},{"messageId":"2422","fix":"2662","desc":"2424"},{"messageId":"2419","fix":"2663","desc":"2421"},{"messageId":"2422","fix":"2664","desc":"2424"},{"messageId":"2419","fix":"2665","desc":"2421"},{"messageId":"2422","fix":"2666","desc":"2424"},{"messageId":"2419","fix":"2667","desc":"2421"},{"messageId":"2422","fix":"2668","desc":"2424"},{"messageId":"2419","fix":"2669","desc":"2421"},{"messageId":"2422","fix":"2670","desc":"2424"},{"messageId":"2419","fix":"2671","desc":"2421"},{"messageId":"2422","fix":"2672","desc":"2424"},{"messageId":"2419","fix":"2673","desc":"2421"},{"messageId":"2422","fix":"2674","desc":"2424"},{"messageId":"2419","fix":"2675","desc":"2421"},{"messageId":"2422","fix":"2676","desc":"2424"},{"messageId":"2419","fix":"2677","desc":"2421"},{"messageId":"2422","fix":"2678","desc":"2424"},{"messageId":"2419","fix":"2679","desc":"2421"},{"messageId":"2422","fix":"2680","desc":"2424"},{"messageId":"2419","fix":"2681","desc":"2421"},{"messageId":"2422","fix":"2682","desc":"2424"},{"messageId":"2419","fix":"2683","desc":"2421"},{"messageId":"2422","fix":"2684","desc":"2424"},{"messageId":"2419","fix":"2685","desc":"2421"},{"messageId":"2422","fix":"2686","desc":"2424"},{"messageId":"2419","fix":"2687","desc":"2421"},{"messageId":"2422","fix":"2688","desc":"2424"},{"messageId":"2419","fix":"2689","desc":"2421"},{"messageId":"2422","fix":"2690","desc":"2424"},{"messageId":"2419","fix":"2691","desc":"2421"},{"messageId":"2422","fix":"2692","desc":"2424"},{"messageId":"2419","fix":"2693","desc":"2421"},{"messageId":"2422","fix":"2694","desc":"2424"},{"messageId":"2419","fix":"2695","desc":"2421"},{"messageId":"2422","fix":"2696","desc":"2424"},{"messageId":"2419","fix":"2697","desc":"2421"},{"messageId":"2422","fix":"2698","desc":"2424"},{"messageId":"2419","fix":"2699","desc":"2421"},{"messageId":"2422","fix":"2700","desc":"2424"},{"messageId":"2419","fix":"2701","desc":"2421"},{"messageId":"2422","fix":"2702","desc":"2424"},{"messageId":"2419","fix":"2703","desc":"2421"},{"messageId":"2422","fix":"2704","desc":"2424"},{"messageId":"2419","fix":"2705","desc":"2421"},{"messageId":"2422","fix":"2706","desc":"2424"},{"messageId":"2419","fix":"2707","desc":"2421"},{"messageId":"2422","fix":"2708","desc":"2424"},{"messageId":"2419","fix":"2709","desc":"2421"},{"messageId":"2422","fix":"2710","desc":"2424"},{"messageId":"2419","fix":"2711","desc":"2421"},{"messageId":"2422","fix":"2712","desc":"2424"},{"messageId":"2419","fix":"2713","desc":"2421"},{"messageId":"2422","fix":"2714","desc":"2424"},{"messageId":"2419","fix":"2715","desc":"2421"},{"messageId":"2422","fix":"2716","desc":"2424"},{"messageId":"2419","fix":"2717","desc":"2421"},{"messageId":"2422","fix":"2718","desc":"2424"},{"messageId":"2419","fix":"2719","desc":"2421"},{"messageId":"2422","fix":"2720","desc":"2424"},{"messageId":"2419","fix":"2721","desc":"2421"},{"messageId":"2422","fix":"2722","desc":"2424"},{"messageId":"2419","fix":"2723","desc":"2421"},{"messageId":"2422","fix":"2724","desc":"2424"},{"messageId":"2419","fix":"2725","desc":"2421"},{"messageId":"2422","fix":"2726","desc":"2424"},{"messageId":"2419","fix":"2727","desc":"2421"},{"messageId":"2422","fix":"2728","desc":"2424"},{"messageId":"2419","fix":"2729","desc":"2421"},{"messageId":"2422","fix":"2730","desc":"2424"},{"messageId":"2419","fix":"2731","desc":"2421"},{"messageId":"2422","fix":"2732","desc":"2424"},{"messageId":"2419","fix":"2733","desc":"2421"},{"messageId":"2422","fix":"2734","desc":"2424"},{"messageId":"2419","fix":"2735","desc":"2421"},{"messageId":"2422","fix":"2736","desc":"2424"},{"messageId":"2419","fix":"2737","desc":"2421"},{"messageId":"2422","fix":"2738","desc":"2424"},{"messageId":"2419","fix":"2739","desc":"2421"},{"messageId":"2422","fix":"2740","desc":"2424"},{"messageId":"2419","fix":"2741","desc":"2421"},{"messageId":"2422","fix":"2742","desc":"2424"},{"messageId":"2419","fix":"2743","desc":"2421"},{"messageId":"2422","fix":"2744","desc":"2424"},{"messageId":"2419","fix":"2745","desc":"2421"},{"messageId":"2422","fix":"2746","desc":"2424"},{"messageId":"2419","fix":"2747","desc":"2421"},{"messageId":"2422","fix":"2748","desc":"2424"},{"messageId":"2419","fix":"2749","desc":"2421"},{"messageId":"2422","fix":"2750","desc":"2424"},{"messageId":"2419","fix":"2751","desc":"2421"},{"messageId":"2422","fix":"2752","desc":"2424"},{"messageId":"2419","fix":"2753","desc":"2421"},{"messageId":"2422","fix":"2754","desc":"2424"},{"messageId":"2419","fix":"2755","desc":"2421"},{"messageId":"2422","fix":"2756","desc":"2424"},{"messageId":"2419","fix":"2757","desc":"2421"},{"messageId":"2422","fix":"2758","desc":"2424"},{"messageId":"2419","fix":"2759","desc":"2421"},{"messageId":"2422","fix":"2760","desc":"2424"},{"messageId":"2419","fix":"2761","desc":"2421"},{"messageId":"2422","fix":"2762","desc":"2424"},{"messageId":"2419","fix":"2763","desc":"2421"},{"messageId":"2422","fix":"2764","desc":"2424"},{"messageId":"2419","fix":"2765","desc":"2421"},{"messageId":"2422","fix":"2766","desc":"2424"},{"messageId":"2419","fix":"2767","desc":"2421"},{"messageId":"2422","fix":"2768","desc":"2424"},{"messageId":"2419","fix":"2769","desc":"2421"},{"messageId":"2422","fix":"2770","desc":"2424"},{"messageId":"2419","fix":"2771","desc":"2421"},{"messageId":"2422","fix":"2772","desc":"2424"},{"messageId":"2419","fix":"2773","desc":"2421"},{"messageId":"2422","fix":"2774","desc":"2424"},{"messageId":"2419","fix":"2775","desc":"2421"},{"messageId":"2422","fix":"2776","desc":"2424"},{"messageId":"2419","fix":"2777","desc":"2421"},{"messageId":"2422","fix":"2778","desc":"2424"},{"messageId":"2419","fix":"2779","desc":"2421"},{"messageId":"2422","fix":"2780","desc":"2424"},{"messageId":"2419","fix":"2781","desc":"2421"},{"messageId":"2422","fix":"2782","desc":"2424"},{"messageId":"2419","fix":"2783","desc":"2421"},{"messageId":"2422","fix":"2784","desc":"2424"},{"messageId":"2419","fix":"2785","desc":"2421"},{"messageId":"2422","fix":"2786","desc":"2424"},{"messageId":"2419","fix":"2787","desc":"2421"},{"messageId":"2422","fix":"2788","desc":"2424"},{"messageId":"2419","fix":"2789","desc":"2421"},{"messageId":"2422","fix":"2790","desc":"2424"},{"messageId":"2419","fix":"2791","desc":"2421"},{"messageId":"2422","fix":"2792","desc":"2424"},{"messageId":"2419","fix":"2793","desc":"2421"},{"messageId":"2422","fix":"2794","desc":"2424"},{"messageId":"2419","fix":"2795","desc":"2421"},{"messageId":"2422","fix":"2796","desc":"2424"},{"messageId":"2419","fix":"2797","desc":"2421"},{"messageId":"2422","fix":"2798","desc":"2424"},{"messageId":"2419","fix":"2799","desc":"2421"},{"messageId":"2422","fix":"2800","desc":"2424"},{"messageId":"2419","fix":"2801","desc":"2421"},{"messageId":"2422","fix":"2802","desc":"2424"},{"messageId":"2419","fix":"2803","desc":"2421"},{"messageId":"2422","fix":"2804","desc":"2424"},{"messageId":"2419","fix":"2805","desc":"2421"},{"messageId":"2422","fix":"2806","desc":"2424"},{"messageId":"2419","fix":"2807","desc":"2421"},{"messageId":"2422","fix":"2808","desc":"2424"},{"messageId":"2419","fix":"2809","desc":"2421"},{"messageId":"2422","fix":"2810","desc":"2424"},{"messageId":"2419","fix":"2811","desc":"2421"},{"messageId":"2422","fix":"2812","desc":"2424"},{"messageId":"2419","fix":"2813","desc":"2421"},{"messageId":"2422","fix":"2814","desc":"2424"},{"messageId":"2419","fix":"2815","desc":"2421"},{"messageId":"2422","fix":"2816","desc":"2424"},{"messageId":"2419","fix":"2817","desc":"2421"},{"messageId":"2422","fix":"2818","desc":"2424"},{"messageId":"2419","fix":"2819","desc":"2421"},{"messageId":"2422","fix":"2820","desc":"2424"},{"messageId":"2419","fix":"2821","desc":"2421"},{"messageId":"2422","fix":"2822","desc":"2424"},{"messageId":"2419","fix":"2823","desc":"2421"},{"messageId":"2422","fix":"2824","desc":"2424"},{"messageId":"2419","fix":"2825","desc":"2421"},{"messageId":"2422","fix":"2826","desc":"2424"},{"messageId":"2419","fix":"2827","desc":"2421"},{"messageId":"2422","fix":"2828","desc":"2424"},{"messageId":"2419","fix":"2829","desc":"2421"},{"messageId":"2422","fix":"2830","desc":"2424"},{"messageId":"2419","fix":"2831","desc":"2421"},{"messageId":"2422","fix":"2832","desc":"2424"},{"messageId":"2419","fix":"2833","desc":"2421"},{"messageId":"2422","fix":"2834","desc":"2424"},{"messageId":"2419","fix":"2835","desc":"2421"},{"messageId":"2422","fix":"2836","desc":"2424"},{"messageId":"2419","fix":"2837","desc":"2421"},{"messageId":"2422","fix":"2838","desc":"2424"},{"messageId":"2419","fix":"2839","desc":"2421"},{"messageId":"2422","fix":"2840","desc":"2424"},{"messageId":"2419","fix":"2841","desc":"2421"},{"messageId":"2422","fix":"2842","desc":"2424"},{"messageId":"2419","fix":"2843","desc":"2421"},{"messageId":"2422","fix":"2844","desc":"2424"},{"messageId":"2419","fix":"2845","desc":"2421"},{"messageId":"2422","fix":"2846","desc":"2424"},{"messageId":"2419","fix":"2847","desc":"2421"},{"messageId":"2422","fix":"2848","desc":"2424"},{"messageId":"2419","fix":"2849","desc":"2421"},{"messageId":"2422","fix":"2850","desc":"2424"},{"messageId":"2419","fix":"2851","desc":"2421"},{"messageId":"2422","fix":"2852","desc":"2424"},{"messageId":"2419","fix":"2853","desc":"2421"},{"messageId":"2422","fix":"2854","desc":"2424"},{"messageId":"2419","fix":"2855","desc":"2421"},{"messageId":"2422","fix":"2856","desc":"2424"},{"messageId":"2419","fix":"2857","desc":"2421"},{"messageId":"2422","fix":"2858","desc":"2424"},{"messageId":"2419","fix":"2859","desc":"2421"},{"messageId":"2422","fix":"2860","desc":"2424"},{"messageId":"2419","fix":"2861","desc":"2421"},{"messageId":"2422","fix":"2862","desc":"2424"},{"messageId":"2419","fix":"2863","desc":"2421"},{"messageId":"2422","fix":"2864","desc":"2424"},{"messageId":"2419","fix":"2865","desc":"2421"},{"messageId":"2422","fix":"2866","desc":"2424"},{"messageId":"2419","fix":"2867","desc":"2421"},{"messageId":"2422","fix":"2868","desc":"2424"},{"messageId":"2419","fix":"2869","desc":"2421"},{"messageId":"2422","fix":"2870","desc":"2424"},{"messageId":"2419","fix":"2871","desc":"2421"},{"messageId":"2422","fix":"2872","desc":"2424"},{"messageId":"2419","fix":"2873","desc":"2421"},{"messageId":"2422","fix":"2874","desc":"2424"},{"messageId":"2419","fix":"2875","desc":"2421"},{"messageId":"2422","fix":"2876","desc":"2424"},{"messageId":"2419","fix":"2877","desc":"2421"},{"messageId":"2422","fix":"2878","desc":"2424"},{"messageId":"2419","fix":"2879","desc":"2421"},{"messageId":"2422","fix":"2880","desc":"2424"},{"messageId":"2419","fix":"2881","desc":"2421"},{"messageId":"2422","fix":"2882","desc":"2424"},{"messageId":"2419","fix":"2883","desc":"2421"},{"messageId":"2422","fix":"2884","desc":"2424"},{"messageId":"2419","fix":"2885","desc":"2421"},{"messageId":"2422","fix":"2886","desc":"2424"},{"messageId":"2419","fix":"2887","desc":"2421"},{"messageId":"2422","fix":"2888","desc":"2424"},{"messageId":"2419","fix":"2889","desc":"2421"},{"messageId":"2422","fix":"2890","desc":"2424"},{"messageId":"2419","fix":"2891","desc":"2421"},{"messageId":"2422","fix":"2892","desc":"2424"},{"messageId":"2419","fix":"2893","desc":"2421"},{"messageId":"2422","fix":"2894","desc":"2424"},{"messageId":"2419","fix":"2895","desc":"2421"},{"messageId":"2422","fix":"2896","desc":"2424"},{"messageId":"2419","fix":"2897","desc":"2421"},{"messageId":"2422","fix":"2898","desc":"2424"},{"messageId":"2419","fix":"2899","desc":"2421"},{"messageId":"2422","fix":"2900","desc":"2424"},{"messageId":"2419","fix":"2901","desc":"2421"},{"messageId":"2422","fix":"2902","desc":"2424"},{"messageId":"2419","fix":"2903","desc":"2421"},{"messageId":"2422","fix":"2904","desc":"2424"},{"messageId":"2419","fix":"2905","desc":"2421"},{"messageId":"2422","fix":"2906","desc":"2424"},{"messageId":"2419","fix":"2907","desc":"2421"},{"messageId":"2422","fix":"2908","desc":"2424"},{"messageId":"2419","fix":"2909","desc":"2421"},{"messageId":"2422","fix":"2910","desc":"2424"},{"messageId":"2419","fix":"2911","desc":"2421"},{"messageId":"2422","fix":"2912","desc":"2424"},{"messageId":"2419","fix":"2913","desc":"2421"},{"messageId":"2422","fix":"2914","desc":"2424"},{"messageId":"2419","fix":"2915","desc":"2421"},{"messageId":"2422","fix":"2916","desc":"2424"},{"messageId":"2419","fix":"2917","desc":"2421"},{"messageId":"2422","fix":"2918","desc":"2424"},{"messageId":"2419","fix":"2919","desc":"2421"},{"messageId":"2422","fix":"2920","desc":"2424"},{"messageId":"2419","fix":"2921","desc":"2421"},{"messageId":"2422","fix":"2922","desc":"2424"},{"messageId":"2419","fix":"2923","desc":"2421"},{"messageId":"2422","fix":"2924","desc":"2424"},{"messageId":"2419","fix":"2925","desc":"2421"},{"messageId":"2422","fix":"2926","desc":"2424"},{"messageId":"2419","fix":"2927","desc":"2421"},{"messageId":"2422","fix":"2928","desc":"2424"},{"messageId":"2419","fix":"2929","desc":"2421"},{"messageId":"2422","fix":"2930","desc":"2424"},{"messageId":"2419","fix":"2931","desc":"2421"},{"messageId":"2422","fix":"2932","desc":"2424"},{"messageId":"2419","fix":"2933","desc":"2421"},{"messageId":"2422","fix":"2934","desc":"2424"},{"messageId":"2419","fix":"2935","desc":"2421"},{"messageId":"2422","fix":"2936","desc":"2424"},{"messageId":"2419","fix":"2937","desc":"2421"},{"messageId":"2422","fix":"2938","desc":"2424"},{"messageId":"2419","fix":"2939","desc":"2421"},{"messageId":"2422","fix":"2940","desc":"2424"},{"messageId":"2419","fix":"2941","desc":"2421"},{"messageId":"2422","fix":"2942","desc":"2424"},{"messageId":"2419","fix":"2943","desc":"2421"},{"messageId":"2422","fix":"2944","desc":"2424"},{"messageId":"2419","fix":"2945","desc":"2421"},{"messageId":"2422","fix":"2946","desc":"2424"},{"messageId":"2419","fix":"2947","desc":"2421"},{"messageId":"2422","fix":"2948","desc":"2424"},{"messageId":"2419","fix":"2949","desc":"2421"},{"messageId":"2422","fix":"2950","desc":"2424"},{"messageId":"2419","fix":"2951","desc":"2421"},{"messageId":"2422","fix":"2952","desc":"2424"},{"messageId":"2419","fix":"2953","desc":"2421"},{"messageId":"2422","fix":"2954","desc":"2424"},{"messageId":"2419","fix":"2955","desc":"2421"},{"messageId":"2422","fix":"2956","desc":"2424"},{"messageId":"2419","fix":"2957","desc":"2421"},{"messageId":"2422","fix":"2958","desc":"2424"},{"messageId":"2419","fix":"2959","desc":"2421"},{"messageId":"2422","fix":"2960","desc":"2424"},{"messageId":"2419","fix":"2961","desc":"2421"},{"messageId":"2422","fix":"2962","desc":"2424"},{"messageId":"2419","fix":"2963","desc":"2421"},{"messageId":"2422","fix":"2964","desc":"2424"},{"messageId":"2419","fix":"2965","desc":"2421"},{"messageId":"2422","fix":"2966","desc":"2424"},{"messageId":"2419","fix":"2967","desc":"2421"},{"messageId":"2422","fix":"2968","desc":"2424"},{"messageId":"2419","fix":"2969","desc":"2421"},{"messageId":"2422","fix":"2970","desc":"2424"},{"messageId":"2419","fix":"2971","desc":"2421"},{"messageId":"2422","fix":"2972","desc":"2424"},{"messageId":"2419","fix":"2973","desc":"2421"},{"messageId":"2422","fix":"2974","desc":"2424"},{"messageId":"2419","fix":"2975","desc":"2421"},{"messageId":"2422","fix":"2976","desc":"2424"},{"messageId":"2419","fix":"2977","desc":"2421"},{"messageId":"2422","fix":"2978","desc":"2424"},{"messageId":"2419","fix":"2979","desc":"2421"},{"messageId":"2422","fix":"2980","desc":"2424"},{"messageId":"2419","fix":"2981","desc":"2421"},{"messageId":"2422","fix":"2982","desc":"2424"},{"messageId":"2419","fix":"2983","desc":"2421"},{"messageId":"2422","fix":"2984","desc":"2424"},{"messageId":"2419","fix":"2985","desc":"2421"},{"messageId":"2422","fix":"2986","desc":"2424"},{"messageId":"2419","fix":"2987","desc":"2421"},{"messageId":"2422","fix":"2988","desc":"2424"},{"messageId":"2419","fix":"2989","desc":"2421"},{"messageId":"2422","fix":"2990","desc":"2424"},{"messageId":"2419","fix":"2991","desc":"2421"},{"messageId":"2422","fix":"2992","desc":"2424"},{"messageId":"2419","fix":"2993","desc":"2421"},{"messageId":"2422","fix":"2994","desc":"2424"},{"messageId":"2419","fix":"2995","desc":"2421"},{"messageId":"2422","fix":"2996","desc":"2424"},{"messageId":"2419","fix":"2997","desc":"2421"},{"messageId":"2422","fix":"2998","desc":"2424"},{"messageId":"2419","fix":"2999","desc":"2421"},{"messageId":"2422","fix":"3000","desc":"2424"},{"messageId":"2419","fix":"3001","desc":"2421"},{"messageId":"2422","fix":"3002","desc":"2424"},{"messageId":"2419","fix":"3003","desc":"2421"},{"messageId":"2422","fix":"3004","desc":"2424"},{"messageId":"2419","fix":"3005","desc":"2421"},{"messageId":"2422","fix":"3006","desc":"2424"},{"messageId":"2419","fix":"3007","desc":"2421"},{"messageId":"2422","fix":"3008","desc":"2424"},{"messageId":"2419","fix":"3009","desc":"2421"},{"messageId":"2422","fix":"3010","desc":"2424"},{"messageId":"2419","fix":"3011","desc":"2421"},{"messageId":"2422","fix":"3012","desc":"2424"},{"messageId":"2419","fix":"3013","desc":"2421"},{"messageId":"2422","fix":"3014","desc":"2424"},{"messageId":"2419","fix":"3015","desc":"2421"},{"messageId":"2422","fix":"3016","desc":"2424"},{"messageId":"2419","fix":"3017","desc":"2421"},{"messageId":"2422","fix":"3018","desc":"2424"},{"messageId":"2419","fix":"3019","desc":"2421"},{"messageId":"2422","fix":"3020","desc":"2424"},{"messageId":"2419","fix":"3021","desc":"2421"},{"messageId":"2422","fix":"3022","desc":"2424"},{"messageId":"2419","fix":"3023","desc":"2421"},{"messageId":"2422","fix":"3024","desc":"2424"},{"messageId":"2419","fix":"3025","desc":"2421"},{"messageId":"2422","fix":"3026","desc":"2424"},{"messageId":"2419","fix":"3027","desc":"2421"},{"messageId":"2422","fix":"3028","desc":"2424"},{"messageId":"2419","fix":"3029","desc":"2421"},{"messageId":"2422","fix":"3030","desc":"2424"},{"messageId":"2419","fix":"3031","desc":"2421"},{"messageId":"2422","fix":"3032","desc":"2424"},{"messageId":"2419","fix":"3033","desc":"2421"},{"messageId":"2422","fix":"3034","desc":"2424"},{"messageId":"2419","fix":"3035","desc":"2421"},{"messageId":"2422","fix":"3036","desc":"2424"},{"messageId":"2419","fix":"3037","desc":"2421"},{"messageId":"2422","fix":"3038","desc":"2424"},{"messageId":"2419","fix":"3039","desc":"2421"},{"messageId":"2422","fix":"3040","desc":"2424"},{"messageId":"2419","fix":"3041","desc":"2421"},{"messageId":"2422","fix":"3042","desc":"2424"},{"messageId":"2419","fix":"3043","desc":"2421"},{"messageId":"2422","fix":"3044","desc":"2424"},{"messageId":"2419","fix":"3045","desc":"2421"},{"messageId":"2422","fix":"3046","desc":"2424"},{"messageId":"2419","fix":"3047","desc":"2421"},{"messageId":"2422","fix":"3048","desc":"2424"},{"messageId":"2419","fix":"3049","desc":"2421"},{"messageId":"2422","fix":"3050","desc":"2424"},{"messageId":"2419","fix":"3051","desc":"2421"},{"messageId":"2422","fix":"3052","desc":"2424"},{"messageId":"2419","fix":"3053","desc":"2421"},{"messageId":"2422","fix":"3054","desc":"2424"},{"messageId":"2419","fix":"3055","desc":"2421"},{"messageId":"2422","fix":"3056","desc":"2424"},{"messageId":"2419","fix":"3057","desc":"2421"},{"messageId":"2422","fix":"3058","desc":"2424"},{"messageId":"2419","fix":"3059","desc":"2421"},{"messageId":"2422","fix":"3060","desc":"2424"},{"messageId":"2419","fix":"3061","desc":"2421"},{"messageId":"2422","fix":"3062","desc":"2424"},{"messageId":"2419","fix":"3063","desc":"2421"},{"messageId":"2422","fix":"3064","desc":"2424"},{"messageId":"2419","fix":"3065","desc":"2421"},{"messageId":"2422","fix":"3066","desc":"2424"},{"messageId":"2419","fix":"3067","desc":"2421"},{"messageId":"2422","fix":"3068","desc":"2424"},{"messageId":"2419","fix":"3069","desc":"2421"},{"messageId":"2422","fix":"3070","desc":"2424"},{"messageId":"2419","fix":"3071","desc":"2421"},{"messageId":"2422","fix":"3072","desc":"2424"},{"messageId":"2419","fix":"3073","desc":"2421"},{"messageId":"2422","fix":"3074","desc":"2424"},{"messageId":"2419","fix":"3075","desc":"2421"},{"messageId":"2422","fix":"3076","desc":"2424"},{"messageId":"2419","fix":"3077","desc":"2421"},{"messageId":"2422","fix":"3078","desc":"2424"},{"messageId":"2419","fix":"3079","desc":"2421"},{"messageId":"2422","fix":"3080","desc":"2424"},{"messageId":"2419","fix":"3081","desc":"2421"},{"messageId":"2422","fix":"3082","desc":"2424"},{"messageId":"2419","fix":"3083","desc":"2421"},{"messageId":"2422","fix":"3084","desc":"2424"},{"messageId":"2419","fix":"3085","desc":"2421"},{"messageId":"2422","fix":"3086","desc":"2424"},{"messageId":"2419","fix":"3087","desc":"2421"},{"messageId":"2422","fix":"3088","desc":"2424"},{"messageId":"2419","fix":"3089","desc":"2421"},{"messageId":"2422","fix":"3090","desc":"2424"},{"messageId":"2419","fix":"3091","desc":"2421"},{"messageId":"2422","fix":"3092","desc":"2424"},{"messageId":"2419","fix":"3093","desc":"2421"},{"messageId":"2422","fix":"3094","desc":"2424"},{"messageId":"2419","fix":"3095","desc":"2421"},{"messageId":"2422","fix":"3096","desc":"2424"},{"messageId":"2419","fix":"3097","desc":"2421"},{"messageId":"2422","fix":"3098","desc":"2424"},{"messageId":"2419","fix":"3099","desc":"2421"},{"messageId":"2422","fix":"3100","desc":"2424"},{"messageId":"2419","fix":"3101","desc":"2421"},{"messageId":"2422","fix":"3102","desc":"2424"},{"messageId":"2419","fix":"3103","desc":"2421"},{"messageId":"2422","fix":"3104","desc":"2424"},{"messageId":"2419","fix":"3105","desc":"2421"},{"messageId":"2422","fix":"3106","desc":"2424"},{"messageId":"2419","fix":"3107","desc":"2421"},{"messageId":"2422","fix":"3108","desc":"2424"},{"messageId":"2419","fix":"3109","desc":"2421"},{"messageId":"2422","fix":"3110","desc":"2424"},{"messageId":"2419","fix":"3111","desc":"2421"},{"messageId":"2422","fix":"3112","desc":"2424"},{"messageId":"2419","fix":"3113","desc":"2421"},{"messageId":"2422","fix":"3114","desc":"2424"},{"messageId":"2419","fix":"3115","desc":"2421"},{"messageId":"2422","fix":"3116","desc":"2424"},{"messageId":"2419","fix":"3117","desc":"2421"},{"messageId":"2422","fix":"3118","desc":"2424"},{"messageId":"2419","fix":"3119","desc":"2421"},{"messageId":"2422","fix":"3120","desc":"2424"},{"messageId":"2419","fix":"3121","desc":"2421"},{"messageId":"2422","fix":"3122","desc":"2424"},{"messageId":"2419","fix":"3123","desc":"2421"},{"messageId":"2422","fix":"3124","desc":"2424"},{"messageId":"2419","fix":"3125","desc":"2421"},{"messageId":"2422","fix":"3126","desc":"2424"},{"messageId":"2419","fix":"3127","desc":"2421"},{"messageId":"2422","fix":"3128","desc":"2424"},{"messageId":"2419","fix":"3129","desc":"2421"},{"messageId":"2422","fix":"3130","desc":"2424"},{"messageId":"2419","fix":"3131","desc":"2421"},{"messageId":"2422","fix":"3132","desc":"2424"},{"messageId":"2419","fix":"3133","desc":"2421"},{"messageId":"2422","fix":"3134","desc":"2424"},{"messageId":"2419","fix":"3135","desc":"2421"},{"messageId":"2422","fix":"3136","desc":"2424"},{"messageId":"2419","fix":"3137","desc":"2421"},{"messageId":"2422","fix":"3138","desc":"2424"},{"messageId":"2419","fix":"3139","desc":"2421"},{"messageId":"2422","fix":"3140","desc":"2424"},{"messageId":"2419","fix":"3141","desc":"2421"},{"messageId":"2422","fix":"3142","desc":"2424"},{"messageId":"2419","fix":"3143","desc":"2421"},{"messageId":"2422","fix":"3144","desc":"2424"},{"messageId":"2419","fix":"3145","desc":"2421"},{"messageId":"2422","fix":"3146","desc":"2424"},{"messageId":"2419","fix":"3147","desc":"2421"},{"messageId":"2422","fix":"3148","desc":"2424"},{"messageId":"2419","fix":"3149","desc":"2421"},{"messageId":"2422","fix":"3150","desc":"2424"},{"messageId":"2419","fix":"3151","desc":"2421"},{"messageId":"2422","fix":"3152","desc":"2424"},{"messageId":"2419","fix":"3153","desc":"2421"},{"messageId":"2422","fix":"3154","desc":"2424"},{"messageId":"2419","fix":"3155","desc":"2421"},{"messageId":"2422","fix":"3156","desc":"2424"},{"messageId":"2419","fix":"3157","desc":"2421"},{"messageId":"2422","fix":"3158","desc":"2424"},{"messageId":"2419","fix":"3159","desc":"2421"},{"messageId":"2422","fix":"3160","desc":"2424"},{"messageId":"2419","fix":"3161","desc":"2421"},{"messageId":"2422","fix":"3162","desc":"2424"},{"messageId":"2419","fix":"3163","desc":"2421"},{"messageId":"2422","fix":"3164","desc":"2424"},{"messageId":"2419","fix":"3165","desc":"2421"},{"messageId":"2422","fix":"3166","desc":"2424"},{"messageId":"2419","fix":"3167","desc":"2421"},{"messageId":"2422","fix":"3168","desc":"2424"},{"messageId":"2419","fix":"3169","desc":"2421"},{"messageId":"2422","fix":"3170","desc":"2424"},{"messageId":"2419","fix":"3171","desc":"2421"},{"messageId":"2422","fix":"3172","desc":"2424"},{"messageId":"2419","fix":"3173","desc":"2421"},{"messageId":"2422","fix":"3174","desc":"2424"},{"messageId":"2419","fix":"3175","desc":"2421"},{"messageId":"2422","fix":"3176","desc":"2424"},{"messageId":"2419","fix":"3177","desc":"2421"},{"messageId":"2422","fix":"3178","desc":"2424"},{"messageId":"2419","fix":"3179","desc":"2421"},{"messageId":"2422","fix":"3180","desc":"2424"},{"messageId":"2419","fix":"3181","desc":"2421"},{"messageId":"2422","fix":"3182","desc":"2424"},{"messageId":"2419","fix":"3183","desc":"2421"},{"messageId":"2422","fix":"3184","desc":"2424"},{"messageId":"2419","fix":"3185","desc":"2421"},{"messageId":"2422","fix":"3186","desc":"2424"},{"messageId":"2419","fix":"3187","desc":"2421"},{"messageId":"2422","fix":"3188","desc":"2424"},"suggestUnknown",{"range":"3189","text":"3190"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"3189","text":"3191"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"3192","text":"3190"},{"range":"3192","text":"3191"},{"range":"3193","text":"3190"},{"range":"3193","text":"3191"},{"range":"3194","text":"3190"},{"range":"3194","text":"3191"},{"range":"3195","text":"3190"},{"range":"3195","text":"3191"},{"range":"3196","text":"3190"},{"range":"3196","text":"3191"},{"range":"3197","text":"3190"},{"range":"3197","text":"3191"},{"range":"3198","text":"3190"},{"range":"3198","text":"3191"},{"range":"3199","text":"3190"},{"range":"3199","text":"3191"},{"range":"3200","text":"3190"},{"range":"3200","text":"3191"},{"range":"3201","text":"3190"},{"range":"3201","text":"3191"},{"range":"3202","text":"3190"},{"range":"3202","text":"3191"},{"range":"3203","text":"3190"},{"range":"3203","text":"3191"},{"range":"3204","text":"3190"},{"range":"3204","text":"3191"},{"range":"3205","text":"3190"},{"range":"3205","text":"3191"},{"range":"3206","text":"3190"},{"range":"3206","text":"3191"},{"range":"3207","text":"3190"},{"range":"3207","text":"3191"},{"range":"3208","text":"3190"},{"range":"3208","text":"3191"},{"range":"3209","text":"3190"},{"range":"3209","text":"3191"},{"range":"3210","text":"3190"},{"range":"3210","text":"3191"},{"range":"3211","text":"3190"},{"range":"3211","text":"3191"},{"range":"3212","text":"3190"},{"range":"3212","text":"3191"},{"range":"3213","text":"3190"},{"range":"3213","text":"3191"},{"range":"3214","text":"3190"},{"range":"3214","text":"3191"},{"range":"3215","text":"3190"},{"range":"3215","text":"3191"},{"range":"3216","text":"3190"},{"range":"3216","text":"3191"},{"range":"3217","text":"3190"},{"range":"3217","text":"3191"},{"range":"3218","text":"3190"},{"range":"3218","text":"3191"},{"range":"3219","text":"3190"},{"range":"3219","text":"3191"},{"range":"3220","text":"3190"},{"range":"3220","text":"3191"},{"range":"3221","text":"3190"},{"range":"3221","text":"3191"},{"range":"3222","text":"3190"},{"range":"3222","text":"3191"},{"range":"3223","text":"3190"},{"range":"3223","text":"3191"},{"range":"3224","text":"3190"},{"range":"3224","text":"3191"},{"range":"3225","text":"3190"},{"range":"3225","text":"3191"},{"range":"3226","text":"3190"},{"range":"3226","text":"3191"},{"range":"3227","text":"3190"},{"range":"3227","text":"3191"},{"range":"3228","text":"3190"},{"range":"3228","text":"3191"},{"range":"3229","text":"3190"},{"range":"3229","text":"3191"},{"range":"3230","text":"3190"},{"range":"3230","text":"3191"},{"range":"3231","text":"3190"},{"range":"3231","text":"3191"},{"range":"3232","text":"3190"},{"range":"3232","text":"3191"},{"range":"3233","text":"3190"},{"range":"3233","text":"3191"},{"range":"3234","text":"3190"},{"range":"3234","text":"3191"},{"range":"3235","text":"3190"},{"range":"3235","text":"3191"},{"range":"3236","text":"3190"},{"range":"3236","text":"3191"},{"range":"3237","text":"3190"},{"range":"3237","text":"3191"},{"range":"3238","text":"3190"},{"range":"3238","text":"3191"},{"range":"3239","text":"3190"},{"range":"3239","text":"3191"},{"range":"3240","text":"3190"},{"range":"3240","text":"3191"},{"range":"3241","text":"3190"},{"range":"3241","text":"3191"},{"range":"3242","text":"3190"},{"range":"3242","text":"3191"},{"range":"3243","text":"3190"},{"range":"3243","text":"3191"},{"range":"3244","text":"3190"},{"range":"3244","text":"3191"},{"range":"3245","text":"3190"},{"range":"3245","text":"3191"},{"range":"3246","text":"3190"},{"range":"3246","text":"3191"},{"range":"3247","text":"3190"},{"range":"3247","text":"3191"},{"range":"3248","text":"3190"},{"range":"3248","text":"3191"},{"range":"3249","text":"3190"},{"range":"3249","text":"3191"},{"range":"3250","text":"3190"},{"range":"3250","text":"3191"},{"range":"3251","text":"3190"},{"range":"3251","text":"3191"},{"range":"3252","text":"3190"},{"range":"3252","text":"3191"},{"range":"3253","text":"3190"},{"range":"3253","text":"3191"},{"range":"3254","text":"3190"},{"range":"3254","text":"3191"},{"range":"3255","text":"3190"},{"range":"3255","text":"3191"},{"range":"3256","text":"3190"},{"range":"3256","text":"3191"},{"range":"3257","text":"3190"},{"range":"3257","text":"3191"},{"range":"3258","text":"3190"},{"range":"3258","text":"3191"},{"range":"3259","text":"3190"},{"range":"3259","text":"3191"},{"range":"3260","text":"3190"},{"range":"3260","text":"3191"},{"range":"3261","text":"3190"},{"range":"3261","text":"3191"},{"range":"3262","text":"3190"},{"range":"3262","text":"3191"},{"range":"3263","text":"3190"},{"range":"3263","text":"3191"},{"range":"3264","text":"3190"},{"range":"3264","text":"3191"},{"range":"3265","text":"3190"},{"range":"3265","text":"3191"},{"range":"3266","text":"3190"},{"range":"3266","text":"3191"},{"range":"3267","text":"3190"},{"range":"3267","text":"3191"},{"range":"3268","text":"3190"},{"range":"3268","text":"3191"},{"range":"3269","text":"3190"},{"range":"3269","text":"3191"},{"range":"3270","text":"3190"},{"range":"3270","text":"3191"},{"range":"3271","text":"3190"},{"range":"3271","text":"3191"},{"range":"3272","text":"3190"},{"range":"3272","text":"3191"},{"range":"3273","text":"3190"},{"range":"3273","text":"3191"},{"range":"3274","text":"3190"},{"range":"3274","text":"3191"},{"range":"3275","text":"3190"},{"range":"3275","text":"3191"},{"range":"3276","text":"3190"},{"range":"3276","text":"3191"},{"range":"3277","text":"3190"},{"range":"3277","text":"3191"},{"range":"3278","text":"3190"},{"range":"3278","text":"3191"},{"range":"3279","text":"3190"},{"range":"3279","text":"3191"},{"range":"3280","text":"3190"},{"range":"3280","text":"3191"},{"range":"3281","text":"3190"},{"range":"3281","text":"3191"},{"range":"3282","text":"3190"},{"range":"3282","text":"3191"},{"range":"3283","text":"3190"},{"range":"3283","text":"3191"},{"range":"3284","text":"3190"},{"range":"3284","text":"3191"},{"range":"3285","text":"3190"},{"range":"3285","text":"3191"},{"range":"3286","text":"3190"},{"range":"3286","text":"3191"},{"range":"3287","text":"3190"},{"range":"3287","text":"3191"},{"range":"3288","text":"3190"},{"range":"3288","text":"3191"},{"range":"3289","text":"3190"},{"range":"3289","text":"3191"},{"range":"3290","text":"3190"},{"range":"3290","text":"3191"},{"range":"3291","text":"3190"},{"range":"3291","text":"3191"},{"range":"3292","text":"3190"},{"range":"3292","text":"3191"},{"range":"3293","text":"3190"},{"range":"3293","text":"3191"},{"range":"3294","text":"3190"},{"range":"3294","text":"3191"},{"range":"3295","text":"3190"},{"range":"3295","text":"3191"},{"range":"3296","text":"3190"},{"range":"3296","text":"3191"},{"range":"3297","text":"3190"},{"range":"3297","text":"3191"},{"range":"3298","text":"3190"},{"range":"3298","text":"3191"},{"range":"3299","text":"3190"},{"range":"3299","text":"3191"},{"range":"3300","text":"3190"},{"range":"3300","text":"3191"},{"range":"3301","text":"3190"},{"range":"3301","text":"3191"},{"range":"3302","text":"3190"},{"range":"3302","text":"3191"},{"range":"3303","text":"3190"},{"range":"3303","text":"3191"},{"range":"3304","text":"3190"},{"range":"3304","text":"3191"},{"range":"3305","text":"3190"},{"range":"3305","text":"3191"},{"range":"3306","text":"3190"},{"range":"3306","text":"3191"},{"range":"3307","text":"3190"},{"range":"3307","text":"3191"},{"range":"3308","text":"3190"},{"range":"3308","text":"3191"},{"range":"3309","text":"3190"},{"range":"3309","text":"3191"},{"range":"3310","text":"3190"},{"range":"3310","text":"3191"},{"range":"3311","text":"3190"},{"range":"3311","text":"3191"},{"range":"3312","text":"3190"},{"range":"3312","text":"3191"},{"range":"3313","text":"3190"},{"range":"3313","text":"3191"},{"range":"3314","text":"3190"},{"range":"3314","text":"3191"},{"range":"3315","text":"3190"},{"range":"3315","text":"3191"},{"range":"3316","text":"3190"},{"range":"3316","text":"3191"},{"range":"3317","text":"3190"},{"range":"3317","text":"3191"},{"range":"3318","text":"3190"},{"range":"3318","text":"3191"},{"range":"3319","text":"3190"},{"range":"3319","text":"3191"},{"range":"3320","text":"3190"},{"range":"3320","text":"3191"},{"range":"3321","text":"3190"},{"range":"3321","text":"3191"},{"range":"3322","text":"3190"},{"range":"3322","text":"3191"},{"range":"3323","text":"3190"},{"range":"3323","text":"3191"},{"range":"3324","text":"3190"},{"range":"3324","text":"3191"},{"range":"3325","text":"3190"},{"range":"3325","text":"3191"},{"range":"3326","text":"3190"},{"range":"3326","text":"3191"},{"range":"3327","text":"3190"},{"range":"3327","text":"3191"},{"range":"3328","text":"3190"},{"range":"3328","text":"3191"},{"range":"3329","text":"3190"},{"range":"3329","text":"3191"},{"range":"3330","text":"3190"},{"range":"3330","text":"3191"},{"range":"3331","text":"3190"},{"range":"3331","text":"3191"},{"range":"3332","text":"3190"},{"range":"3332","text":"3191"},{"range":"3333","text":"3190"},{"range":"3333","text":"3191"},{"range":"3334","text":"3190"},{"range":"3334","text":"3191"},{"range":"3335","text":"3190"},{"range":"3335","text":"3191"},{"range":"3336","text":"3190"},{"range":"3336","text":"3191"},{"range":"3337","text":"3190"},{"range":"3337","text":"3191"},{"range":"3338","text":"3190"},{"range":"3338","text":"3191"},{"range":"3339","text":"3190"},{"range":"3339","text":"3191"},{"range":"3340","text":"3190"},{"range":"3340","text":"3191"},{"range":"3341","text":"3190"},{"range":"3341","text":"3191"},{"range":"3342","text":"3190"},{"range":"3342","text":"3191"},{"range":"3343","text":"3190"},{"range":"3343","text":"3191"},{"range":"3344","text":"3190"},{"range":"3344","text":"3191"},{"range":"3345","text":"3190"},{"range":"3345","text":"3191"},{"range":"3346","text":"3190"},{"range":"3346","text":"3191"},{"range":"3347","text":"3190"},{"range":"3347","text":"3191"},{"range":"3348","text":"3190"},{"range":"3348","text":"3191"},{"range":"3349","text":"3190"},{"range":"3349","text":"3191"},{"range":"3350","text":"3190"},{"range":"3350","text":"3191"},{"range":"3351","text":"3190"},{"range":"3351","text":"3191"},{"range":"3352","text":"3190"},{"range":"3352","text":"3191"},{"range":"3353","text":"3190"},{"range":"3353","text":"3191"},{"range":"3354","text":"3190"},{"range":"3354","text":"3191"},{"range":"3355","text":"3190"},{"range":"3355","text":"3191"},{"range":"3356","text":"3190"},{"range":"3356","text":"3191"},{"range":"3357","text":"3190"},{"range":"3357","text":"3191"},{"range":"3358","text":"3190"},{"range":"3358","text":"3191"},{"range":"3359","text":"3190"},{"range":"3359","text":"3191"},{"range":"3360","text":"3190"},{"range":"3360","text":"3191"},{"range":"3361","text":"3190"},{"range":"3361","text":"3191"},{"range":"3362","text":"3190"},{"range":"3362","text":"3191"},{"range":"3363","text":"3190"},{"range":"3363","text":"3191"},{"range":"3364","text":"3190"},{"range":"3364","text":"3191"},{"range":"3365","text":"3190"},{"range":"3365","text":"3191"},{"range":"3366","text":"3190"},{"range":"3366","text":"3191"},{"range":"3367","text":"3190"},{"range":"3367","text":"3191"},{"range":"3368","text":"3190"},{"range":"3368","text":"3191"},{"range":"3369","text":"3190"},{"range":"3369","text":"3191"},{"range":"3370","text":"3190"},{"range":"3370","text":"3191"},{"range":"3371","text":"3190"},{"range":"3371","text":"3191"},{"range":"3372","text":"3190"},{"range":"3372","text":"3191"},{"range":"3373","text":"3190"},{"range":"3373","text":"3191"},{"range":"3374","text":"3190"},{"range":"3374","text":"3191"},{"range":"3375","text":"3190"},{"range":"3375","text":"3191"},{"range":"3376","text":"3190"},{"range":"3376","text":"3191"},{"range":"3377","text":"3190"},{"range":"3377","text":"3191"},{"range":"3378","text":"3190"},{"range":"3378","text":"3191"},{"range":"3379","text":"3190"},{"range":"3379","text":"3191"},{"range":"3380","text":"3190"},{"range":"3380","text":"3191"},{"range":"3381","text":"3190"},{"range":"3381","text":"3191"},{"range":"3382","text":"3190"},{"range":"3382","text":"3191"},{"range":"3383","text":"3190"},{"range":"3383","text":"3191"},{"range":"3384","text":"3190"},{"range":"3384","text":"3191"},{"range":"3385","text":"3190"},{"range":"3385","text":"3191"},{"range":"3386","text":"3190"},{"range":"3386","text":"3191"},{"range":"3387","text":"3190"},{"range":"3387","text":"3191"},{"range":"3388","text":"3190"},{"range":"3388","text":"3191"},{"range":"3389","text":"3190"},{"range":"3389","text":"3191"},{"range":"3390","text":"3190"},{"range":"3390","text":"3191"},{"range":"3391","text":"3190"},{"range":"3391","text":"3191"},{"range":"3392","text":"3190"},{"range":"3392","text":"3191"},{"range":"3393","text":"3190"},{"range":"3393","text":"3191"},{"range":"3394","text":"3190"},{"range":"3394","text":"3191"},{"range":"3395","text":"3190"},{"range":"3395","text":"3191"},{"range":"3396","text":"3190"},{"range":"3396","text":"3191"},{"range":"3397","text":"3190"},{"range":"3397","text":"3191"},{"range":"3398","text":"3190"},{"range":"3398","text":"3191"},{"range":"3399","text":"3190"},{"range":"3399","text":"3191"},{"range":"3400","text":"3190"},{"range":"3400","text":"3191"},{"range":"3401","text":"3190"},{"range":"3401","text":"3191"},{"range":"3402","text":"3190"},{"range":"3402","text":"3191"},{"range":"3403","text":"3190"},{"range":"3403","text":"3191"},{"range":"3404","text":"3190"},{"range":"3404","text":"3191"},{"range":"3405","text":"3190"},{"range":"3405","text":"3191"},{"range":"3406","text":"3190"},{"range":"3406","text":"3191"},{"range":"3407","text":"3190"},{"range":"3407","text":"3191"},{"range":"3408","text":"3190"},{"range":"3408","text":"3191"},{"range":"3409","text":"3190"},{"range":"3409","text":"3191"},{"range":"3410","text":"3190"},{"range":"3410","text":"3191"},{"range":"3411","text":"3190"},{"range":"3411","text":"3191"},{"range":"3412","text":"3190"},{"range":"3412","text":"3191"},{"range":"3413","text":"3190"},{"range":"3413","text":"3191"},{"range":"3414","text":"3190"},{"range":"3414","text":"3191"},{"range":"3415","text":"3190"},{"range":"3415","text":"3191"},{"range":"3416","text":"3190"},{"range":"3416","text":"3191"},{"range":"3417","text":"3190"},{"range":"3417","text":"3191"},{"range":"3418","text":"3190"},{"range":"3418","text":"3191"},{"range":"3419","text":"3190"},{"range":"3419","text":"3191"},{"range":"3420","text":"3190"},{"range":"3420","text":"3191"},{"range":"3421","text":"3190"},{"range":"3421","text":"3191"},{"range":"3422","text":"3190"},{"range":"3422","text":"3191"},{"range":"3423","text":"3190"},{"range":"3423","text":"3191"},{"range":"3424","text":"3190"},{"range":"3424","text":"3191"},{"range":"3425","text":"3190"},{"range":"3425","text":"3191"},{"range":"3426","text":"3190"},{"range":"3426","text":"3191"},{"range":"3427","text":"3190"},{"range":"3427","text":"3191"},{"range":"3428","text":"3190"},{"range":"3428","text":"3191"},{"range":"3429","text":"3190"},{"range":"3429","text":"3191"},{"range":"3430","text":"3190"},{"range":"3430","text":"3191"},{"range":"3431","text":"3190"},{"range":"3431","text":"3191"},{"range":"3432","text":"3190"},{"range":"3432","text":"3191"},{"range":"3433","text":"3190"},{"range":"3433","text":"3191"},{"range":"3434","text":"3190"},{"range":"3434","text":"3191"},{"range":"3435","text":"3190"},{"range":"3435","text":"3191"},{"range":"3436","text":"3190"},{"range":"3436","text":"3191"},{"range":"3437","text":"3190"},{"range":"3437","text":"3191"},{"range":"3438","text":"3190"},{"range":"3438","text":"3191"},{"range":"3439","text":"3190"},{"range":"3439","text":"3191"},{"range":"3440","text":"3190"},{"range":"3440","text":"3191"},{"range":"3441","text":"3190"},{"range":"3441","text":"3191"},{"range":"3442","text":"3190"},{"range":"3442","text":"3191"},{"range":"3443","text":"3190"},{"range":"3443","text":"3191"},{"range":"3444","text":"3190"},{"range":"3444","text":"3191"},{"range":"3445","text":"3190"},{"range":"3445","text":"3191"},{"range":"3446","text":"3190"},{"range":"3446","text":"3191"},{"range":"3447","text":"3190"},{"range":"3447","text":"3191"},{"range":"3448","text":"3190"},{"range":"3448","text":"3191"},{"range":"3449","text":"3190"},{"range":"3449","text":"3191"},{"range":"3450","text":"3190"},{"range":"3450","text":"3191"},{"range":"3451","text":"3190"},{"range":"3451","text":"3191"},{"range":"3452","text":"3190"},{"range":"3452","text":"3191"},{"range":"3453","text":"3190"},{"range":"3453","text":"3191"},{"range":"3454","text":"3190"},{"range":"3454","text":"3191"},{"range":"3455","text":"3190"},{"range":"3455","text":"3191"},{"range":"3456","text":"3190"},{"range":"3456","text":"3191"},{"range":"3457","text":"3190"},{"range":"3457","text":"3191"},{"range":"3458","text":"3190"},{"range":"3458","text":"3191"},{"range":"3459","text":"3190"},{"range":"3459","text":"3191"},{"range":"3460","text":"3190"},{"range":"3460","text":"3191"},{"range":"3461","text":"3190"},{"range":"3461","text":"3191"},{"range":"3462","text":"3190"},{"range":"3462","text":"3191"},{"range":"3463","text":"3190"},{"range":"3463","text":"3191"},{"range":"3464","text":"3190"},{"range":"3464","text":"3191"},{"range":"3465","text":"3190"},{"range":"3465","text":"3191"},{"range":"3466","text":"3190"},{"range":"3466","text":"3191"},{"range":"3467","text":"3190"},{"range":"3467","text":"3191"},{"range":"3468","text":"3190"},{"range":"3468","text":"3191"},{"range":"3469","text":"3190"},{"range":"3469","text":"3191"},{"range":"3470","text":"3190"},{"range":"3470","text":"3191"},{"range":"3471","text":"3190"},{"range":"3471","text":"3191"},{"range":"3472","text":"3190"},{"range":"3472","text":"3191"},{"range":"3473","text":"3190"},{"range":"3473","text":"3191"},{"range":"3474","text":"3190"},{"range":"3474","text":"3191"},{"range":"3475","text":"3190"},{"range":"3475","text":"3191"},{"range":"3476","text":"3190"},{"range":"3476","text":"3191"},{"range":"3477","text":"3190"},{"range":"3477","text":"3191"},{"range":"3478","text":"3190"},{"range":"3478","text":"3191"},{"range":"3479","text":"3190"},{"range":"3479","text":"3191"},{"range":"3480","text":"3190"},{"range":"3480","text":"3191"},{"range":"3481","text":"3190"},{"range":"3481","text":"3191"},{"range":"3482","text":"3190"},{"range":"3482","text":"3191"},{"range":"3483","text":"3190"},{"range":"3483","text":"3191"},{"range":"3484","text":"3190"},{"range":"3484","text":"3191"},{"range":"3485","text":"3190"},{"range":"3485","text":"3191"},{"range":"3486","text":"3190"},{"range":"3486","text":"3191"},{"range":"3487","text":"3190"},{"range":"3487","text":"3191"},{"range":"3488","text":"3190"},{"range":"3488","text":"3191"},{"range":"3489","text":"3190"},{"range":"3489","text":"3191"},{"range":"3490","text":"3190"},{"range":"3490","text":"3191"},{"range":"3491","text":"3190"},{"range":"3491","text":"3191"},{"range":"3492","text":"3190"},{"range":"3492","text":"3191"},{"range":"3493","text":"3190"},{"range":"3493","text":"3191"},{"range":"3494","text":"3190"},{"range":"3494","text":"3191"},{"range":"3495","text":"3190"},{"range":"3495","text":"3191"},{"range":"3496","text":"3190"},{"range":"3496","text":"3191"},{"range":"3497","text":"3190"},{"range":"3497","text":"3191"},{"range":"3498","text":"3190"},{"range":"3498","text":"3191"},{"range":"3499","text":"3190"},{"range":"3499","text":"3191"},{"range":"3500","text":"3190"},{"range":"3500","text":"3191"},{"range":"3501","text":"3190"},{"range":"3501","text":"3191"},{"range":"3502","text":"3190"},{"range":"3502","text":"3191"},{"range":"3503","text":"3190"},{"range":"3503","text":"3191"},{"range":"3504","text":"3190"},{"range":"3504","text":"3191"},{"range":"3505","text":"3190"},{"range":"3505","text":"3191"},{"range":"3506","text":"3190"},{"range":"3506","text":"3191"},{"range":"3507","text":"3190"},{"range":"3507","text":"3191"},{"range":"3508","text":"3190"},{"range":"3508","text":"3191"},{"range":"3509","text":"3190"},{"range":"3509","text":"3191"},{"range":"3510","text":"3190"},{"range":"3510","text":"3191"},{"range":"3511","text":"3190"},{"range":"3511","text":"3191"},{"range":"3512","text":"3190"},{"range":"3512","text":"3191"},{"range":"3513","text":"3190"},{"range":"3513","text":"3191"},{"range":"3514","text":"3190"},{"range":"3514","text":"3191"},{"range":"3515","text":"3190"},{"range":"3515","text":"3191"},{"range":"3516","text":"3190"},{"range":"3516","text":"3191"},{"range":"3517","text":"3190"},{"range":"3517","text":"3191"},{"range":"3518","text":"3190"},{"range":"3518","text":"3191"},{"range":"3519","text":"3190"},{"range":"3519","text":"3191"},{"range":"3520","text":"3190"},{"range":"3520","text":"3191"},{"range":"3521","text":"3190"},{"range":"3521","text":"3191"},{"range":"3522","text":"3190"},{"range":"3522","text":"3191"},{"range":"3523","text":"3190"},{"range":"3523","text":"3191"},{"range":"3524","text":"3190"},{"range":"3524","text":"3191"},{"range":"3525","text":"3190"},{"range":"3525","text":"3191"},{"range":"3526","text":"3190"},{"range":"3526","text":"3191"},{"range":"3527","text":"3190"},{"range":"3527","text":"3191"},{"range":"3528","text":"3190"},{"range":"3528","text":"3191"},{"range":"3529","text":"3190"},{"range":"3529","text":"3191"},{"range":"3530","text":"3190"},{"range":"3530","text":"3191"},{"range":"3531","text":"3190"},{"range":"3531","text":"3191"},{"range":"3532","text":"3190"},{"range":"3532","text":"3191"},{"range":"3533","text":"3190"},{"range":"3533","text":"3191"},{"range":"3534","text":"3190"},{"range":"3534","text":"3191"},{"range":"3535","text":"3190"},{"range":"3535","text":"3191"},{"range":"3536","text":"3190"},{"range":"3536","text":"3191"},{"range":"3537","text":"3190"},{"range":"3537","text":"3191"},{"range":"3538","text":"3190"},{"range":"3538","text":"3191"},{"range":"3539","text":"3190"},{"range":"3539","text":"3191"},{"range":"3540","text":"3190"},{"range":"3540","text":"3191"},{"range":"3541","text":"3190"},{"range":"3541","text":"3191"},{"range":"3542","text":"3190"},{"range":"3542","text":"3191"},{"range":"3543","text":"3190"},{"range":"3543","text":"3191"},{"range":"3544","text":"3190"},{"range":"3544","text":"3191"},{"range":"3545","text":"3190"},{"range":"3545","text":"3191"},{"range":"3546","text":"3190"},{"range":"3546","text":"3191"},{"range":"3547","text":"3190"},{"range":"3547","text":"3191"},{"range":"3548","text":"3190"},{"range":"3548","text":"3191"},{"range":"3549","text":"3190"},{"range":"3549","text":"3191"},{"range":"3550","text":"3190"},{"range":"3550","text":"3191"},{"range":"3551","text":"3190"},{"range":"3551","text":"3191"},{"range":"3552","text":"3190"},{"range":"3552","text":"3191"},{"range":"3553","text":"3190"},{"range":"3553","text":"3191"},{"range":"3554","text":"3190"},{"range":"3554","text":"3191"},{"range":"3555","text":"3190"},{"range":"3555","text":"3191"},{"range":"3556","text":"3190"},{"range":"3556","text":"3191"},{"range":"3557","text":"3190"},{"range":"3557","text":"3191"},{"range":"3558","text":"3190"},{"range":"3558","text":"3191"},{"range":"3559","text":"3190"},{"range":"3559","text":"3191"},{"range":"3560","text":"3190"},{"range":"3560","text":"3191"},{"range":"3561","text":"3190"},{"range":"3561","text":"3191"},{"range":"3562","text":"3190"},{"range":"3562","text":"3191"},{"range":"3563","text":"3190"},{"range":"3563","text":"3191"},{"range":"3564","text":"3190"},{"range":"3564","text":"3191"},{"range":"3565","text":"3190"},{"range":"3565","text":"3191"},{"range":"3566","text":"3190"},{"range":"3566","text":"3191"},{"range":"3567","text":"3190"},{"range":"3567","text":"3191"},{"range":"3568","text":"3190"},{"range":"3568","text":"3191"},{"range":"3569","text":"3190"},{"range":"3569","text":"3191"},{"range":"3570","text":"3190"},{"range":"3570","text":"3191"},{"range":"3571","text":"3190"},{"range":"3571","text":"3191"},{"range":"3572","text":"3190"},{"range":"3572","text":"3191"},{"range":"3573","text":"3190"},{"range":"3573","text":"3191"},[3261,3264],"unknown","never",[1711,1714],[2512,2515],[1562,1565],[1682,1685],[3023,3026],[7349,7352],[386,389],[965,968],[2388,2391],[2920,2923],[2945,2948],[2983,2986],[1057,1060],[1071,1074],[1159,1162],[1179,1182],[1218,1221],[3515,3518],[3921,3924],[1549,1552],[3030,3033],[3222,3225],[4700,4703],[287,290],[536,539],[576,579],[848,851],[862,865],[252,255],[267,270],[589,592],[848,851],[856,859],[557,560],[845,848],[856,859],[1093,1096],[1104,1107],[1342,1345],[1353,1356],[1592,1595],[1604,1607],[1911,1914],[1976,1979],[2242,2245],[210,213],[709,712],[934,937],[1063,1066],[1202,1205],[1344,1347],[1587,1590],[240,243],[1640,1643],[1894,1897],[2040,2043],[2147,2150],[2255,2258],[2625,2628],[43,46],[58,61],[156,159],[168,171],[269,272],[285,288],[449,452],[509,512],[563,566],[679,682],[232,235],[343,346],[824,827],[2477,2480],[3379,3382],[3460,3463],[4680,4683],[4688,4691],[1352,1355],[1657,1660],[2256,2259],[2789,2792],[2886,2889],[3760,3763],[3778,3781],[3790,3793],[1573,1576],[1731,1734],[2457,2460],[2546,2549],[3273,3276],[2268,2271],[7214,7217],[6488,6491],[6599,6602],[6768,6771],[7090,7093],[217,220],[223,226],[281,284],[527,530],[643,646],[746,749],[992,995],[1136,1139],[1367,1370],[1470,1473],[1571,1574],[1817,1820],[2069,2072],[2326,2329],[272,275],[1620,1623],[284,287],[305,308],[5935,5938],[6110,6113],[6678,6681],[6736,6739],[6841,6844],[7043,7046],[7794,7797],[7870,7873],[8457,8460],[8552,8555],[8655,8658],[8740,8743],[8848,8851],[8938,8941],[9797,9800],[9876,9879],[9994,9997],[10096,10099],[10183,10186],[10252,10255],[10496,10499],[10568,10571],[11017,11020],[11140,11143],[393,396],[1398,1401],[1428,1431],[778,781],[797,800],[1342,1345],[1837,1840],[4135,4138],[190,193],[528,531],[1985,1988],[2398,2401],[892,895],[1961,1964],[2371,2374],[3084,3087],[309,312],[339,342],[1188,1191],[1759,1762],[1770,1773],[376,379],[11032,11035],[1517,1520],[1254,1257],[1301,1304],[1359,1362],[1415,1418],[2225,2228],[3434,3437],[3565,3568],[17236,17239],[17780,17783],[18649,18652],[18740,18743],[212,215],[489,492],[1262,1265],[1473,1476],[2091,2094],[3253,3256],[3836,3839],[6526,6529],[6995,6998],[7161,7164],[8888,8891],[543,546],[733,736],[939,942],[1019,1022],[1190,1193],[1458,1461],[1204,1207],[1377,1380],[4376,4379],[5537,5540],[5578,5581],[6124,6127],[1689,1692],[1963,1966],[4973,4976],[3072,3075],[3297,3300],[3562,3565],[3843,3846],[5444,5447],[6775,6778],[9477,9480],[9754,9757],[10034,10037],[10049,10052],[10238,10241],[10828,10831],[14595,14598],[3272,3275],[6223,6226],[515,518],[759,762],[555,558],[973,976],[1051,1054],[1202,1205],[1459,1462],[626,629],[819,822],[1023,1026],[1100,1103],[1255,1258],[1570,1573],[539,542],[789,792],[748,751],[1018,1021],[1088,1091],[2484,2487],[1233,1236],[1801,1804],[1929,1932],[2000,2003],[3247,3250],[550,553],[610,613],[826,829],[1016,1019],[1093,1096],[1341,1344],[1396,1399],[1486,1489],[1659,1662],[1914,1917],[512,515],[761,764],[1391,1394],[1969,1972],[3527,3530],[635,638],[1717,1720],[4442,4445],[5515,5518],[6196,6199],[559,562],[816,819],[616,619],[1039,1042],[1047,1050],[1156,1159],[3429,3432],[4151,4154],[969,972],[998,1001],[3948,3951],[4145,4148],[4227,4230],[5957,5960],[6729,6732],[6917,6920],[6994,6997],[8553,8556],[2125,2128],[2203,2206],[10513,10516],[10864,10867],[11327,11330],[11891,11894],[12579,12582],[13873,13876],[15081,15084],[3429,3432],[5954,5957],[6256,6259],[6271,6274],[6470,6473],[7355,7358],[1674,1677],[2139,2142],[4584,4587],[7607,7610],[10629,10632],[12908,12911],[2889,2892],[3170,3173],[4856,4859],[6753,6756],[1114,1117],[917,920],[1292,1295],[1429,1432],[1446,1449],[1469,1472],[1491,1494],[2084,2087],[2140,2143],[4109,4112],[4257,4260],[4946,4949],[5562,5565],[7106,7109],[7297,7300],[11598,11601],[1125,1128],[1854,1857],[2276,2279],[2678,2681],[3214,3217],[3902,3905],[5240,5243],[6376,6379],[2236,2239],[3620,3623],[4463,4466],[6891,6894],[7509,7512],[8055,8058],[8458,8461],[8960,8963],[11059,11062],[13111,13114],[13413,13416],[13428,13431],[13627,13630],[14505,14508],[471,474],[1245,1248],[1319,1322],[866,869],[1006,1009],[2015,2018],[2085,2088],[740,743],[769,772],[1836,1839],[1909,1912],[2357,2360],[6829,6832],[6924,6927],[803,806],[832,835],[2086,2089],[3883,3886],[4068,4071],[4144,4147],[5703,5706],[6456,6459],[6642,6645],[6718,6721],[8241,8244],[657,660],[1441,1444],[1517,1520],[5292,5295],[11936,11939],[666,669],[684,687],[964,967],[1185,1188],[2015,2018],[688,691],[4733,4736],[3085,3088],[3251,3254],[3750,3753],[5237,5240],[1159,1162],[1618,1621]]